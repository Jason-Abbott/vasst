'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class LegacyDataSet
    Inherits DataSet
    
    Private tabletblUsers As tblUsersDataTable
    
    Private tabletblUserTypes As tblUserTypesDataTable
    
    Private tabletblSoftware As tblSoftwareDataTable
    
    Private tabletblSoftwareVersions As tblSoftwareVersionsDataTable
    
    Private tabletblTutorials As tblTutorialsDataTable
    
    Private tabletblSite As tblSiteDataTable
    
    Private tabletblStatusCodes As tblStatusCodesDataTable
    
    Private tabletblPublishers As tblPublishersDataTable
    
    Private tabletblRankings As tblRankingsDataTable
    
    Private tabletblReviews As tblReviewsDataTable
    
    Private tabletblScripts As tblScriptsDataTable
    
    Private tabletblProjects As tblProjectsDataTable
    
    Private tabletblFormats As tblFormatsDataTable
    
    Private tabletblItemTypes As tblItemTypesDataTable
    
    Private tabletblProjectPlugins As tblProjectPluginsDataTable
    
    Private tabletblPlugins As tblPluginsDataTable
    
    Private tabletblPluginPackages As tblPluginPackagesDataTable
    
    Private tabletblPluginTypes As tblPluginTypesDataTable
    
    Private tabletblPublisherItemTypes As tblPublisherItemTypesDataTable
    
    Private tabletblCategories As tblCategoriesDataTable
    
    Private tabletblItemSites As tblItemSitesDataTable
    
    Private tabletblCategoryItemTypes As tblCategoryItemTypesDataTable
    
    Private tabletblContests As tblContestsDataTable
    
    Private tabletblContestVotes As tblContestVotesDataTable
    
    Private tabletblContestItems As tblContestItemsDataTable
    
    Private tabletblItemCategories As tblItemCategoriesDataTable
    
    Private tabletblLog As tblLogDataTable
    
    Private tableAssetItems As AssetItemsDataTable
    
    Private relationUserTypesToUsers As DataRelation
    
    Private relationSoftwareToSoftwareVersions As DataRelation
    
    Private relationStatusCodesToUsers As DataRelation
    
    Private relationSiteToUsers As DataRelation
    
    Private relationStatusCodesToTutorials As DataRelation
    
    Private relationUsersToTutorialsAuthor As DataRelation
    
    Private relationUsersToTutorialsSubmitter As DataRelation
    
    Private relationPublishersToSoftware As DataRelation
    
    Private relationUsersToReviewsAuthor As DataRelation
    
    Private relationStatusCodesToReviews As DataRelation
    
    Private relationUsersToReviewsSubmitter As DataRelation
    
    Private relationUsersToScripts As DataRelation
    
    Private relationStatusCodesToScripts As DataRelation
    
    Private relationUsersToProjects As DataRelation
    
    Private relationStatusCodesToProjects As DataRelation
    
    Private relationSoftwareVersionsToProjects As DataRelation
    
    Private relationFormatsToProjects As DataRelation
    
    Private relationFormatsToScripts As DataRelation
    
    Private relationProjectsToProjectPlugins As DataRelation
    
    Private relationPluginsToProjectPlugins As DataRelation
    
    Private relationPluginPackagesToPlugins As DataRelation
    
    Private relationPluginTypesToPluginPackages As DataRelation
    
    Private relationUsersToRankings As DataRelation
    
    Private relationItemTypesToRankings As DataRelation
    
    Private relationCategoriesToCategoryItemTypes As DataRelation
    
    Private relationItemTypesToCategoryItemTypes As DataRelation
    
    Private relationPublishersToPublisherItemTypes As DataRelation
    
    Private relationItemTypesToPublisherItemTypes As DataRelation
    
    Private relationSiteToItemSites As DataRelation
    
    Private relationItemTypesToItemSites As DataRelation
    
    Private relationUsersToContestVotes As DataRelation
    
    Private relationSiteToContests As DataRelation
    
    Private relationContestsToContestItems As DataRelation
    
    Private relationCategoriesToItemCategories As DataRelation
    
    Private relationAssetItemsToProjects As DataRelation
    
    Private relationAssetItemsToScripts As DataRelation
    
    Private relationAssetItemsToTutorials As DataRelation
    
    Private relationAssetItemsToReviews As DataRelation
    
    Private relationSoftwareVersionsToScripts As DataRelation
    
    Private relationAssetItemsToRankings As DataRelation
    
    Private relationAssetItemsToContestItems As DataRelation
    
    Private relationAssetItemsToContestVotes As DataRelation
    
    Private relationAssetItemsToItemSite As DataRelation
    
    Private relationContestItemsToContestVotes As DataRelation
    
    Private relationAssetItemsToItemCategories As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tblUsers")) Is Nothing) Then
                Me.Tables.Add(New tblUsersDataTable(ds.Tables("tblUsers")))
            End If
            If (Not (ds.Tables("tblUserTypes")) Is Nothing) Then
                Me.Tables.Add(New tblUserTypesDataTable(ds.Tables("tblUserTypes")))
            End If
            If (Not (ds.Tables("tblSoftware")) Is Nothing) Then
                Me.Tables.Add(New tblSoftwareDataTable(ds.Tables("tblSoftware")))
            End If
            If (Not (ds.Tables("tblSoftwareVersions")) Is Nothing) Then
                Me.Tables.Add(New tblSoftwareVersionsDataTable(ds.Tables("tblSoftwareVersions")))
            End If
            If (Not (ds.Tables("tblTutorials")) Is Nothing) Then
                Me.Tables.Add(New tblTutorialsDataTable(ds.Tables("tblTutorials")))
            End If
            If (Not (ds.Tables("tblSite")) Is Nothing) Then
                Me.Tables.Add(New tblSiteDataTable(ds.Tables("tblSite")))
            End If
            If (Not (ds.Tables("tblStatusCodes")) Is Nothing) Then
                Me.Tables.Add(New tblStatusCodesDataTable(ds.Tables("tblStatusCodes")))
            End If
            If (Not (ds.Tables("tblPublishers")) Is Nothing) Then
                Me.Tables.Add(New tblPublishersDataTable(ds.Tables("tblPublishers")))
            End If
            If (Not (ds.Tables("tblRankings")) Is Nothing) Then
                Me.Tables.Add(New tblRankingsDataTable(ds.Tables("tblRankings")))
            End If
            If (Not (ds.Tables("tblReviews")) Is Nothing) Then
                Me.Tables.Add(New tblReviewsDataTable(ds.Tables("tblReviews")))
            End If
            If (Not (ds.Tables("tblScripts")) Is Nothing) Then
                Me.Tables.Add(New tblScriptsDataTable(ds.Tables("tblScripts")))
            End If
            If (Not (ds.Tables("tblProjects")) Is Nothing) Then
                Me.Tables.Add(New tblProjectsDataTable(ds.Tables("tblProjects")))
            End If
            If (Not (ds.Tables("tblFormats")) Is Nothing) Then
                Me.Tables.Add(New tblFormatsDataTable(ds.Tables("tblFormats")))
            End If
            If (Not (ds.Tables("tblItemTypes")) Is Nothing) Then
                Me.Tables.Add(New tblItemTypesDataTable(ds.Tables("tblItemTypes")))
            End If
            If (Not (ds.Tables("tblProjectPlugins")) Is Nothing) Then
                Me.Tables.Add(New tblProjectPluginsDataTable(ds.Tables("tblProjectPlugins")))
            End If
            If (Not (ds.Tables("tblPlugins")) Is Nothing) Then
                Me.Tables.Add(New tblPluginsDataTable(ds.Tables("tblPlugins")))
            End If
            If (Not (ds.Tables("tblPluginPackages")) Is Nothing) Then
                Me.Tables.Add(New tblPluginPackagesDataTable(ds.Tables("tblPluginPackages")))
            End If
            If (Not (ds.Tables("tblPluginTypes")) Is Nothing) Then
                Me.Tables.Add(New tblPluginTypesDataTable(ds.Tables("tblPluginTypes")))
            End If
            If (Not (ds.Tables("tblPublisherItemTypes")) Is Nothing) Then
                Me.Tables.Add(New tblPublisherItemTypesDataTable(ds.Tables("tblPublisherItemTypes")))
            End If
            If (Not (ds.Tables("tblCategories")) Is Nothing) Then
                Me.Tables.Add(New tblCategoriesDataTable(ds.Tables("tblCategories")))
            End If
            If (Not (ds.Tables("tblItemSites")) Is Nothing) Then
                Me.Tables.Add(New tblItemSitesDataTable(ds.Tables("tblItemSites")))
            End If
            If (Not (ds.Tables("tblCategoryItemTypes")) Is Nothing) Then
                Me.Tables.Add(New tblCategoryItemTypesDataTable(ds.Tables("tblCategoryItemTypes")))
            End If
            If (Not (ds.Tables("tblContests")) Is Nothing) Then
                Me.Tables.Add(New tblContestsDataTable(ds.Tables("tblContests")))
            End If
            If (Not (ds.Tables("tblContestVotes")) Is Nothing) Then
                Me.Tables.Add(New tblContestVotesDataTable(ds.Tables("tblContestVotes")))
            End If
            If (Not (ds.Tables("tblContestItems")) Is Nothing) Then
                Me.Tables.Add(New tblContestItemsDataTable(ds.Tables("tblContestItems")))
            End If
            If (Not (ds.Tables("tblItemCategories")) Is Nothing) Then
                Me.Tables.Add(New tblItemCategoriesDataTable(ds.Tables("tblItemCategories")))
            End If
            If (Not (ds.Tables("tblLog")) Is Nothing) Then
                Me.Tables.Add(New tblLogDataTable(ds.Tables("tblLog")))
            End If
            If (Not (ds.Tables("AssetItems")) Is Nothing) Then
                Me.Tables.Add(New AssetItemsDataTable(ds.Tables("AssetItems")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblUsers As tblUsersDataTable
        Get
            Return Me.tabletblUsers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblUserTypes As tblUserTypesDataTable
        Get
            Return Me.tabletblUserTypes
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblSoftware As tblSoftwareDataTable
        Get
            Return Me.tabletblSoftware
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblSoftwareVersions As tblSoftwareVersionsDataTable
        Get
            Return Me.tabletblSoftwareVersions
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblTutorials As tblTutorialsDataTable
        Get
            Return Me.tabletblTutorials
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblSite As tblSiteDataTable
        Get
            Return Me.tabletblSite
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblStatusCodes As tblStatusCodesDataTable
        Get
            Return Me.tabletblStatusCodes
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblPublishers As tblPublishersDataTable
        Get
            Return Me.tabletblPublishers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblRankings As tblRankingsDataTable
        Get
            Return Me.tabletblRankings
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblReviews As tblReviewsDataTable
        Get
            Return Me.tabletblReviews
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblScripts As tblScriptsDataTable
        Get
            Return Me.tabletblScripts
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblProjects As tblProjectsDataTable
        Get
            Return Me.tabletblProjects
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblFormats As tblFormatsDataTable
        Get
            Return Me.tabletblFormats
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblItemTypes As tblItemTypesDataTable
        Get
            Return Me.tabletblItemTypes
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblProjectPlugins As tblProjectPluginsDataTable
        Get
            Return Me.tabletblProjectPlugins
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblPlugins As tblPluginsDataTable
        Get
            Return Me.tabletblPlugins
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblPluginPackages As tblPluginPackagesDataTable
        Get
            Return Me.tabletblPluginPackages
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblPluginTypes As tblPluginTypesDataTable
        Get
            Return Me.tabletblPluginTypes
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblPublisherItemTypes As tblPublisherItemTypesDataTable
        Get
            Return Me.tabletblPublisherItemTypes
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblCategories As tblCategoriesDataTable
        Get
            Return Me.tabletblCategories
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblItemSites As tblItemSitesDataTable
        Get
            Return Me.tabletblItemSites
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblCategoryItemTypes As tblCategoryItemTypesDataTable
        Get
            Return Me.tabletblCategoryItemTypes
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblContests As tblContestsDataTable
        Get
            Return Me.tabletblContests
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblContestVotes As tblContestVotesDataTable
        Get
            Return Me.tabletblContestVotes
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblContestItems As tblContestItemsDataTable
        Get
            Return Me.tabletblContestItems
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblItemCategories As tblItemCategoriesDataTable
        Get
            Return Me.tabletblItemCategories
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblLog As tblLogDataTable
        Get
            Return Me.tabletblLog
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssetItems As AssetItemsDataTable
        Get
            Return Me.tableAssetItems
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As LegacyDataSet = CType(MyBase.Clone,LegacyDataSet)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("tblUsers")) Is Nothing) Then
            Me.Tables.Add(New tblUsersDataTable(ds.Tables("tblUsers")))
        End If
        If (Not (ds.Tables("tblUserTypes")) Is Nothing) Then
            Me.Tables.Add(New tblUserTypesDataTable(ds.Tables("tblUserTypes")))
        End If
        If (Not (ds.Tables("tblSoftware")) Is Nothing) Then
            Me.Tables.Add(New tblSoftwareDataTable(ds.Tables("tblSoftware")))
        End If
        If (Not (ds.Tables("tblSoftwareVersions")) Is Nothing) Then
            Me.Tables.Add(New tblSoftwareVersionsDataTable(ds.Tables("tblSoftwareVersions")))
        End If
        If (Not (ds.Tables("tblTutorials")) Is Nothing) Then
            Me.Tables.Add(New tblTutorialsDataTable(ds.Tables("tblTutorials")))
        End If
        If (Not (ds.Tables("tblSite")) Is Nothing) Then
            Me.Tables.Add(New tblSiteDataTable(ds.Tables("tblSite")))
        End If
        If (Not (ds.Tables("tblStatusCodes")) Is Nothing) Then
            Me.Tables.Add(New tblStatusCodesDataTable(ds.Tables("tblStatusCodes")))
        End If
        If (Not (ds.Tables("tblPublishers")) Is Nothing) Then
            Me.Tables.Add(New tblPublishersDataTable(ds.Tables("tblPublishers")))
        End If
        If (Not (ds.Tables("tblRankings")) Is Nothing) Then
            Me.Tables.Add(New tblRankingsDataTable(ds.Tables("tblRankings")))
        End If
        If (Not (ds.Tables("tblReviews")) Is Nothing) Then
            Me.Tables.Add(New tblReviewsDataTable(ds.Tables("tblReviews")))
        End If
        If (Not (ds.Tables("tblScripts")) Is Nothing) Then
            Me.Tables.Add(New tblScriptsDataTable(ds.Tables("tblScripts")))
        End If
        If (Not (ds.Tables("tblProjects")) Is Nothing) Then
            Me.Tables.Add(New tblProjectsDataTable(ds.Tables("tblProjects")))
        End If
        If (Not (ds.Tables("tblFormats")) Is Nothing) Then
            Me.Tables.Add(New tblFormatsDataTable(ds.Tables("tblFormats")))
        End If
        If (Not (ds.Tables("tblItemTypes")) Is Nothing) Then
            Me.Tables.Add(New tblItemTypesDataTable(ds.Tables("tblItemTypes")))
        End If
        If (Not (ds.Tables("tblProjectPlugins")) Is Nothing) Then
            Me.Tables.Add(New tblProjectPluginsDataTable(ds.Tables("tblProjectPlugins")))
        End If
        If (Not (ds.Tables("tblPlugins")) Is Nothing) Then
            Me.Tables.Add(New tblPluginsDataTable(ds.Tables("tblPlugins")))
        End If
        If (Not (ds.Tables("tblPluginPackages")) Is Nothing) Then
            Me.Tables.Add(New tblPluginPackagesDataTable(ds.Tables("tblPluginPackages")))
        End If
        If (Not (ds.Tables("tblPluginTypes")) Is Nothing) Then
            Me.Tables.Add(New tblPluginTypesDataTable(ds.Tables("tblPluginTypes")))
        End If
        If (Not (ds.Tables("tblPublisherItemTypes")) Is Nothing) Then
            Me.Tables.Add(New tblPublisherItemTypesDataTable(ds.Tables("tblPublisherItemTypes")))
        End If
        If (Not (ds.Tables("tblCategories")) Is Nothing) Then
            Me.Tables.Add(New tblCategoriesDataTable(ds.Tables("tblCategories")))
        End If
        If (Not (ds.Tables("tblItemSites")) Is Nothing) Then
            Me.Tables.Add(New tblItemSitesDataTable(ds.Tables("tblItemSites")))
        End If
        If (Not (ds.Tables("tblCategoryItemTypes")) Is Nothing) Then
            Me.Tables.Add(New tblCategoryItemTypesDataTable(ds.Tables("tblCategoryItemTypes")))
        End If
        If (Not (ds.Tables("tblContests")) Is Nothing) Then
            Me.Tables.Add(New tblContestsDataTable(ds.Tables("tblContests")))
        End If
        If (Not (ds.Tables("tblContestVotes")) Is Nothing) Then
            Me.Tables.Add(New tblContestVotesDataTable(ds.Tables("tblContestVotes")))
        End If
        If (Not (ds.Tables("tblContestItems")) Is Nothing) Then
            Me.Tables.Add(New tblContestItemsDataTable(ds.Tables("tblContestItems")))
        End If
        If (Not (ds.Tables("tblItemCategories")) Is Nothing) Then
            Me.Tables.Add(New tblItemCategoriesDataTable(ds.Tables("tblItemCategories")))
        End If
        If (Not (ds.Tables("tblLog")) Is Nothing) Then
            Me.Tables.Add(New tblLogDataTable(ds.Tables("tblLog")))
        End If
        If (Not (ds.Tables("AssetItems")) Is Nothing) Then
            Me.Tables.Add(New AssetItemsDataTable(ds.Tables("AssetItems")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tabletblUsers = CType(Me.Tables("tblUsers"),tblUsersDataTable)
        If (Not (Me.tabletblUsers) Is Nothing) Then
            Me.tabletblUsers.InitVars
        End If
        Me.tabletblUserTypes = CType(Me.Tables("tblUserTypes"),tblUserTypesDataTable)
        If (Not (Me.tabletblUserTypes) Is Nothing) Then
            Me.tabletblUserTypes.InitVars
        End If
        Me.tabletblSoftware = CType(Me.Tables("tblSoftware"),tblSoftwareDataTable)
        If (Not (Me.tabletblSoftware) Is Nothing) Then
            Me.tabletblSoftware.InitVars
        End If
        Me.tabletblSoftwareVersions = CType(Me.Tables("tblSoftwareVersions"),tblSoftwareVersionsDataTable)
        If (Not (Me.tabletblSoftwareVersions) Is Nothing) Then
            Me.tabletblSoftwareVersions.InitVars
        End If
        Me.tabletblTutorials = CType(Me.Tables("tblTutorials"),tblTutorialsDataTable)
        If (Not (Me.tabletblTutorials) Is Nothing) Then
            Me.tabletblTutorials.InitVars
        End If
        Me.tabletblSite = CType(Me.Tables("tblSite"),tblSiteDataTable)
        If (Not (Me.tabletblSite) Is Nothing) Then
            Me.tabletblSite.InitVars
        End If
        Me.tabletblStatusCodes = CType(Me.Tables("tblStatusCodes"),tblStatusCodesDataTable)
        If (Not (Me.tabletblStatusCodes) Is Nothing) Then
            Me.tabletblStatusCodes.InitVars
        End If
        Me.tabletblPublishers = CType(Me.Tables("tblPublishers"),tblPublishersDataTable)
        If (Not (Me.tabletblPublishers) Is Nothing) Then
            Me.tabletblPublishers.InitVars
        End If
        Me.tabletblRankings = CType(Me.Tables("tblRankings"),tblRankingsDataTable)
        If (Not (Me.tabletblRankings) Is Nothing) Then
            Me.tabletblRankings.InitVars
        End If
        Me.tabletblReviews = CType(Me.Tables("tblReviews"),tblReviewsDataTable)
        If (Not (Me.tabletblReviews) Is Nothing) Then
            Me.tabletblReviews.InitVars
        End If
        Me.tabletblScripts = CType(Me.Tables("tblScripts"),tblScriptsDataTable)
        If (Not (Me.tabletblScripts) Is Nothing) Then
            Me.tabletblScripts.InitVars
        End If
        Me.tabletblProjects = CType(Me.Tables("tblProjects"),tblProjectsDataTable)
        If (Not (Me.tabletblProjects) Is Nothing) Then
            Me.tabletblProjects.InitVars
        End If
        Me.tabletblFormats = CType(Me.Tables("tblFormats"),tblFormatsDataTable)
        If (Not (Me.tabletblFormats) Is Nothing) Then
            Me.tabletblFormats.InitVars
        End If
        Me.tabletblItemTypes = CType(Me.Tables("tblItemTypes"),tblItemTypesDataTable)
        If (Not (Me.tabletblItemTypes) Is Nothing) Then
            Me.tabletblItemTypes.InitVars
        End If
        Me.tabletblProjectPlugins = CType(Me.Tables("tblProjectPlugins"),tblProjectPluginsDataTable)
        If (Not (Me.tabletblProjectPlugins) Is Nothing) Then
            Me.tabletblProjectPlugins.InitVars
        End If
        Me.tabletblPlugins = CType(Me.Tables("tblPlugins"),tblPluginsDataTable)
        If (Not (Me.tabletblPlugins) Is Nothing) Then
            Me.tabletblPlugins.InitVars
        End If
        Me.tabletblPluginPackages = CType(Me.Tables("tblPluginPackages"),tblPluginPackagesDataTable)
        If (Not (Me.tabletblPluginPackages) Is Nothing) Then
            Me.tabletblPluginPackages.InitVars
        End If
        Me.tabletblPluginTypes = CType(Me.Tables("tblPluginTypes"),tblPluginTypesDataTable)
        If (Not (Me.tabletblPluginTypes) Is Nothing) Then
            Me.tabletblPluginTypes.InitVars
        End If
        Me.tabletblPublisherItemTypes = CType(Me.Tables("tblPublisherItemTypes"),tblPublisherItemTypesDataTable)
        If (Not (Me.tabletblPublisherItemTypes) Is Nothing) Then
            Me.tabletblPublisherItemTypes.InitVars
        End If
        Me.tabletblCategories = CType(Me.Tables("tblCategories"),tblCategoriesDataTable)
        If (Not (Me.tabletblCategories) Is Nothing) Then
            Me.tabletblCategories.InitVars
        End If
        Me.tabletblItemSites = CType(Me.Tables("tblItemSites"),tblItemSitesDataTable)
        If (Not (Me.tabletblItemSites) Is Nothing) Then
            Me.tabletblItemSites.InitVars
        End If
        Me.tabletblCategoryItemTypes = CType(Me.Tables("tblCategoryItemTypes"),tblCategoryItemTypesDataTable)
        If (Not (Me.tabletblCategoryItemTypes) Is Nothing) Then
            Me.tabletblCategoryItemTypes.InitVars
        End If
        Me.tabletblContests = CType(Me.Tables("tblContests"),tblContestsDataTable)
        If (Not (Me.tabletblContests) Is Nothing) Then
            Me.tabletblContests.InitVars
        End If
        Me.tabletblContestVotes = CType(Me.Tables("tblContestVotes"),tblContestVotesDataTable)
        If (Not (Me.tabletblContestVotes) Is Nothing) Then
            Me.tabletblContestVotes.InitVars
        End If
        Me.tabletblContestItems = CType(Me.Tables("tblContestItems"),tblContestItemsDataTable)
        If (Not (Me.tabletblContestItems) Is Nothing) Then
            Me.tabletblContestItems.InitVars
        End If
        Me.tabletblItemCategories = CType(Me.Tables("tblItemCategories"),tblItemCategoriesDataTable)
        If (Not (Me.tabletblItemCategories) Is Nothing) Then
            Me.tabletblItemCategories.InitVars
        End If
        Me.tabletblLog = CType(Me.Tables("tblLog"),tblLogDataTable)
        If (Not (Me.tabletblLog) Is Nothing) Then
            Me.tabletblLog.InitVars
        End If
        Me.tableAssetItems = CType(Me.Tables("AssetItems"),AssetItemsDataTable)
        If (Not (Me.tableAssetItems) Is Nothing) Then
            Me.tableAssetItems.InitVars
        End If
        Me.relationUserTypesToUsers = Me.Relations("UserTypesToUsers")
        Me.relationSoftwareToSoftwareVersions = Me.Relations("SoftwareToSoftwareVersions")
        Me.relationStatusCodesToUsers = Me.Relations("StatusCodesToUsers")
        Me.relationSiteToUsers = Me.Relations("SiteToUsers")
        Me.relationStatusCodesToTutorials = Me.Relations("StatusCodesToTutorials")
        Me.relationUsersToTutorialsAuthor = Me.Relations("UsersToTutorialsAuthor")
        Me.relationUsersToTutorialsSubmitter = Me.Relations("UsersToTutorialsSubmitter")
        Me.relationPublishersToSoftware = Me.Relations("PublishersToSoftware")
        Me.relationUsersToReviewsAuthor = Me.Relations("UsersToReviewsAuthor")
        Me.relationStatusCodesToReviews = Me.Relations("StatusCodesToReviews")
        Me.relationUsersToReviewsSubmitter = Me.Relations("UsersToReviewsSubmitter")
        Me.relationUsersToScripts = Me.Relations("UsersToScripts")
        Me.relationStatusCodesToScripts = Me.Relations("StatusCodesToScripts")
        Me.relationUsersToProjects = Me.Relations("UsersToProjects")
        Me.relationStatusCodesToProjects = Me.Relations("StatusCodesToProjects")
        Me.relationSoftwareVersionsToProjects = Me.Relations("SoftwareVersionsToProjects")
        Me.relationFormatsToProjects = Me.Relations("FormatsToProjects")
        Me.relationFormatsToScripts = Me.Relations("FormatsToScripts")
        Me.relationProjectsToProjectPlugins = Me.Relations("ProjectsToProjectPlugins")
        Me.relationPluginsToProjectPlugins = Me.Relations("PluginsToProjectPlugins")
        Me.relationPluginPackagesToPlugins = Me.Relations("PluginPackagesToPlugins")
        Me.relationPluginTypesToPluginPackages = Me.Relations("PluginTypesToPluginPackages")
        Me.relationUsersToRankings = Me.Relations("UsersToRankings")
        Me.relationItemTypesToRankings = Me.Relations("ItemTypesToRankings")
        Me.relationCategoriesToCategoryItemTypes = Me.Relations("CategoriesToCategoryItemTypes")
        Me.relationItemTypesToCategoryItemTypes = Me.Relations("ItemTypesToCategoryItemTypes")
        Me.relationPublishersToPublisherItemTypes = Me.Relations("PublishersToPublisherItemTypes")
        Me.relationItemTypesToPublisherItemTypes = Me.Relations("ItemTypesToPublisherItemTypes")
        Me.relationSiteToItemSites = Me.Relations("SiteToItemSites")
        Me.relationItemTypesToItemSites = Me.Relations("ItemTypesToItemSites")
        Me.relationUsersToContestVotes = Me.Relations("UsersToContestVotes")
        Me.relationSiteToContests = Me.Relations("SiteToContests")
        Me.relationContestsToContestItems = Me.Relations("ContestsToContestItems")
        Me.relationCategoriesToItemCategories = Me.Relations("CategoriesToItemCategories")
        Me.relationAssetItemsToProjects = Me.Relations("AssetItemsToProjects")
        Me.relationAssetItemsToScripts = Me.Relations("AssetItemsToScripts")
        Me.relationAssetItemsToTutorials = Me.Relations("AssetItemsToTutorials")
        Me.relationAssetItemsToReviews = Me.Relations("AssetItemsToReviews")
        Me.relationSoftwareVersionsToScripts = Me.Relations("SoftwareVersionsToScripts")
        Me.relationAssetItemsToRankings = Me.Relations("AssetItemsToRankings")
        Me.relationAssetItemsToContestItems = Me.Relations("AssetItemsToContestItems")
        Me.relationAssetItemsToContestVotes = Me.Relations("AssetItemsToContestVotes")
        Me.relationAssetItemsToItemSite = Me.Relations("AssetItemsToItemSite")
        Me.relationContestItemsToContestVotes = Me.Relations("ContestItemsToContestVotes")
        Me.relationAssetItemsToItemCategories = Me.Relations("AssetItemsToItemCategories")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "LegacyDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/LegacyDataSet.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tabletblUsers = New tblUsersDataTable
        Me.Tables.Add(Me.tabletblUsers)
        Me.tabletblUserTypes = New tblUserTypesDataTable
        Me.Tables.Add(Me.tabletblUserTypes)
        Me.tabletblSoftware = New tblSoftwareDataTable
        Me.Tables.Add(Me.tabletblSoftware)
        Me.tabletblSoftwareVersions = New tblSoftwareVersionsDataTable
        Me.Tables.Add(Me.tabletblSoftwareVersions)
        Me.tabletblTutorials = New tblTutorialsDataTable
        Me.Tables.Add(Me.tabletblTutorials)
        Me.tabletblSite = New tblSiteDataTable
        Me.Tables.Add(Me.tabletblSite)
        Me.tabletblStatusCodes = New tblStatusCodesDataTable
        Me.Tables.Add(Me.tabletblStatusCodes)
        Me.tabletblPublishers = New tblPublishersDataTable
        Me.Tables.Add(Me.tabletblPublishers)
        Me.tabletblRankings = New tblRankingsDataTable
        Me.Tables.Add(Me.tabletblRankings)
        Me.tabletblReviews = New tblReviewsDataTable
        Me.Tables.Add(Me.tabletblReviews)
        Me.tabletblScripts = New tblScriptsDataTable
        Me.Tables.Add(Me.tabletblScripts)
        Me.tabletblProjects = New tblProjectsDataTable
        Me.Tables.Add(Me.tabletblProjects)
        Me.tabletblFormats = New tblFormatsDataTable
        Me.Tables.Add(Me.tabletblFormats)
        Me.tabletblItemTypes = New tblItemTypesDataTable
        Me.Tables.Add(Me.tabletblItemTypes)
        Me.tabletblProjectPlugins = New tblProjectPluginsDataTable
        Me.Tables.Add(Me.tabletblProjectPlugins)
        Me.tabletblPlugins = New tblPluginsDataTable
        Me.Tables.Add(Me.tabletblPlugins)
        Me.tabletblPluginPackages = New tblPluginPackagesDataTable
        Me.Tables.Add(Me.tabletblPluginPackages)
        Me.tabletblPluginTypes = New tblPluginTypesDataTable
        Me.Tables.Add(Me.tabletblPluginTypes)
        Me.tabletblPublisherItemTypes = New tblPublisherItemTypesDataTable
        Me.Tables.Add(Me.tabletblPublisherItemTypes)
        Me.tabletblCategories = New tblCategoriesDataTable
        Me.Tables.Add(Me.tabletblCategories)
        Me.tabletblItemSites = New tblItemSitesDataTable
        Me.Tables.Add(Me.tabletblItemSites)
        Me.tabletblCategoryItemTypes = New tblCategoryItemTypesDataTable
        Me.Tables.Add(Me.tabletblCategoryItemTypes)
        Me.tabletblContests = New tblContestsDataTable
        Me.Tables.Add(Me.tabletblContests)
        Me.tabletblContestVotes = New tblContestVotesDataTable
        Me.Tables.Add(Me.tabletblContestVotes)
        Me.tabletblContestItems = New tblContestItemsDataTable
        Me.Tables.Add(Me.tabletblContestItems)
        Me.tabletblItemCategories = New tblItemCategoriesDataTable
        Me.Tables.Add(Me.tabletblItemCategories)
        Me.tabletblLog = New tblLogDataTable
        Me.Tables.Add(Me.tabletblLog)
        Me.tableAssetItems = New AssetItemsDataTable
        Me.Tables.Add(Me.tableAssetItems)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("UserTypesToUsers", New DataColumn() {Me.tabletblUserTypes.lUserTypeIDColumn}, New DataColumn() {Me.tabletblUsers.lUserTypeIDColumn})
        Me.tabletblUsers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("StatusCodesToUsers", New DataColumn() {Me.tabletblStatusCodes.lStatusIDColumn}, New DataColumn() {Me.tabletblUsers.lStatusIDColumn})
        Me.tabletblUsers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SiteToUsers", New DataColumn() {Me.tabletblSite.lSiteIDColumn}, New DataColumn() {Me.tabletblUsers.lSiteIDColumn})
        Me.tabletblUsers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PublishersToSoftware", New DataColumn() {Me.tabletblPublishers.lPublisherIDColumn}, New DataColumn() {Me.tabletblSoftware.lPublisherIDColumn})
        Me.tabletblSoftware.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SoftwareToSoftwareVersions", New DataColumn() {Me.tabletblSoftware.lSoftwareIDColumn}, New DataColumn() {Me.tabletblSoftwareVersions.lSoftwareIDColumn})
        Me.tabletblSoftwareVersions.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("StatusCodesToTutorials", New DataColumn() {Me.tabletblStatusCodes.lStatusIDColumn}, New DataColumn() {Me.tabletblTutorials.lStatusIDColumn})
        Me.tabletblTutorials.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("UsersToTutorialsAuthor", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblTutorials.lAuthorIDColumn})
        Me.tabletblTutorials.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("UsersToTutorialsSubmitter", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblTutorials.lSubmitterIDColumn})
        Me.tabletblTutorials.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AssetItemsToTutorials", New DataColumn() {Me.tableAssetItems.AssetIDColumn}, New DataColumn() {Me.tabletblTutorials.AssetIDColumn})
        Me.tabletblTutorials.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("UsersToRankings", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblRankings.lUserIDColumn})
        Me.tabletblRankings.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ItemTypesToRankings", New DataColumn() {Me.tabletblItemTypes.lItemTypeIDColumn}, New DataColumn() {Me.tabletblRankings.lItemTypeIDColumn})
        Me.tabletblRankings.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AssetItemsToRankings", New DataColumn() {Me.tableAssetItems.lItemIDColumn, Me.tableAssetItems.lItemTypeIDColumn}, New DataColumn() {Me.tabletblRankings.lItemIDColumn, Me.tabletblRankings.lItemTypeIDColumn})
        Me.tabletblRankings.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("UsersToReviewsAuthor", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblReviews.lAuthorIDColumn})
        Me.tabletblReviews.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("StatusCodesToReviews", New DataColumn() {Me.tabletblStatusCodes.lStatusIDColumn}, New DataColumn() {Me.tabletblReviews.lStatusIDColumn})
        Me.tabletblReviews.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("UsersToReviewsSubmitter", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblReviews.lSubmitterIDColumn})
        Me.tabletblReviews.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AssetItemsToReviews", New DataColumn() {Me.tableAssetItems.AssetIDColumn}, New DataColumn() {Me.tabletblReviews.AssetIDColumn})
        Me.tabletblReviews.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("UsersToScripts", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblScripts.lUserIDColumn})
        Me.tabletblScripts.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("StatusCodesToScripts", New DataColumn() {Me.tabletblStatusCodes.lStatusIDColumn}, New DataColumn() {Me.tabletblScripts.lStatusIDColumn})
        Me.tabletblScripts.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FormatsToScripts", New DataColumn() {Me.tabletblFormats.lFormatIDColumn}, New DataColumn() {Me.tabletblScripts.lFormatIDColumn})
        Me.tabletblScripts.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AssetItemsToScripts", New DataColumn() {Me.tableAssetItems.AssetIDColumn}, New DataColumn() {Me.tabletblScripts.AssetIDColumn})
        Me.tabletblScripts.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SoftwareVersionsToScripts", New DataColumn() {Me.tabletblSoftwareVersions.lVersionIDColumn}, New DataColumn() {Me.tabletblScripts.lSoftwareVersionIDColumn})
        Me.tabletblScripts.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("UsersToProjects", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblProjects.lUserIDColumn})
        Me.tabletblProjects.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("StatusCodesToProjects", New DataColumn() {Me.tabletblStatusCodes.lStatusIDColumn}, New DataColumn() {Me.tabletblProjects.lStatusIDColumn})
        Me.tabletblProjects.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SoftwareVersionsToProjects", New DataColumn() {Me.tabletblSoftwareVersions.lVersionIDColumn}, New DataColumn() {Me.tabletblProjects.lSoftwareVersionIDColumn})
        Me.tabletblProjects.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("FormatsToProjects", New DataColumn() {Me.tabletblFormats.lFormatIDColumn}, New DataColumn() {Me.tabletblProjects.lFormatIDColumn})
        Me.tabletblProjects.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AssetItemsToProjects", New DataColumn() {Me.tableAssetItems.AssetIDColumn}, New DataColumn() {Me.tabletblProjects.AssetIDColumn})
        Me.tabletblProjects.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ProjectsToProjectPlugins", New DataColumn() {Me.tabletblProjects.lProjectIDColumn}, New DataColumn() {Me.tabletblProjectPlugins.lProjectIDColumn})
        Me.tabletblProjectPlugins.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PluginsToProjectPlugins", New DataColumn() {Me.tabletblPlugins.lPluginIDColumn}, New DataColumn() {Me.tabletblProjectPlugins.lPluginIDColumn})
        Me.tabletblProjectPlugins.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PluginPackagesToPlugins", New DataColumn() {Me.tabletblPluginPackages.lPluginPackageIDColumn}, New DataColumn() {Me.tabletblPlugins.lPluginPackageIDColumn})
        Me.tabletblPlugins.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PluginTypesToPluginPackages", New DataColumn() {Me.tabletblPluginTypes.lPluginTypeIDColumn}, New DataColumn() {Me.tabletblPluginPackages.lPluginTypeIDColumn})
        Me.tabletblPluginPackages.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("PublishersToPublisherItemTypes", New DataColumn() {Me.tabletblPublishers.lPublisherIDColumn}, New DataColumn() {Me.tabletblPublisherItemTypes.lPublisherIDColumn})
        Me.tabletblPublisherItemTypes.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ItemTypesToPublisherItemTypes", New DataColumn() {Me.tabletblItemTypes.lItemTypeIDColumn}, New DataColumn() {Me.tabletblPublisherItemTypes.lItemTypeIDColumn})
        Me.tabletblPublisherItemTypes.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SiteToItemSites", New DataColumn() {Me.tabletblSite.lSiteIDColumn}, New DataColumn() {Me.tabletblItemSites.lSiteIDColumn})
        Me.tabletblItemSites.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ItemTypesToItemSites", New DataColumn() {Me.tabletblItemTypes.lItemTypeIDColumn}, New DataColumn() {Me.tabletblItemSites.lItemTypeIDColumn})
        Me.tabletblItemSites.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AssetItemsToItemSite", New DataColumn() {Me.tableAssetItems.lItemIDColumn, Me.tableAssetItems.lItemTypeIDColumn}, New DataColumn() {Me.tabletblItemSites.lItemIDColumn, Me.tabletblItemSites.lItemTypeIDColumn})
        Me.tabletblItemSites.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("CategoriesToCategoryItemTypes", New DataColumn() {Me.tabletblCategories.lCategoryIDColumn}, New DataColumn() {Me.tabletblCategoryItemTypes.lCategoryIDColumn})
        Me.tabletblCategoryItemTypes.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ItemTypesToCategoryItemTypes", New DataColumn() {Me.tabletblItemTypes.lItemTypeIDColumn}, New DataColumn() {Me.tabletblCategoryItemTypes.lItemTypeIDColumn})
        Me.tabletblCategoryItemTypes.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("SiteToContests", New DataColumn() {Me.tabletblSite.lSiteIDColumn}, New DataColumn() {Me.tabletblContests.lSiteIDColumn})
        Me.tabletblContests.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("UsersToContestVotes", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblContestVotes.lVoterIDColumn})
        Me.tabletblContestVotes.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AssetItemsToContestVotes", New DataColumn() {Me.tableAssetItems.lItemIDColumn, Me.tableAssetItems.lItemTypeIDColumn}, New DataColumn() {Me.tabletblContestVotes.lItemIDColumn, Me.tabletblContestVotes.lItemTypeIDColumn})
        Me.tabletblContestVotes.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ContestItemsToContestVotes", New DataColumn() {Me.tabletblContestItems.lContestIDColumn, Me.tabletblContestItems.lItemIDColumn, Me.tabletblContestItems.lItemTypeIDColumn}, New DataColumn() {Me.tabletblContestVotes.lContestIDColumn, Me.tabletblContestVotes.lItemIDColumn, Me.tabletblContestVotes.lItemTypeIDColumn})
        Me.tabletblContestVotes.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ContestsToContestItems", New DataColumn() {Me.tabletblContests.lContestIDColumn}, New DataColumn() {Me.tabletblContestItems.lContestIDColumn})
        Me.tabletblContestItems.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AssetItemsToContestItems", New DataColumn() {Me.tableAssetItems.lItemIDColumn, Me.tableAssetItems.lItemTypeIDColumn}, New DataColumn() {Me.tabletblContestItems.lItemIDColumn, Me.tabletblContestItems.lItemTypeIDColumn})
        Me.tabletblContestItems.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("CategoriesToItemCategories", New DataColumn() {Me.tabletblCategories.lCategoryIDColumn}, New DataColumn() {Me.tabletblItemCategories.lCategoryIDColumn})
        Me.tabletblItemCategories.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AssetItemsToItemCategories", New DataColumn() {Me.tableAssetItems.lItemIDColumn, Me.tableAssetItems.lItemTypeIDColumn}, New DataColumn() {Me.tabletblItemCategories.lItemIDColumn, Me.tabletblItemCategories.lItemTypeIDColumn})
        Me.tabletblItemCategories.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationUserTypesToUsers = New DataRelation("UserTypesToUsers", New DataColumn() {Me.tabletblUserTypes.lUserTypeIDColumn}, New DataColumn() {Me.tabletblUsers.lUserTypeIDColumn}, false)
        Me.Relations.Add(Me.relationUserTypesToUsers)
        Me.relationSoftwareToSoftwareVersions = New DataRelation("SoftwareToSoftwareVersions", New DataColumn() {Me.tabletblSoftware.lSoftwareIDColumn}, New DataColumn() {Me.tabletblSoftwareVersions.lSoftwareIDColumn}, false)
        Me.Relations.Add(Me.relationSoftwareToSoftwareVersions)
        Me.relationStatusCodesToUsers = New DataRelation("StatusCodesToUsers", New DataColumn() {Me.tabletblStatusCodes.lStatusIDColumn}, New DataColumn() {Me.tabletblUsers.lStatusIDColumn}, false)
        Me.Relations.Add(Me.relationStatusCodesToUsers)
        Me.relationSiteToUsers = New DataRelation("SiteToUsers", New DataColumn() {Me.tabletblSite.lSiteIDColumn}, New DataColumn() {Me.tabletblUsers.lSiteIDColumn}, false)
        Me.Relations.Add(Me.relationSiteToUsers)
        Me.relationStatusCodesToTutorials = New DataRelation("StatusCodesToTutorials", New DataColumn() {Me.tabletblStatusCodes.lStatusIDColumn}, New DataColumn() {Me.tabletblTutorials.lStatusIDColumn}, false)
        Me.Relations.Add(Me.relationStatusCodesToTutorials)
        Me.relationUsersToTutorialsAuthor = New DataRelation("UsersToTutorialsAuthor", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblTutorials.lAuthorIDColumn}, false)
        Me.Relations.Add(Me.relationUsersToTutorialsAuthor)
        Me.relationUsersToTutorialsSubmitter = New DataRelation("UsersToTutorialsSubmitter", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblTutorials.lSubmitterIDColumn}, false)
        Me.Relations.Add(Me.relationUsersToTutorialsSubmitter)
        Me.relationPublishersToSoftware = New DataRelation("PublishersToSoftware", New DataColumn() {Me.tabletblPublishers.lPublisherIDColumn}, New DataColumn() {Me.tabletblSoftware.lPublisherIDColumn}, false)
        Me.Relations.Add(Me.relationPublishersToSoftware)
        Me.relationUsersToReviewsAuthor = New DataRelation("UsersToReviewsAuthor", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblReviews.lAuthorIDColumn}, false)
        Me.Relations.Add(Me.relationUsersToReviewsAuthor)
        Me.relationStatusCodesToReviews = New DataRelation("StatusCodesToReviews", New DataColumn() {Me.tabletblStatusCodes.lStatusIDColumn}, New DataColumn() {Me.tabletblReviews.lStatusIDColumn}, false)
        Me.Relations.Add(Me.relationStatusCodesToReviews)
        Me.relationUsersToReviewsSubmitter = New DataRelation("UsersToReviewsSubmitter", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblReviews.lSubmitterIDColumn}, false)
        Me.Relations.Add(Me.relationUsersToReviewsSubmitter)
        Me.relationUsersToScripts = New DataRelation("UsersToScripts", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblScripts.lUserIDColumn}, false)
        Me.Relations.Add(Me.relationUsersToScripts)
        Me.relationStatusCodesToScripts = New DataRelation("StatusCodesToScripts", New DataColumn() {Me.tabletblStatusCodes.lStatusIDColumn}, New DataColumn() {Me.tabletblScripts.lStatusIDColumn}, false)
        Me.Relations.Add(Me.relationStatusCodesToScripts)
        Me.relationUsersToProjects = New DataRelation("UsersToProjects", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblProjects.lUserIDColumn}, false)
        Me.Relations.Add(Me.relationUsersToProjects)
        Me.relationStatusCodesToProjects = New DataRelation("StatusCodesToProjects", New DataColumn() {Me.tabletblStatusCodes.lStatusIDColumn}, New DataColumn() {Me.tabletblProjects.lStatusIDColumn}, false)
        Me.Relations.Add(Me.relationStatusCodesToProjects)
        Me.relationSoftwareVersionsToProjects = New DataRelation("SoftwareVersionsToProjects", New DataColumn() {Me.tabletblSoftwareVersions.lVersionIDColumn}, New DataColumn() {Me.tabletblProjects.lSoftwareVersionIDColumn}, false)
        Me.Relations.Add(Me.relationSoftwareVersionsToProjects)
        Me.relationFormatsToProjects = New DataRelation("FormatsToProjects", New DataColumn() {Me.tabletblFormats.lFormatIDColumn}, New DataColumn() {Me.tabletblProjects.lFormatIDColumn}, false)
        Me.Relations.Add(Me.relationFormatsToProjects)
        Me.relationFormatsToScripts = New DataRelation("FormatsToScripts", New DataColumn() {Me.tabletblFormats.lFormatIDColumn}, New DataColumn() {Me.tabletblScripts.lFormatIDColumn}, false)
        Me.Relations.Add(Me.relationFormatsToScripts)
        Me.relationProjectsToProjectPlugins = New DataRelation("ProjectsToProjectPlugins", New DataColumn() {Me.tabletblProjects.lProjectIDColumn}, New DataColumn() {Me.tabletblProjectPlugins.lProjectIDColumn}, false)
        Me.Relations.Add(Me.relationProjectsToProjectPlugins)
        Me.relationPluginsToProjectPlugins = New DataRelation("PluginsToProjectPlugins", New DataColumn() {Me.tabletblPlugins.lPluginIDColumn}, New DataColumn() {Me.tabletblProjectPlugins.lPluginIDColumn}, false)
        Me.Relations.Add(Me.relationPluginsToProjectPlugins)
        Me.relationPluginPackagesToPlugins = New DataRelation("PluginPackagesToPlugins", New DataColumn() {Me.tabletblPluginPackages.lPluginPackageIDColumn}, New DataColumn() {Me.tabletblPlugins.lPluginPackageIDColumn}, false)
        Me.Relations.Add(Me.relationPluginPackagesToPlugins)
        Me.relationPluginTypesToPluginPackages = New DataRelation("PluginTypesToPluginPackages", New DataColumn() {Me.tabletblPluginTypes.lPluginTypeIDColumn}, New DataColumn() {Me.tabletblPluginPackages.lPluginTypeIDColumn}, false)
        Me.Relations.Add(Me.relationPluginTypesToPluginPackages)
        Me.relationUsersToRankings = New DataRelation("UsersToRankings", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblRankings.lUserIDColumn}, false)
        Me.Relations.Add(Me.relationUsersToRankings)
        Me.relationItemTypesToRankings = New DataRelation("ItemTypesToRankings", New DataColumn() {Me.tabletblItemTypes.lItemTypeIDColumn}, New DataColumn() {Me.tabletblRankings.lItemTypeIDColumn}, false)
        Me.Relations.Add(Me.relationItemTypesToRankings)
        Me.relationCategoriesToCategoryItemTypes = New DataRelation("CategoriesToCategoryItemTypes", New DataColumn() {Me.tabletblCategories.lCategoryIDColumn}, New DataColumn() {Me.tabletblCategoryItemTypes.lCategoryIDColumn}, false)
        Me.Relations.Add(Me.relationCategoriesToCategoryItemTypes)
        Me.relationItemTypesToCategoryItemTypes = New DataRelation("ItemTypesToCategoryItemTypes", New DataColumn() {Me.tabletblItemTypes.lItemTypeIDColumn}, New DataColumn() {Me.tabletblCategoryItemTypes.lItemTypeIDColumn}, false)
        Me.Relations.Add(Me.relationItemTypesToCategoryItemTypes)
        Me.relationPublishersToPublisherItemTypes = New DataRelation("PublishersToPublisherItemTypes", New DataColumn() {Me.tabletblPublishers.lPublisherIDColumn}, New DataColumn() {Me.tabletblPublisherItemTypes.lPublisherIDColumn}, false)
        Me.Relations.Add(Me.relationPublishersToPublisherItemTypes)
        Me.relationItemTypesToPublisherItemTypes = New DataRelation("ItemTypesToPublisherItemTypes", New DataColumn() {Me.tabletblItemTypes.lItemTypeIDColumn}, New DataColumn() {Me.tabletblPublisherItemTypes.lItemTypeIDColumn}, false)
        Me.Relations.Add(Me.relationItemTypesToPublisherItemTypes)
        Me.relationSiteToItemSites = New DataRelation("SiteToItemSites", New DataColumn() {Me.tabletblSite.lSiteIDColumn}, New DataColumn() {Me.tabletblItemSites.lSiteIDColumn}, false)
        Me.Relations.Add(Me.relationSiteToItemSites)
        Me.relationItemTypesToItemSites = New DataRelation("ItemTypesToItemSites", New DataColumn() {Me.tabletblItemTypes.lItemTypeIDColumn}, New DataColumn() {Me.tabletblItemSites.lItemTypeIDColumn}, false)
        Me.Relations.Add(Me.relationItemTypesToItemSites)
        Me.relationUsersToContestVotes = New DataRelation("UsersToContestVotes", New DataColumn() {Me.tabletblUsers.lUserIDColumn}, New DataColumn() {Me.tabletblContestVotes.lVoterIDColumn}, false)
        Me.Relations.Add(Me.relationUsersToContestVotes)
        Me.relationSiteToContests = New DataRelation("SiteToContests", New DataColumn() {Me.tabletblSite.lSiteIDColumn}, New DataColumn() {Me.tabletblContests.lSiteIDColumn}, false)
        Me.Relations.Add(Me.relationSiteToContests)
        Me.relationContestsToContestItems = New DataRelation("ContestsToContestItems", New DataColumn() {Me.tabletblContests.lContestIDColumn}, New DataColumn() {Me.tabletblContestItems.lContestIDColumn}, false)
        Me.Relations.Add(Me.relationContestsToContestItems)
        Me.relationCategoriesToItemCategories = New DataRelation("CategoriesToItemCategories", New DataColumn() {Me.tabletblCategories.lCategoryIDColumn}, New DataColumn() {Me.tabletblItemCategories.lCategoryIDColumn}, false)
        Me.Relations.Add(Me.relationCategoriesToItemCategories)
        Me.relationAssetItemsToProjects = New DataRelation("AssetItemsToProjects", New DataColumn() {Me.tableAssetItems.AssetIDColumn}, New DataColumn() {Me.tabletblProjects.AssetIDColumn}, false)
        Me.Relations.Add(Me.relationAssetItemsToProjects)
        Me.relationAssetItemsToScripts = New DataRelation("AssetItemsToScripts", New DataColumn() {Me.tableAssetItems.AssetIDColumn}, New DataColumn() {Me.tabletblScripts.AssetIDColumn}, false)
        Me.Relations.Add(Me.relationAssetItemsToScripts)
        Me.relationAssetItemsToTutorials = New DataRelation("AssetItemsToTutorials", New DataColumn() {Me.tableAssetItems.AssetIDColumn}, New DataColumn() {Me.tabletblTutorials.AssetIDColumn}, false)
        Me.Relations.Add(Me.relationAssetItemsToTutorials)
        Me.relationAssetItemsToReviews = New DataRelation("AssetItemsToReviews", New DataColumn() {Me.tableAssetItems.AssetIDColumn}, New DataColumn() {Me.tabletblReviews.AssetIDColumn}, false)
        Me.Relations.Add(Me.relationAssetItemsToReviews)
        Me.relationSoftwareVersionsToScripts = New DataRelation("SoftwareVersionsToScripts", New DataColumn() {Me.tabletblSoftwareVersions.lVersionIDColumn}, New DataColumn() {Me.tabletblScripts.lSoftwareVersionIDColumn}, false)
        Me.Relations.Add(Me.relationSoftwareVersionsToScripts)
        Me.relationAssetItemsToRankings = New DataRelation("AssetItemsToRankings", New DataColumn() {Me.tableAssetItems.lItemIDColumn, Me.tableAssetItems.lItemTypeIDColumn}, New DataColumn() {Me.tabletblRankings.lItemIDColumn, Me.tabletblRankings.lItemTypeIDColumn}, false)
        Me.Relations.Add(Me.relationAssetItemsToRankings)
        Me.relationAssetItemsToContestItems = New DataRelation("AssetItemsToContestItems", New DataColumn() {Me.tableAssetItems.lItemIDColumn, Me.tableAssetItems.lItemTypeIDColumn}, New DataColumn() {Me.tabletblContestItems.lItemIDColumn, Me.tabletblContestItems.lItemTypeIDColumn}, false)
        Me.Relations.Add(Me.relationAssetItemsToContestItems)
        Me.relationAssetItemsToContestVotes = New DataRelation("AssetItemsToContestVotes", New DataColumn() {Me.tableAssetItems.lItemIDColumn, Me.tableAssetItems.lItemTypeIDColumn}, New DataColumn() {Me.tabletblContestVotes.lItemIDColumn, Me.tabletblContestVotes.lItemTypeIDColumn}, false)
        Me.Relations.Add(Me.relationAssetItemsToContestVotes)
        Me.relationAssetItemsToItemSite = New DataRelation("AssetItemsToItemSite", New DataColumn() {Me.tableAssetItems.lItemIDColumn, Me.tableAssetItems.lItemTypeIDColumn}, New DataColumn() {Me.tabletblItemSites.lItemIDColumn, Me.tabletblItemSites.lItemTypeIDColumn}, false)
        Me.Relations.Add(Me.relationAssetItemsToItemSite)
        Me.relationContestItemsToContestVotes = New DataRelation("ContestItemsToContestVotes", New DataColumn() {Me.tabletblContestItems.lContestIDColumn, Me.tabletblContestItems.lItemIDColumn, Me.tabletblContestItems.lItemTypeIDColumn}, New DataColumn() {Me.tabletblContestVotes.lContestIDColumn, Me.tabletblContestVotes.lItemIDColumn, Me.tabletblContestVotes.lItemTypeIDColumn}, false)
        Me.Relations.Add(Me.relationContestItemsToContestVotes)
        Me.relationAssetItemsToItemCategories = New DataRelation("AssetItemsToItemCategories", New DataColumn() {Me.tableAssetItems.lItemIDColumn, Me.tableAssetItems.lItemTypeIDColumn}, New DataColumn() {Me.tabletblItemCategories.lItemIDColumn, Me.tabletblItemCategories.lItemTypeIDColumn}, false)
        Me.Relations.Add(Me.relationAssetItemsToItemCategories)
    End Sub
    
    Private Function ShouldSerializetblUsers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblUserTypes() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblSoftware() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblSoftwareVersions() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblTutorials() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblSite() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblStatusCodes() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblPublishers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblRankings() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblReviews() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblScripts() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblProjects() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblFormats() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblItemTypes() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblProjectPlugins() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblPlugins() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblPluginPackages() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblPluginTypes() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblPublisherItemTypes() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblCategories() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblItemSites() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblCategoryItemTypes() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblContests() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblContestVotes() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblContestItems() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblItemCategories() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetblLog() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAssetItems() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub tblUsersRowChangeEventHandler(ByVal sender As Object, ByVal e As tblUsersRowChangeEvent)
    
    Public Delegate Sub tblUserTypesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblUserTypesRowChangeEvent)
    
    Public Delegate Sub tblSoftwareRowChangeEventHandler(ByVal sender As Object, ByVal e As tblSoftwareRowChangeEvent)
    
    Public Delegate Sub tblSoftwareVersionsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblSoftwareVersionsRowChangeEvent)
    
    Public Delegate Sub tblTutorialsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblTutorialsRowChangeEvent)
    
    Public Delegate Sub tblSiteRowChangeEventHandler(ByVal sender As Object, ByVal e As tblSiteRowChangeEvent)
    
    Public Delegate Sub tblStatusCodesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblStatusCodesRowChangeEvent)
    
    Public Delegate Sub tblPublishersRowChangeEventHandler(ByVal sender As Object, ByVal e As tblPublishersRowChangeEvent)
    
    Public Delegate Sub tblRankingsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblRankingsRowChangeEvent)
    
    Public Delegate Sub tblReviewsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblReviewsRowChangeEvent)
    
    Public Delegate Sub tblScriptsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblScriptsRowChangeEvent)
    
    Public Delegate Sub tblProjectsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblProjectsRowChangeEvent)
    
    Public Delegate Sub tblFormatsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblFormatsRowChangeEvent)
    
    Public Delegate Sub tblItemTypesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblItemTypesRowChangeEvent)
    
    Public Delegate Sub tblProjectPluginsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblProjectPluginsRowChangeEvent)
    
    Public Delegate Sub tblPluginsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblPluginsRowChangeEvent)
    
    Public Delegate Sub tblPluginPackagesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblPluginPackagesRowChangeEvent)
    
    Public Delegate Sub tblPluginTypesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblPluginTypesRowChangeEvent)
    
    Public Delegate Sub tblPublisherItemTypesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblPublisherItemTypesRowChangeEvent)
    
    Public Delegate Sub tblCategoriesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblCategoriesRowChangeEvent)
    
    Public Delegate Sub tblItemSitesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblItemSitesRowChangeEvent)
    
    Public Delegate Sub tblCategoryItemTypesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblCategoryItemTypesRowChangeEvent)
    
    Public Delegate Sub tblContestsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblContestsRowChangeEvent)
    
    Public Delegate Sub tblContestVotesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblContestVotesRowChangeEvent)
    
    Public Delegate Sub tblContestItemsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblContestItemsRowChangeEvent)
    
    Public Delegate Sub tblItemCategoriesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblItemCategoriesRowChangeEvent)
    
    Public Delegate Sub tblLogRowChangeEventHandler(ByVal sender As Object, ByVal e As tblLogRowChangeEvent)
    
    Public Delegate Sub AssetItemsRowChangeEventHandler(ByVal sender As Object, ByVal e As AssetItemsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblUsersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlUserID As DataColumn
        
        Private columnvsFirstName As DataColumn
        
        Private columnvsLastName As DataColumn
        
        Private columnvsEmail As DataColumn
        
        Private columnbPrivateEmail As DataColumn
        
        Private columnbEmailNews As DataColumn
        
        Private columnvspassword As DataColumn
        
        Private columnvsHomePageURL As DataColumn
        
        Private columnlUserTypeID As DataColumn
        
        Private columnlStatusID As DataColumn
        
        Private columnsValidationCode As DataColumn
        
        Private columnlDefaultFormatID As DataColumn
        
        Private columnlDefaultSortID As DataColumn
        
        Private columnlItemsPerPage As DataColumn
        
        Private columnvsUserImage As DataColumn
        
        Private columndtDateRegistered As DataColumn
        
        Private columnvsAboutMe As DataColumn
        
        Private columnvsScreenName As DataColumn
        
        Private columnlSiteID As DataColumn
        
        Private columndtLastLogin As DataColumn
        
        Friend Sub New()
            MyBase.New("tblUsers")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lUserIDColumn As DataColumn
            Get
                Return Me.columnlUserID
            End Get
        End Property
        
        Friend ReadOnly Property vsFirstNameColumn As DataColumn
            Get
                Return Me.columnvsFirstName
            End Get
        End Property
        
        Friend ReadOnly Property vsLastNameColumn As DataColumn
            Get
                Return Me.columnvsLastName
            End Get
        End Property
        
        Friend ReadOnly Property vsEmailColumn As DataColumn
            Get
                Return Me.columnvsEmail
            End Get
        End Property
        
        Friend ReadOnly Property bPrivateEmailColumn As DataColumn
            Get
                Return Me.columnbPrivateEmail
            End Get
        End Property
        
        Friend ReadOnly Property bEmailNewsColumn As DataColumn
            Get
                Return Me.columnbEmailNews
            End Get
        End Property
        
        Friend ReadOnly Property vspasswordColumn As DataColumn
            Get
                Return Me.columnvspassword
            End Get
        End Property
        
        Friend ReadOnly Property vsHomePageURLColumn As DataColumn
            Get
                Return Me.columnvsHomePageURL
            End Get
        End Property
        
        Friend ReadOnly Property lUserTypeIDColumn As DataColumn
            Get
                Return Me.columnlUserTypeID
            End Get
        End Property
        
        Friend ReadOnly Property lStatusIDColumn As DataColumn
            Get
                Return Me.columnlStatusID
            End Get
        End Property
        
        Friend ReadOnly Property sValidationCodeColumn As DataColumn
            Get
                Return Me.columnsValidationCode
            End Get
        End Property
        
        Friend ReadOnly Property lDefaultFormatIDColumn As DataColumn
            Get
                Return Me.columnlDefaultFormatID
            End Get
        End Property
        
        Friend ReadOnly Property lDefaultSortIDColumn As DataColumn
            Get
                Return Me.columnlDefaultSortID
            End Get
        End Property
        
        Friend ReadOnly Property lItemsPerPageColumn As DataColumn
            Get
                Return Me.columnlItemsPerPage
            End Get
        End Property
        
        Friend ReadOnly Property vsUserImageColumn As DataColumn
            Get
                Return Me.columnvsUserImage
            End Get
        End Property
        
        Friend ReadOnly Property dtDateRegisteredColumn As DataColumn
            Get
                Return Me.columndtDateRegistered
            End Get
        End Property
        
        Friend ReadOnly Property vsAboutMeColumn As DataColumn
            Get
                Return Me.columnvsAboutMe
            End Get
        End Property
        
        Friend ReadOnly Property vsScreenNameColumn As DataColumn
            Get
                Return Me.columnvsScreenName
            End Get
        End Property
        
        Friend ReadOnly Property lSiteIDColumn As DataColumn
            Get
                Return Me.columnlSiteID
            End Get
        End Property
        
        Friend ReadOnly Property dtLastLoginColumn As DataColumn
            Get
                Return Me.columndtLastLogin
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblUsersRow
            Get
                Return CType(Me.Rows(index),tblUsersRow)
            End Get
        End Property
        
        Public Event tblUsersRowChanged As tblUsersRowChangeEventHandler
        
        Public Event tblUsersRowChanging As tblUsersRowChangeEventHandler
        
        Public Event tblUsersRowDeleted As tblUsersRowChangeEventHandler
        
        Public Event tblUsersRowDeleting As tblUsersRowChangeEventHandler
        
        Public Overloads Sub AddtblUsersRow(ByVal row As tblUsersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblUsersRow( _
                    ByVal vsFirstName As String,  _
                    ByVal vsLastName As String,  _
                    ByVal vsEmail As String,  _
                    ByVal bPrivateEmail As Boolean,  _
                    ByVal bEmailNews As Boolean,  _
                    ByVal vspassword As String,  _
                    ByVal vsHomePageURL As String,  _
                    ByVal parenttblUserTypesRowByUserTypesToUsers As tblUserTypesRow,  _
                    ByVal parenttblStatusCodesRowByStatusCodesToUsers As tblStatusCodesRow,  _
                    ByVal sValidationCode As String,  _
                    ByVal lDefaultFormatID As Short,  _
                    ByVal lDefaultSortID As Short,  _
                    ByVal lItemsPerPage As Short,  _
                    ByVal vsUserImage As String,  _
                    ByVal dtDateRegistered As Date,  _
                    ByVal vsAboutMe As String,  _
                    ByVal vsScreenName As String,  _
                    ByVal parenttblSiteRowBySiteToUsers As tblSiteRow,  _
                    ByVal dtLastLogin As Date) As tblUsersRow
            Dim rowtblUsersRow As tblUsersRow = CType(Me.NewRow,tblUsersRow)
            rowtblUsersRow.ItemArray = New Object() {Nothing, vsFirstName, vsLastName, vsEmail, bPrivateEmail, bEmailNews, vspassword, vsHomePageURL, parenttblUserTypesRowByUserTypesToUsers(0), parenttblStatusCodesRowByStatusCodesToUsers(0), sValidationCode, lDefaultFormatID, lDefaultSortID, lItemsPerPage, vsUserImage, dtDateRegistered, vsAboutMe, vsScreenName, parenttblSiteRowBySiteToUsers(0), dtLastLogin}
            Me.Rows.Add(rowtblUsersRow)
            Return rowtblUsersRow
        End Function
        
        Public Function FindBylUserID(ByVal lUserID As Integer) As tblUsersRow
            Return CType(Me.Rows.Find(New Object() {lUserID}),tblUsersRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblUsersDataTable = CType(MyBase.Clone,tblUsersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblUsersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlUserID = Me.Columns("lUserID")
            Me.columnvsFirstName = Me.Columns("vsFirstName")
            Me.columnvsLastName = Me.Columns("vsLastName")
            Me.columnvsEmail = Me.Columns("vsEmail")
            Me.columnbPrivateEmail = Me.Columns("bPrivateEmail")
            Me.columnbEmailNews = Me.Columns("bEmailNews")
            Me.columnvspassword = Me.Columns("vspassword")
            Me.columnvsHomePageURL = Me.Columns("vsHomePageURL")
            Me.columnlUserTypeID = Me.Columns("lUserTypeID")
            Me.columnlStatusID = Me.Columns("lStatusID")
            Me.columnsValidationCode = Me.Columns("sValidationCode")
            Me.columnlDefaultFormatID = Me.Columns("lDefaultFormatID")
            Me.columnlDefaultSortID = Me.Columns("lDefaultSortID")
            Me.columnlItemsPerPage = Me.Columns("lItemsPerPage")
            Me.columnvsUserImage = Me.Columns("vsUserImage")
            Me.columndtDateRegistered = Me.Columns("dtDateRegistered")
            Me.columnvsAboutMe = Me.Columns("vsAboutMe")
            Me.columnvsScreenName = Me.Columns("vsScreenName")
            Me.columnlSiteID = Me.Columns("lSiteID")
            Me.columndtLastLogin = Me.Columns("dtLastLogin")
        End Sub
        
        Private Sub InitClass()
            Me.columnlUserID = New DataColumn("lUserID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlUserID)
            Me.columnvsFirstName = New DataColumn("vsFirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsFirstName)
            Me.columnvsLastName = New DataColumn("vsLastName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsLastName)
            Me.columnvsEmail = New DataColumn("vsEmail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsEmail)
            Me.columnbPrivateEmail = New DataColumn("bPrivateEmail", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbPrivateEmail)
            Me.columnbEmailNews = New DataColumn("bEmailNews", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbEmailNews)
            Me.columnvspassword = New DataColumn("vspassword", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvspassword)
            Me.columnvsHomePageURL = New DataColumn("vsHomePageURL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsHomePageURL)
            Me.columnlUserTypeID = New DataColumn("lUserTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlUserTypeID)
            Me.columnlStatusID = New DataColumn("lStatusID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlStatusID)
            Me.columnsValidationCode = New DataColumn("sValidationCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsValidationCode)
            Me.columnlDefaultFormatID = New DataColumn("lDefaultFormatID", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlDefaultFormatID)
            Me.columnlDefaultSortID = New DataColumn("lDefaultSortID", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlDefaultSortID)
            Me.columnlItemsPerPage = New DataColumn("lItemsPerPage", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemsPerPage)
            Me.columnvsUserImage = New DataColumn("vsUserImage", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsUserImage)
            Me.columndtDateRegistered = New DataColumn("dtDateRegistered", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtDateRegistered)
            Me.columnvsAboutMe = New DataColumn("vsAboutMe", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsAboutMe)
            Me.columnvsScreenName = New DataColumn("vsScreenName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsScreenName)
            Me.columnlSiteID = New DataColumn("lSiteID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlSiteID)
            Me.columndtLastLogin = New DataColumn("dtLastLogin", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtLastLogin)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey1", New DataColumn() {Me.columnlUserID}, true))
            Me.columnlUserID.AutoIncrement = true
            Me.columnlUserID.AllowDBNull = false
            Me.columnlUserID.Unique = true
        End Sub
        
        Public Function NewtblUsersRow() As tblUsersRow
            Return CType(Me.NewRow,tblUsersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblUsersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblUsersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblUsersRowChangedEvent) Is Nothing) Then
                RaiseEvent tblUsersRowChanged(Me, New tblUsersRowChangeEvent(CType(e.Row,tblUsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblUsersRowChangingEvent) Is Nothing) Then
                RaiseEvent tblUsersRowChanging(Me, New tblUsersRowChangeEvent(CType(e.Row,tblUsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblUsersRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblUsersRowDeleted(Me, New tblUsersRowChangeEvent(CType(e.Row,tblUsersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblUsersRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblUsersRowDeleting(Me, New tblUsersRowChangeEvent(CType(e.Row,tblUsersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblUsersRow(ByVal row As tblUsersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblUsersRow
        Inherits DataRow
        
        Private tabletblUsers As tblUsersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblUsers = CType(Me.Table,tblUsersDataTable)
        End Sub
        
        Public Property lUserID As Integer
            Get
                Return CType(Me(Me.tabletblUsers.lUserIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblUsers.lUserIDColumn) = value
            End Set
        End Property
        
        Public Property vsFirstName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.vsFirstNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.vsFirstNameColumn) = value
            End Set
        End Property
        
        Public Property vsLastName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.vsLastNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.vsLastNameColumn) = value
            End Set
        End Property
        
        Public Property vsEmail As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.vsEmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.vsEmailColumn) = value
            End Set
        End Property
        
        Public Property bPrivateEmail As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.bPrivateEmailColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.bPrivateEmailColumn) = value
            End Set
        End Property
        
        Public Property bEmailNews As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.bEmailNewsColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.bEmailNewsColumn) = value
            End Set
        End Property
        
        Public Property vspassword As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.vspasswordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.vspasswordColumn) = value
            End Set
        End Property
        
        Public Property vsHomePageURL As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.vsHomePageURLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.vsHomePageURLColumn) = value
            End Set
        End Property
        
        Public Property lUserTypeID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.lUserTypeIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.lUserTypeIDColumn) = value
            End Set
        End Property
        
        Public Property lStatusID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.lStatusIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.lStatusIDColumn) = value
            End Set
        End Property
        
        Public Property sValidationCode As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.sValidationCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.sValidationCodeColumn) = value
            End Set
        End Property
        
        Public Property lDefaultFormatID As Short
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.lDefaultFormatIDColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.lDefaultFormatIDColumn) = value
            End Set
        End Property
        
        Public Property lDefaultSortID As Short
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.lDefaultSortIDColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.lDefaultSortIDColumn) = value
            End Set
        End Property
        
        Public Property lItemsPerPage As Short
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.lItemsPerPageColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.lItemsPerPageColumn) = value
            End Set
        End Property
        
        Public Property vsUserImage As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.vsUserImageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.vsUserImageColumn) = value
            End Set
        End Property
        
        Public Property dtDateRegistered As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.dtDateRegisteredColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.dtDateRegisteredColumn) = value
            End Set
        End Property
        
        Public Property vsAboutMe As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.vsAboutMeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.vsAboutMeColumn) = value
            End Set
        End Property
        
        Public Property vsScreenName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.vsScreenNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.vsScreenNameColumn) = value
            End Set
        End Property
        
        Public Property lSiteID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.lSiteIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.lSiteIDColumn) = value
            End Set
        End Property
        
        Public Property dtLastLogin As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblUsers.dtLastLoginColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUsers.dtLastLoginColumn) = value
            End Set
        End Property
        
        Public Property tblUserTypesRow As tblUserTypesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("UserTypesToUsers")),tblUserTypesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("UserTypesToUsers"))
            End Set
        End Property
        
        Public Property tblStatusCodesRow As tblStatusCodesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("StatusCodesToUsers")),tblStatusCodesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("StatusCodesToUsers"))
            End Set
        End Property
        
        Public Property tblSiteRow As tblSiteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SiteToUsers")),tblSiteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SiteToUsers"))
            End Set
        End Property
        
        Public Function IsvsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.vsFirstNameColumn)
        End Function
        
        Public Sub SetvsFirstNameNull()
            Me(Me.tabletblUsers.vsFirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsLastNameNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.vsLastNameColumn)
        End Function
        
        Public Sub SetvsLastNameNull()
            Me(Me.tabletblUsers.vsLastNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsEmailNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.vsEmailColumn)
        End Function
        
        Public Sub SetvsEmailNull()
            Me(Me.tabletblUsers.vsEmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbPrivateEmailNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.bPrivateEmailColumn)
        End Function
        
        Public Sub SetbPrivateEmailNull()
            Me(Me.tabletblUsers.bPrivateEmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbEmailNewsNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.bEmailNewsColumn)
        End Function
        
        Public Sub SetbEmailNewsNull()
            Me(Me.tabletblUsers.bEmailNewsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvspasswordNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.vspasswordColumn)
        End Function
        
        Public Sub SetvspasswordNull()
            Me(Me.tabletblUsers.vspasswordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsHomePageURLNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.vsHomePageURLColumn)
        End Function
        
        Public Sub SetvsHomePageURLNull()
            Me(Me.tabletblUsers.vsHomePageURLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslUserTypeIDNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.lUserTypeIDColumn)
        End Function
        
        Public Sub SetlUserTypeIDNull()
            Me(Me.tabletblUsers.lUserTypeIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslStatusIDNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.lStatusIDColumn)
        End Function
        
        Public Sub SetlStatusIDNull()
            Me(Me.tabletblUsers.lStatusIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssValidationCodeNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.sValidationCodeColumn)
        End Function
        
        Public Sub SetsValidationCodeNull()
            Me(Me.tabletblUsers.sValidationCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslDefaultFormatIDNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.lDefaultFormatIDColumn)
        End Function
        
        Public Sub SetlDefaultFormatIDNull()
            Me(Me.tabletblUsers.lDefaultFormatIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslDefaultSortIDNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.lDefaultSortIDColumn)
        End Function
        
        Public Sub SetlDefaultSortIDNull()
            Me(Me.tabletblUsers.lDefaultSortIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslItemsPerPageNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.lItemsPerPageColumn)
        End Function
        
        Public Sub SetlItemsPerPageNull()
            Me(Me.tabletblUsers.lItemsPerPageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsUserImageNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.vsUserImageColumn)
        End Function
        
        Public Sub SetvsUserImageNull()
            Me(Me.tabletblUsers.vsUserImageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtDateRegisteredNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.dtDateRegisteredColumn)
        End Function
        
        Public Sub SetdtDateRegisteredNull()
            Me(Me.tabletblUsers.dtDateRegisteredColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsAboutMeNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.vsAboutMeColumn)
        End Function
        
        Public Sub SetvsAboutMeNull()
            Me(Me.tabletblUsers.vsAboutMeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsScreenNameNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.vsScreenNameColumn)
        End Function
        
        Public Sub SetvsScreenNameNull()
            Me(Me.tabletblUsers.vsScreenNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslSiteIDNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.lSiteIDColumn)
        End Function
        
        Public Sub SetlSiteIDNull()
            Me(Me.tabletblUsers.lSiteIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtLastLoginNull() As Boolean
            Return Me.IsNull(Me.tabletblUsers.dtLastLoginColumn)
        End Function
        
        Public Sub SetdtLastLoginNull()
            Me(Me.tabletblUsers.dtLastLoginColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblTutorialsRowsByUsersToTutorialsAuthor() As tblTutorialsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("UsersToTutorialsAuthor")),tblTutorialsRow())
        End Function
        
        Public Function GettblTutorialsRowsByUsersToTutorialsSubmitter() As tblTutorialsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("UsersToTutorialsSubmitter")),tblTutorialsRow())
        End Function
        
        Public Function GettblReviewsRowsByUsersToReviewsAuthor() As tblReviewsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("UsersToReviewsAuthor")),tblReviewsRow())
        End Function
        
        Public Function GettblReviewsRowsByUsersToReviewsSubmitter() As tblReviewsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("UsersToReviewsSubmitter")),tblReviewsRow())
        End Function
        
        Public Function GettblScriptsRows() As tblScriptsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("UsersToScripts")),tblScriptsRow())
        End Function
        
        Public Function GettblProjectsRows() As tblProjectsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("UsersToProjects")),tblProjectsRow())
        End Function
        
        Public Function GettblRankingsRows() As tblRankingsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("UsersToRankings")),tblRankingsRow())
        End Function
        
        Public Function GettblContestVotesRows() As tblContestVotesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("UsersToContestVotes")),tblContestVotesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblUsersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblUsersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblUsersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblUsersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblUserTypesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlUserTypeID As DataColumn
        
        Private columnvsUserTypeName As DataColumn
        
        Friend Sub New()
            MyBase.New("tblUserTypes")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lUserTypeIDColumn As DataColumn
            Get
                Return Me.columnlUserTypeID
            End Get
        End Property
        
        Friend ReadOnly Property vsUserTypeNameColumn As DataColumn
            Get
                Return Me.columnvsUserTypeName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblUserTypesRow
            Get
                Return CType(Me.Rows(index),tblUserTypesRow)
            End Get
        End Property
        
        Public Event tblUserTypesRowChanged As tblUserTypesRowChangeEventHandler
        
        Public Event tblUserTypesRowChanging As tblUserTypesRowChangeEventHandler
        
        Public Event tblUserTypesRowDeleted As tblUserTypesRowChangeEventHandler
        
        Public Event tblUserTypesRowDeleting As tblUserTypesRowChangeEventHandler
        
        Public Overloads Sub AddtblUserTypesRow(ByVal row As tblUserTypesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblUserTypesRow(ByVal vsUserTypeName As String) As tblUserTypesRow
            Dim rowtblUserTypesRow As tblUserTypesRow = CType(Me.NewRow,tblUserTypesRow)
            rowtblUserTypesRow.ItemArray = New Object() {Nothing, vsUserTypeName}
            Me.Rows.Add(rowtblUserTypesRow)
            Return rowtblUserTypesRow
        End Function
        
        Public Function FindBylUserTypeID(ByVal lUserTypeID As Integer) As tblUserTypesRow
            Return CType(Me.Rows.Find(New Object() {lUserTypeID}),tblUserTypesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblUserTypesDataTable = CType(MyBase.Clone,tblUserTypesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblUserTypesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlUserTypeID = Me.Columns("lUserTypeID")
            Me.columnvsUserTypeName = Me.Columns("vsUserTypeName")
        End Sub
        
        Private Sub InitClass()
            Me.columnlUserTypeID = New DataColumn("lUserTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlUserTypeID)
            Me.columnvsUserTypeName = New DataColumn("vsUserTypeName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsUserTypeName)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey2", New DataColumn() {Me.columnlUserTypeID}, true))
            Me.columnlUserTypeID.AutoIncrement = true
            Me.columnlUserTypeID.AllowDBNull = false
            Me.columnlUserTypeID.Unique = true
        End Sub
        
        Public Function NewtblUserTypesRow() As tblUserTypesRow
            Return CType(Me.NewRow,tblUserTypesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblUserTypesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblUserTypesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblUserTypesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblUserTypesRowChanged(Me, New tblUserTypesRowChangeEvent(CType(e.Row,tblUserTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblUserTypesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblUserTypesRowChanging(Me, New tblUserTypesRowChangeEvent(CType(e.Row,tblUserTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblUserTypesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblUserTypesRowDeleted(Me, New tblUserTypesRowChangeEvent(CType(e.Row,tblUserTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblUserTypesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblUserTypesRowDeleting(Me, New tblUserTypesRowChangeEvent(CType(e.Row,tblUserTypesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblUserTypesRow(ByVal row As tblUserTypesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblUserTypesRow
        Inherits DataRow
        
        Private tabletblUserTypes As tblUserTypesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblUserTypes = CType(Me.Table,tblUserTypesDataTable)
        End Sub
        
        Public Property lUserTypeID As Integer
            Get
                Return CType(Me(Me.tabletblUserTypes.lUserTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblUserTypes.lUserTypeIDColumn) = value
            End Set
        End Property
        
        Public Property vsUserTypeName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblUserTypes.vsUserTypeNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblUserTypes.vsUserTypeNameColumn) = value
            End Set
        End Property
        
        Public Function IsvsUserTypeNameNull() As Boolean
            Return Me.IsNull(Me.tabletblUserTypes.vsUserTypeNameColumn)
        End Function
        
        Public Sub SetvsUserTypeNameNull()
            Me(Me.tabletblUserTypes.vsUserTypeNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblUsersRows() As tblUsersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("UserTypesToUsers")),tblUsersRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblUserTypesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblUserTypesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblUserTypesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblUserTypesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblSoftwareDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlSoftwareID As DataColumn
        
        Private columnlPublisherID As DataColumn
        
        Private columnvsSoftwareName As DataColumn
        
        Friend Sub New()
            MyBase.New("tblSoftware")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lSoftwareIDColumn As DataColumn
            Get
                Return Me.columnlSoftwareID
            End Get
        End Property
        
        Friend ReadOnly Property lPublisherIDColumn As DataColumn
            Get
                Return Me.columnlPublisherID
            End Get
        End Property
        
        Friend ReadOnly Property vsSoftwareNameColumn As DataColumn
            Get
                Return Me.columnvsSoftwareName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblSoftwareRow
            Get
                Return CType(Me.Rows(index),tblSoftwareRow)
            End Get
        End Property
        
        Public Event tblSoftwareRowChanged As tblSoftwareRowChangeEventHandler
        
        Public Event tblSoftwareRowChanging As tblSoftwareRowChangeEventHandler
        
        Public Event tblSoftwareRowDeleted As tblSoftwareRowChangeEventHandler
        
        Public Event tblSoftwareRowDeleting As tblSoftwareRowChangeEventHandler
        
        Public Overloads Sub AddtblSoftwareRow(ByVal row As tblSoftwareRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblSoftwareRow(ByVal parenttblPublishersRowByPublishersToSoftware As tblPublishersRow, ByVal vsSoftwareName As String) As tblSoftwareRow
            Dim rowtblSoftwareRow As tblSoftwareRow = CType(Me.NewRow,tblSoftwareRow)
            rowtblSoftwareRow.ItemArray = New Object() {Nothing, parenttblPublishersRowByPublishersToSoftware(0), vsSoftwareName}
            Me.Rows.Add(rowtblSoftwareRow)
            Return rowtblSoftwareRow
        End Function
        
        Public Function FindBylSoftwareID(ByVal lSoftwareID As Integer) As tblSoftwareRow
            Return CType(Me.Rows.Find(New Object() {lSoftwareID}),tblSoftwareRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblSoftwareDataTable = CType(MyBase.Clone,tblSoftwareDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblSoftwareDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlSoftwareID = Me.Columns("lSoftwareID")
            Me.columnlPublisherID = Me.Columns("lPublisherID")
            Me.columnvsSoftwareName = Me.Columns("vsSoftwareName")
        End Sub
        
        Private Sub InitClass()
            Me.columnlSoftwareID = New DataColumn("lSoftwareID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlSoftwareID)
            Me.columnlPublisherID = New DataColumn("lPublisherID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlPublisherID)
            Me.columnvsSoftwareName = New DataColumn("vsSoftwareName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsSoftwareName)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey3", New DataColumn() {Me.columnlSoftwareID}, true))
            Me.columnlSoftwareID.AutoIncrement = true
            Me.columnlSoftwareID.AllowDBNull = false
            Me.columnlSoftwareID.Unique = true
        End Sub
        
        Public Function NewtblSoftwareRow() As tblSoftwareRow
            Return CType(Me.NewRow,tblSoftwareRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblSoftwareRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblSoftwareRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblSoftwareRowChangedEvent) Is Nothing) Then
                RaiseEvent tblSoftwareRowChanged(Me, New tblSoftwareRowChangeEvent(CType(e.Row,tblSoftwareRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblSoftwareRowChangingEvent) Is Nothing) Then
                RaiseEvent tblSoftwareRowChanging(Me, New tblSoftwareRowChangeEvent(CType(e.Row,tblSoftwareRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblSoftwareRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblSoftwareRowDeleted(Me, New tblSoftwareRowChangeEvent(CType(e.Row,tblSoftwareRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblSoftwareRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblSoftwareRowDeleting(Me, New tblSoftwareRowChangeEvent(CType(e.Row,tblSoftwareRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblSoftwareRow(ByVal row As tblSoftwareRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblSoftwareRow
        Inherits DataRow
        
        Private tabletblSoftware As tblSoftwareDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblSoftware = CType(Me.Table,tblSoftwareDataTable)
        End Sub
        
        Public Property lSoftwareID As Integer
            Get
                Return CType(Me(Me.tabletblSoftware.lSoftwareIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblSoftware.lSoftwareIDColumn) = value
            End Set
        End Property
        
        Public Property lPublisherID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblSoftware.lPublisherIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSoftware.lPublisherIDColumn) = value
            End Set
        End Property
        
        Public Property vsSoftwareName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSoftware.vsSoftwareNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSoftware.vsSoftwareNameColumn) = value
            End Set
        End Property
        
        Public Property tblPublishersRow As tblPublishersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PublishersToSoftware")),tblPublishersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PublishersToSoftware"))
            End Set
        End Property
        
        Public Function IslPublisherIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSoftware.lPublisherIDColumn)
        End Function
        
        Public Sub SetlPublisherIDNull()
            Me(Me.tabletblSoftware.lPublisherIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsSoftwareNameNull() As Boolean
            Return Me.IsNull(Me.tabletblSoftware.vsSoftwareNameColumn)
        End Function
        
        Public Sub SetvsSoftwareNameNull()
            Me(Me.tabletblSoftware.vsSoftwareNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblSoftwareVersionsRows() As tblSoftwareVersionsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SoftwareToSoftwareVersions")),tblSoftwareVersionsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblSoftwareRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblSoftwareRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblSoftwareRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblSoftwareRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblSoftwareVersionsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlVersionID As DataColumn
        
        Private columnlSoftwareID As DataColumn
        
        Private columnvsVersionText As DataColumn
        
        Private columnvsIcon As DataColumn
        
        Friend Sub New()
            MyBase.New("tblSoftwareVersions")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lVersionIDColumn As DataColumn
            Get
                Return Me.columnlVersionID
            End Get
        End Property
        
        Friend ReadOnly Property lSoftwareIDColumn As DataColumn
            Get
                Return Me.columnlSoftwareID
            End Get
        End Property
        
        Friend ReadOnly Property vsVersionTextColumn As DataColumn
            Get
                Return Me.columnvsVersionText
            End Get
        End Property
        
        Friend ReadOnly Property vsIconColumn As DataColumn
            Get
                Return Me.columnvsIcon
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblSoftwareVersionsRow
            Get
                Return CType(Me.Rows(index),tblSoftwareVersionsRow)
            End Get
        End Property
        
        Public Event tblSoftwareVersionsRowChanged As tblSoftwareVersionsRowChangeEventHandler
        
        Public Event tblSoftwareVersionsRowChanging As tblSoftwareVersionsRowChangeEventHandler
        
        Public Event tblSoftwareVersionsRowDeleted As tblSoftwareVersionsRowChangeEventHandler
        
        Public Event tblSoftwareVersionsRowDeleting As tblSoftwareVersionsRowChangeEventHandler
        
        Public Overloads Sub AddtblSoftwareVersionsRow(ByVal row As tblSoftwareVersionsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblSoftwareVersionsRow(ByVal parenttblSoftwareRowBySoftwareToSoftwareVersions As tblSoftwareRow, ByVal vsVersionText As String, ByVal vsIcon As String) As tblSoftwareVersionsRow
            Dim rowtblSoftwareVersionsRow As tblSoftwareVersionsRow = CType(Me.NewRow,tblSoftwareVersionsRow)
            rowtblSoftwareVersionsRow.ItemArray = New Object() {Nothing, parenttblSoftwareRowBySoftwareToSoftwareVersions(0), vsVersionText, vsIcon}
            Me.Rows.Add(rowtblSoftwareVersionsRow)
            Return rowtblSoftwareVersionsRow
        End Function
        
        Public Function FindBylVersionID(ByVal lVersionID As Integer) As tblSoftwareVersionsRow
            Return CType(Me.Rows.Find(New Object() {lVersionID}),tblSoftwareVersionsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblSoftwareVersionsDataTable = CType(MyBase.Clone,tblSoftwareVersionsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblSoftwareVersionsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlVersionID = Me.Columns("lVersionID")
            Me.columnlSoftwareID = Me.Columns("lSoftwareID")
            Me.columnvsVersionText = Me.Columns("vsVersionText")
            Me.columnvsIcon = Me.Columns("vsIcon")
        End Sub
        
        Private Sub InitClass()
            Me.columnlVersionID = New DataColumn("lVersionID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlVersionID)
            Me.columnlSoftwareID = New DataColumn("lSoftwareID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlSoftwareID)
            Me.columnvsVersionText = New DataColumn("vsVersionText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsVersionText)
            Me.columnvsIcon = New DataColumn("vsIcon", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsIcon)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey4", New DataColumn() {Me.columnlVersionID}, true))
            Me.columnlVersionID.AutoIncrement = true
            Me.columnlVersionID.AllowDBNull = false
            Me.columnlVersionID.Unique = true
        End Sub
        
        Public Function NewtblSoftwareVersionsRow() As tblSoftwareVersionsRow
            Return CType(Me.NewRow,tblSoftwareVersionsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblSoftwareVersionsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblSoftwareVersionsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblSoftwareVersionsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblSoftwareVersionsRowChanged(Me, New tblSoftwareVersionsRowChangeEvent(CType(e.Row,tblSoftwareVersionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblSoftwareVersionsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblSoftwareVersionsRowChanging(Me, New tblSoftwareVersionsRowChangeEvent(CType(e.Row,tblSoftwareVersionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblSoftwareVersionsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblSoftwareVersionsRowDeleted(Me, New tblSoftwareVersionsRowChangeEvent(CType(e.Row,tblSoftwareVersionsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblSoftwareVersionsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblSoftwareVersionsRowDeleting(Me, New tblSoftwareVersionsRowChangeEvent(CType(e.Row,tblSoftwareVersionsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblSoftwareVersionsRow(ByVal row As tblSoftwareVersionsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblSoftwareVersionsRow
        Inherits DataRow
        
        Private tabletblSoftwareVersions As tblSoftwareVersionsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblSoftwareVersions = CType(Me.Table,tblSoftwareVersionsDataTable)
        End Sub
        
        Public Property lVersionID As Integer
            Get
                Return CType(Me(Me.tabletblSoftwareVersions.lVersionIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblSoftwareVersions.lVersionIDColumn) = value
            End Set
        End Property
        
        Public Property lSoftwareID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblSoftwareVersions.lSoftwareIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSoftwareVersions.lSoftwareIDColumn) = value
            End Set
        End Property
        
        Public Property vsVersionText As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSoftwareVersions.vsVersionTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSoftwareVersions.vsVersionTextColumn) = value
            End Set
        End Property
        
        Public Property vsIcon As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSoftwareVersions.vsIconColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSoftwareVersions.vsIconColumn) = value
            End Set
        End Property
        
        Public Property tblSoftwareRow As tblSoftwareRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SoftwareToSoftwareVersions")),tblSoftwareRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SoftwareToSoftwareVersions"))
            End Set
        End Property
        
        Public Function IslSoftwareIDNull() As Boolean
            Return Me.IsNull(Me.tabletblSoftwareVersions.lSoftwareIDColumn)
        End Function
        
        Public Sub SetlSoftwareIDNull()
            Me(Me.tabletblSoftwareVersions.lSoftwareIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsVersionTextNull() As Boolean
            Return Me.IsNull(Me.tabletblSoftwareVersions.vsVersionTextColumn)
        End Function
        
        Public Sub SetvsVersionTextNull()
            Me(Me.tabletblSoftwareVersions.vsVersionTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsIconNull() As Boolean
            Return Me.IsNull(Me.tabletblSoftwareVersions.vsIconColumn)
        End Function
        
        Public Sub SetvsIconNull()
            Me(Me.tabletblSoftwareVersions.vsIconColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblProjectsRows() As tblProjectsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SoftwareVersionsToProjects")),tblProjectsRow())
        End Function
        
        Public Function GettblScriptsRows() As tblScriptsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SoftwareVersionsToScripts")),tblScriptsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblSoftwareVersionsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblSoftwareVersionsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblSoftwareVersionsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblSoftwareVersionsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblTutorialsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlTutorialID As DataColumn
        
        Private columnvsTutorialURL As DataColumn
        
        Private columnlAuthorID As DataColumn
        
        Private columnlSubmitterID As DataColumn
        
        Private columnvsTutorialName As DataColumn
        
        Private columnvsDescription As DataColumn
        
        Private columndtSubmitDate As DataColumn
        
        Private columndtApproveDate As DataColumn
        
        Private columnlStatusID As DataColumn
        
        Private columnbLocalFile As DataColumn
        
        Private columnAssetID As DataColumn
        
        Friend Sub New()
            MyBase.New("tblTutorials")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lTutorialIDColumn As DataColumn
            Get
                Return Me.columnlTutorialID
            End Get
        End Property
        
        Friend ReadOnly Property vsTutorialURLColumn As DataColumn
            Get
                Return Me.columnvsTutorialURL
            End Get
        End Property
        
        Friend ReadOnly Property lAuthorIDColumn As DataColumn
            Get
                Return Me.columnlAuthorID
            End Get
        End Property
        
        Friend ReadOnly Property lSubmitterIDColumn As DataColumn
            Get
                Return Me.columnlSubmitterID
            End Get
        End Property
        
        Friend ReadOnly Property vsTutorialNameColumn As DataColumn
            Get
                Return Me.columnvsTutorialName
            End Get
        End Property
        
        Friend ReadOnly Property vsDescriptionColumn As DataColumn
            Get
                Return Me.columnvsDescription
            End Get
        End Property
        
        Friend ReadOnly Property dtSubmitDateColumn As DataColumn
            Get
                Return Me.columndtSubmitDate
            End Get
        End Property
        
        Friend ReadOnly Property dtApproveDateColumn As DataColumn
            Get
                Return Me.columndtApproveDate
            End Get
        End Property
        
        Friend ReadOnly Property lStatusIDColumn As DataColumn
            Get
                Return Me.columnlStatusID
            End Get
        End Property
        
        Friend ReadOnly Property bLocalFileColumn As DataColumn
            Get
                Return Me.columnbLocalFile
            End Get
        End Property
        
        Friend ReadOnly Property AssetIDColumn As DataColumn
            Get
                Return Me.columnAssetID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblTutorialsRow
            Get
                Return CType(Me.Rows(index),tblTutorialsRow)
            End Get
        End Property
        
        Public Event tblTutorialsRowChanged As tblTutorialsRowChangeEventHandler
        
        Public Event tblTutorialsRowChanging As tblTutorialsRowChangeEventHandler
        
        Public Event tblTutorialsRowDeleted As tblTutorialsRowChangeEventHandler
        
        Public Event tblTutorialsRowDeleting As tblTutorialsRowChangeEventHandler
        
        Public Overloads Sub AddtblTutorialsRow(ByVal row As tblTutorialsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblTutorialsRow(ByVal vsTutorialURL As String, ByVal parenttblUsersRowByUsersToTutorialsAuthor As tblUsersRow, ByVal parenttblUsersRowByUsersToTutorialsSubmitter As tblUsersRow, ByVal vsTutorialName As String, ByVal vsDescription As String, ByVal dtSubmitDate As Date, ByVal dtApproveDate As Date, ByVal parenttblStatusCodesRowByStatusCodesToTutorials As tblStatusCodesRow, ByVal bLocalFile As Boolean, ByVal parentAssetItemsRowByAssetItemsToTutorials As AssetItemsRow) As tblTutorialsRow
            Dim rowtblTutorialsRow As tblTutorialsRow = CType(Me.NewRow,tblTutorialsRow)
            rowtblTutorialsRow.ItemArray = New Object() {Nothing, vsTutorialURL, parenttblUsersRowByUsersToTutorialsAuthor(0), parenttblUsersRowByUsersToTutorialsSubmitter(0), vsTutorialName, vsDescription, dtSubmitDate, dtApproveDate, parenttblStatusCodesRowByStatusCodesToTutorials(0), bLocalFile, parentAssetItemsRowByAssetItemsToTutorials(0)}
            Me.Rows.Add(rowtblTutorialsRow)
            Return rowtblTutorialsRow
        End Function
        
        Public Function FindByAssetID(ByVal AssetID As Integer) As tblTutorialsRow
            Return CType(Me.Rows.Find(New Object() {AssetID}),tblTutorialsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblTutorialsDataTable = CType(MyBase.Clone,tblTutorialsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblTutorialsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlTutorialID = Me.Columns("lTutorialID")
            Me.columnvsTutorialURL = Me.Columns("vsTutorialURL")
            Me.columnlAuthorID = Me.Columns("lAuthorID")
            Me.columnlSubmitterID = Me.Columns("lSubmitterID")
            Me.columnvsTutorialName = Me.Columns("vsTutorialName")
            Me.columnvsDescription = Me.Columns("vsDescription")
            Me.columndtSubmitDate = Me.Columns("dtSubmitDate")
            Me.columndtApproveDate = Me.Columns("dtApproveDate")
            Me.columnlStatusID = Me.Columns("lStatusID")
            Me.columnbLocalFile = Me.Columns("bLocalFile")
            Me.columnAssetID = Me.Columns("AssetID")
        End Sub
        
        Private Sub InitClass()
            Me.columnlTutorialID = New DataColumn("lTutorialID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlTutorialID)
            Me.columnvsTutorialURL = New DataColumn("vsTutorialURL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsTutorialURL)
            Me.columnlAuthorID = New DataColumn("lAuthorID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlAuthorID)
            Me.columnlSubmitterID = New DataColumn("lSubmitterID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlSubmitterID)
            Me.columnvsTutorialName = New DataColumn("vsTutorialName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsTutorialName)
            Me.columnvsDescription = New DataColumn("vsDescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsDescription)
            Me.columndtSubmitDate = New DataColumn("dtSubmitDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtSubmitDate)
            Me.columndtApproveDate = New DataColumn("dtApproveDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtApproveDate)
            Me.columnlStatusID = New DataColumn("lStatusID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlStatusID)
            Me.columnbLocalFile = New DataColumn("bLocalFile", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbLocalFile)
            Me.columnAssetID = New DataColumn("AssetID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAssetID)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey5", New DataColumn() {Me.columnlTutorialID}, false))
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey32", New DataColumn() {Me.columnlTutorialID, Me.columnAssetID}, false))
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey39", New DataColumn() {Me.columnAssetID}, true))
            Me.columnlTutorialID.AutoIncrement = true
            Me.columnlTutorialID.AllowDBNull = false
            Me.columnlTutorialID.Unique = true
            Me.columnAssetID.AllowDBNull = false
            Me.columnAssetID.Unique = true
        End Sub
        
        Public Function NewtblTutorialsRow() As tblTutorialsRow
            Return CType(Me.NewRow,tblTutorialsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblTutorialsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblTutorialsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblTutorialsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblTutorialsRowChanged(Me, New tblTutorialsRowChangeEvent(CType(e.Row,tblTutorialsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblTutorialsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblTutorialsRowChanging(Me, New tblTutorialsRowChangeEvent(CType(e.Row,tblTutorialsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblTutorialsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblTutorialsRowDeleted(Me, New tblTutorialsRowChangeEvent(CType(e.Row,tblTutorialsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblTutorialsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblTutorialsRowDeleting(Me, New tblTutorialsRowChangeEvent(CType(e.Row,tblTutorialsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblTutorialsRow(ByVal row As tblTutorialsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblTutorialsRow
        Inherits DataRow
        
        Private tabletblTutorials As tblTutorialsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblTutorials = CType(Me.Table,tblTutorialsDataTable)
        End Sub
        
        Public Property lTutorialID As Integer
            Get
                Return CType(Me(Me.tabletblTutorials.lTutorialIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblTutorials.lTutorialIDColumn) = value
            End Set
        End Property
        
        Public Property vsTutorialURL As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTutorials.vsTutorialURLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTutorials.vsTutorialURLColumn) = value
            End Set
        End Property
        
        Public Property lAuthorID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblTutorials.lAuthorIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTutorials.lAuthorIDColumn) = value
            End Set
        End Property
        
        Public Property lSubmitterID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblTutorials.lSubmitterIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTutorials.lSubmitterIDColumn) = value
            End Set
        End Property
        
        Public Property vsTutorialName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTutorials.vsTutorialNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTutorials.vsTutorialNameColumn) = value
            End Set
        End Property
        
        Public Property vsDescription As String
            Get
                Try 
                    Return CType(Me(Me.tabletblTutorials.vsDescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTutorials.vsDescriptionColumn) = value
            End Set
        End Property
        
        Public Property dtSubmitDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblTutorials.dtSubmitDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTutorials.dtSubmitDateColumn) = value
            End Set
        End Property
        
        Public Property dtApproveDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblTutorials.dtApproveDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTutorials.dtApproveDateColumn) = value
            End Set
        End Property
        
        Public Property lStatusID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblTutorials.lStatusIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTutorials.lStatusIDColumn) = value
            End Set
        End Property
        
        Public Property bLocalFile As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblTutorials.bLocalFileColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblTutorials.bLocalFileColumn) = value
            End Set
        End Property
        
        Public Property AssetID As Integer
            Get
                Return CType(Me(Me.tabletblTutorials.AssetIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblTutorials.AssetIDColumn) = value
            End Set
        End Property
        
        Public Property tblStatusCodesRow As tblStatusCodesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("StatusCodesToTutorials")),tblStatusCodesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("StatusCodesToTutorials"))
            End Set
        End Property
        
        Public Property tblUsersRowByUsersToTutorialsAuthor As tblUsersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("UsersToTutorialsAuthor")),tblUsersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("UsersToTutorialsAuthor"))
            End Set
        End Property
        
        Public Property tblUsersRowByUsersToTutorialsSubmitter As tblUsersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("UsersToTutorialsSubmitter")),tblUsersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("UsersToTutorialsSubmitter"))
            End Set
        End Property
        
        Public Property AssetItemsRow As AssetItemsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AssetItemsToTutorials")),AssetItemsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AssetItemsToTutorials"))
            End Set
        End Property
        
        Public Function IsvsTutorialURLNull() As Boolean
            Return Me.IsNull(Me.tabletblTutorials.vsTutorialURLColumn)
        End Function
        
        Public Sub SetvsTutorialURLNull()
            Me(Me.tabletblTutorials.vsTutorialURLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslAuthorIDNull() As Boolean
            Return Me.IsNull(Me.tabletblTutorials.lAuthorIDColumn)
        End Function
        
        Public Sub SetlAuthorIDNull()
            Me(Me.tabletblTutorials.lAuthorIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslSubmitterIDNull() As Boolean
            Return Me.IsNull(Me.tabletblTutorials.lSubmitterIDColumn)
        End Function
        
        Public Sub SetlSubmitterIDNull()
            Me(Me.tabletblTutorials.lSubmitterIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsTutorialNameNull() As Boolean
            Return Me.IsNull(Me.tabletblTutorials.vsTutorialNameColumn)
        End Function
        
        Public Sub SetvsTutorialNameNull()
            Me(Me.tabletblTutorials.vsTutorialNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblTutorials.vsDescriptionColumn)
        End Function
        
        Public Sub SetvsDescriptionNull()
            Me(Me.tabletblTutorials.vsDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtSubmitDateNull() As Boolean
            Return Me.IsNull(Me.tabletblTutorials.dtSubmitDateColumn)
        End Function
        
        Public Sub SetdtSubmitDateNull()
            Me(Me.tabletblTutorials.dtSubmitDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtApproveDateNull() As Boolean
            Return Me.IsNull(Me.tabletblTutorials.dtApproveDateColumn)
        End Function
        
        Public Sub SetdtApproveDateNull()
            Me(Me.tabletblTutorials.dtApproveDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslStatusIDNull() As Boolean
            Return Me.IsNull(Me.tabletblTutorials.lStatusIDColumn)
        End Function
        
        Public Sub SetlStatusIDNull()
            Me(Me.tabletblTutorials.lStatusIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbLocalFileNull() As Boolean
            Return Me.IsNull(Me.tabletblTutorials.bLocalFileColumn)
        End Function
        
        Public Sub SetbLocalFileNull()
            Me(Me.tabletblTutorials.bLocalFileColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblTutorialsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblTutorialsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblTutorialsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblTutorialsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblSiteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlSiteID As DataColumn
        
        Private columnvsSiteName As DataColumn
        
        Friend Sub New()
            MyBase.New("tblSite")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lSiteIDColumn As DataColumn
            Get
                Return Me.columnlSiteID
            End Get
        End Property
        
        Friend ReadOnly Property vsSiteNameColumn As DataColumn
            Get
                Return Me.columnvsSiteName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblSiteRow
            Get
                Return CType(Me.Rows(index),tblSiteRow)
            End Get
        End Property
        
        Public Event tblSiteRowChanged As tblSiteRowChangeEventHandler
        
        Public Event tblSiteRowChanging As tblSiteRowChangeEventHandler
        
        Public Event tblSiteRowDeleted As tblSiteRowChangeEventHandler
        
        Public Event tblSiteRowDeleting As tblSiteRowChangeEventHandler
        
        Public Overloads Sub AddtblSiteRow(ByVal row As tblSiteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblSiteRow(ByVal vsSiteName As String) As tblSiteRow
            Dim rowtblSiteRow As tblSiteRow = CType(Me.NewRow,tblSiteRow)
            rowtblSiteRow.ItemArray = New Object() {Nothing, vsSiteName}
            Me.Rows.Add(rowtblSiteRow)
            Return rowtblSiteRow
        End Function
        
        Public Function FindBylSiteID(ByVal lSiteID As Integer) As tblSiteRow
            Return CType(Me.Rows.Find(New Object() {lSiteID}),tblSiteRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblSiteDataTable = CType(MyBase.Clone,tblSiteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblSiteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlSiteID = Me.Columns("lSiteID")
            Me.columnvsSiteName = Me.Columns("vsSiteName")
        End Sub
        
        Private Sub InitClass()
            Me.columnlSiteID = New DataColumn("lSiteID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlSiteID)
            Me.columnvsSiteName = New DataColumn("vsSiteName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsSiteName)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey7", New DataColumn() {Me.columnlSiteID}, true))
            Me.columnlSiteID.AutoIncrement = true
            Me.columnlSiteID.AllowDBNull = false
            Me.columnlSiteID.Unique = true
        End Sub
        
        Public Function NewtblSiteRow() As tblSiteRow
            Return CType(Me.NewRow,tblSiteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblSiteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblSiteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblSiteRowChangedEvent) Is Nothing) Then
                RaiseEvent tblSiteRowChanged(Me, New tblSiteRowChangeEvent(CType(e.Row,tblSiteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblSiteRowChangingEvent) Is Nothing) Then
                RaiseEvent tblSiteRowChanging(Me, New tblSiteRowChangeEvent(CType(e.Row,tblSiteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblSiteRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblSiteRowDeleted(Me, New tblSiteRowChangeEvent(CType(e.Row,tblSiteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblSiteRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblSiteRowDeleting(Me, New tblSiteRowChangeEvent(CType(e.Row,tblSiteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblSiteRow(ByVal row As tblSiteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblSiteRow
        Inherits DataRow
        
        Private tabletblSite As tblSiteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblSite = CType(Me.Table,tblSiteDataTable)
        End Sub
        
        Public Property lSiteID As Integer
            Get
                Return CType(Me(Me.tabletblSite.lSiteIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblSite.lSiteIDColumn) = value
            End Set
        End Property
        
        Public Property vsSiteName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblSite.vsSiteNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblSite.vsSiteNameColumn) = value
            End Set
        End Property
        
        Public Function IsvsSiteNameNull() As Boolean
            Return Me.IsNull(Me.tabletblSite.vsSiteNameColumn)
        End Function
        
        Public Sub SetvsSiteNameNull()
            Me(Me.tabletblSite.vsSiteNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblUsersRows() As tblUsersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SiteToUsers")),tblUsersRow())
        End Function
        
        Public Function GettblItemSitesRows() As tblItemSitesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SiteToItemSites")),tblItemSitesRow())
        End Function
        
        Public Function GettblContestsRows() As tblContestsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("SiteToContests")),tblContestsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblSiteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblSiteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblSiteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblSiteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblStatusCodesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlStatusID As DataColumn
        
        Private columnvsStatusName As DataColumn
        
        Friend Sub New()
            MyBase.New("tblStatusCodes")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lStatusIDColumn As DataColumn
            Get
                Return Me.columnlStatusID
            End Get
        End Property
        
        Friend ReadOnly Property vsStatusNameColumn As DataColumn
            Get
                Return Me.columnvsStatusName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblStatusCodesRow
            Get
                Return CType(Me.Rows(index),tblStatusCodesRow)
            End Get
        End Property
        
        Public Event tblStatusCodesRowChanged As tblStatusCodesRowChangeEventHandler
        
        Public Event tblStatusCodesRowChanging As tblStatusCodesRowChangeEventHandler
        
        Public Event tblStatusCodesRowDeleted As tblStatusCodesRowChangeEventHandler
        
        Public Event tblStatusCodesRowDeleting As tblStatusCodesRowChangeEventHandler
        
        Public Overloads Sub AddtblStatusCodesRow(ByVal row As tblStatusCodesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblStatusCodesRow(ByVal vsStatusName As String) As tblStatusCodesRow
            Dim rowtblStatusCodesRow As tblStatusCodesRow = CType(Me.NewRow,tblStatusCodesRow)
            rowtblStatusCodesRow.ItemArray = New Object() {Nothing, vsStatusName}
            Me.Rows.Add(rowtblStatusCodesRow)
            Return rowtblStatusCodesRow
        End Function
        
        Public Function FindBylStatusID(ByVal lStatusID As Integer) As tblStatusCodesRow
            Return CType(Me.Rows.Find(New Object() {lStatusID}),tblStatusCodesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblStatusCodesDataTable = CType(MyBase.Clone,tblStatusCodesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblStatusCodesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlStatusID = Me.Columns("lStatusID")
            Me.columnvsStatusName = Me.Columns("vsStatusName")
        End Sub
        
        Private Sub InitClass()
            Me.columnlStatusID = New DataColumn("lStatusID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlStatusID)
            Me.columnvsStatusName = New DataColumn("vsStatusName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsStatusName)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey8", New DataColumn() {Me.columnlStatusID}, true))
            Me.columnlStatusID.AutoIncrement = true
            Me.columnlStatusID.AllowDBNull = false
            Me.columnlStatusID.Unique = true
        End Sub
        
        Public Function NewtblStatusCodesRow() As tblStatusCodesRow
            Return CType(Me.NewRow,tblStatusCodesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblStatusCodesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblStatusCodesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblStatusCodesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblStatusCodesRowChanged(Me, New tblStatusCodesRowChangeEvent(CType(e.Row,tblStatusCodesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblStatusCodesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblStatusCodesRowChanging(Me, New tblStatusCodesRowChangeEvent(CType(e.Row,tblStatusCodesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblStatusCodesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblStatusCodesRowDeleted(Me, New tblStatusCodesRowChangeEvent(CType(e.Row,tblStatusCodesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblStatusCodesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblStatusCodesRowDeleting(Me, New tblStatusCodesRowChangeEvent(CType(e.Row,tblStatusCodesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblStatusCodesRow(ByVal row As tblStatusCodesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblStatusCodesRow
        Inherits DataRow
        
        Private tabletblStatusCodes As tblStatusCodesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblStatusCodes = CType(Me.Table,tblStatusCodesDataTable)
        End Sub
        
        Public Property lStatusID As Integer
            Get
                Return CType(Me(Me.tabletblStatusCodes.lStatusIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblStatusCodes.lStatusIDColumn) = value
            End Set
        End Property
        
        Public Property vsStatusName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblStatusCodes.vsStatusNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblStatusCodes.vsStatusNameColumn) = value
            End Set
        End Property
        
        Public Function IsvsStatusNameNull() As Boolean
            Return Me.IsNull(Me.tabletblStatusCodes.vsStatusNameColumn)
        End Function
        
        Public Sub SetvsStatusNameNull()
            Me(Me.tabletblStatusCodes.vsStatusNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblUsersRows() As tblUsersRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("StatusCodesToUsers")),tblUsersRow())
        End Function
        
        Public Function GettblTutorialsRows() As tblTutorialsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("StatusCodesToTutorials")),tblTutorialsRow())
        End Function
        
        Public Function GettblReviewsRows() As tblReviewsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("StatusCodesToReviews")),tblReviewsRow())
        End Function
        
        Public Function GettblScriptsRows() As tblScriptsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("StatusCodesToScripts")),tblScriptsRow())
        End Function
        
        Public Function GettblProjectsRows() As tblProjectsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("StatusCodesToProjects")),tblProjectsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblStatusCodesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblStatusCodesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblStatusCodesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblStatusCodesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPublishersDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlPublisherID As DataColumn
        
        Private columnvsPublisherName As DataColumn
        
        Private columnvsPublisherLogo As DataColumn
        
        Private columnvsPublisherURL As DataColumn
        
        Friend Sub New()
            MyBase.New("tblPublishers")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lPublisherIDColumn As DataColumn
            Get
                Return Me.columnlPublisherID
            End Get
        End Property
        
        Friend ReadOnly Property vsPublisherNameColumn As DataColumn
            Get
                Return Me.columnvsPublisherName
            End Get
        End Property
        
        Friend ReadOnly Property vsPublisherLogoColumn As DataColumn
            Get
                Return Me.columnvsPublisherLogo
            End Get
        End Property
        
        Friend ReadOnly Property vsPublisherURLColumn As DataColumn
            Get
                Return Me.columnvsPublisherURL
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblPublishersRow
            Get
                Return CType(Me.Rows(index),tblPublishersRow)
            End Get
        End Property
        
        Public Event tblPublishersRowChanged As tblPublishersRowChangeEventHandler
        
        Public Event tblPublishersRowChanging As tblPublishersRowChangeEventHandler
        
        Public Event tblPublishersRowDeleted As tblPublishersRowChangeEventHandler
        
        Public Event tblPublishersRowDeleting As tblPublishersRowChangeEventHandler
        
        Public Overloads Sub AddtblPublishersRow(ByVal row As tblPublishersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblPublishersRow(ByVal vsPublisherName As String, ByVal vsPublisherLogo As String, ByVal vsPublisherURL As String) As tblPublishersRow
            Dim rowtblPublishersRow As tblPublishersRow = CType(Me.NewRow,tblPublishersRow)
            rowtblPublishersRow.ItemArray = New Object() {Nothing, vsPublisherName, vsPublisherLogo, vsPublisherURL}
            Me.Rows.Add(rowtblPublishersRow)
            Return rowtblPublishersRow
        End Function
        
        Public Function FindBylPublisherID(ByVal lPublisherID As Integer) As tblPublishersRow
            Return CType(Me.Rows.Find(New Object() {lPublisherID}),tblPublishersRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblPublishersDataTable = CType(MyBase.Clone,tblPublishersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblPublishersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlPublisherID = Me.Columns("lPublisherID")
            Me.columnvsPublisherName = Me.Columns("vsPublisherName")
            Me.columnvsPublisherLogo = Me.Columns("vsPublisherLogo")
            Me.columnvsPublisherURL = Me.Columns("vsPublisherURL")
        End Sub
        
        Private Sub InitClass()
            Me.columnlPublisherID = New DataColumn("lPublisherID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlPublisherID)
            Me.columnvsPublisherName = New DataColumn("vsPublisherName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsPublisherName)
            Me.columnvsPublisherLogo = New DataColumn("vsPublisherLogo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsPublisherLogo)
            Me.columnvsPublisherURL = New DataColumn("vsPublisherURL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsPublisherURL)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey9", New DataColumn() {Me.columnlPublisherID}, true))
            Me.columnlPublisherID.AutoIncrement = true
            Me.columnlPublisherID.AllowDBNull = false
            Me.columnlPublisherID.Unique = true
        End Sub
        
        Public Function NewtblPublishersRow() As tblPublishersRow
            Return CType(Me.NewRow,tblPublishersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblPublishersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblPublishersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblPublishersRowChangedEvent) Is Nothing) Then
                RaiseEvent tblPublishersRowChanged(Me, New tblPublishersRowChangeEvent(CType(e.Row,tblPublishersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblPublishersRowChangingEvent) Is Nothing) Then
                RaiseEvent tblPublishersRowChanging(Me, New tblPublishersRowChangeEvent(CType(e.Row,tblPublishersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblPublishersRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblPublishersRowDeleted(Me, New tblPublishersRowChangeEvent(CType(e.Row,tblPublishersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblPublishersRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblPublishersRowDeleting(Me, New tblPublishersRowChangeEvent(CType(e.Row,tblPublishersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblPublishersRow(ByVal row As tblPublishersRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPublishersRow
        Inherits DataRow
        
        Private tabletblPublishers As tblPublishersDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblPublishers = CType(Me.Table,tblPublishersDataTable)
        End Sub
        
        Public Property lPublisherID As Integer
            Get
                Return CType(Me(Me.tabletblPublishers.lPublisherIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblPublishers.lPublisherIDColumn) = value
            End Set
        End Property
        
        Public Property vsPublisherName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPublishers.vsPublisherNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPublishers.vsPublisherNameColumn) = value
            End Set
        End Property
        
        Public Property vsPublisherLogo As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPublishers.vsPublisherLogoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPublishers.vsPublisherLogoColumn) = value
            End Set
        End Property
        
        Public Property vsPublisherURL As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPublishers.vsPublisherURLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPublishers.vsPublisherURLColumn) = value
            End Set
        End Property
        
        Public Function IsvsPublisherNameNull() As Boolean
            Return Me.IsNull(Me.tabletblPublishers.vsPublisherNameColumn)
        End Function
        
        Public Sub SetvsPublisherNameNull()
            Me(Me.tabletblPublishers.vsPublisherNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsPublisherLogoNull() As Boolean
            Return Me.IsNull(Me.tabletblPublishers.vsPublisherLogoColumn)
        End Function
        
        Public Sub SetvsPublisherLogoNull()
            Me(Me.tabletblPublishers.vsPublisherLogoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsPublisherURLNull() As Boolean
            Return Me.IsNull(Me.tabletblPublishers.vsPublisherURLColumn)
        End Function
        
        Public Sub SetvsPublisherURLNull()
            Me(Me.tabletblPublishers.vsPublisherURLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblSoftwareRows() As tblSoftwareRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PublishersToSoftware")),tblSoftwareRow())
        End Function
        
        Public Function GettblPublisherItemTypesRows() As tblPublisherItemTypesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PublishersToPublisherItemTypes")),tblPublisherItemTypesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPublishersRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblPublishersRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblPublishersRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblPublishersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblRankingsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlItemID As DataColumn
        
        Private columnlItemTypeID As DataColumn
        
        Private columnlUserID As DataColumn
        
        Private columnlRank As DataColumn
        
        Private columnvsComment As DataColumn
        
        Private columndtRankDate As DataColumn
        
        Friend Sub New()
            MyBase.New("tblRankings")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lItemIDColumn As DataColumn
            Get
                Return Me.columnlItemID
            End Get
        End Property
        
        Friend ReadOnly Property lItemTypeIDColumn As DataColumn
            Get
                Return Me.columnlItemTypeID
            End Get
        End Property
        
        Friend ReadOnly Property lUserIDColumn As DataColumn
            Get
                Return Me.columnlUserID
            End Get
        End Property
        
        Friend ReadOnly Property lRankColumn As DataColumn
            Get
                Return Me.columnlRank
            End Get
        End Property
        
        Friend ReadOnly Property vsCommentColumn As DataColumn
            Get
                Return Me.columnvsComment
            End Get
        End Property
        
        Friend ReadOnly Property dtRankDateColumn As DataColumn
            Get
                Return Me.columndtRankDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblRankingsRow
            Get
                Return CType(Me.Rows(index),tblRankingsRow)
            End Get
        End Property
        
        Public Event tblRankingsRowChanged As tblRankingsRowChangeEventHandler
        
        Public Event tblRankingsRowChanging As tblRankingsRowChangeEventHandler
        
        Public Event tblRankingsRowDeleted As tblRankingsRowChangeEventHandler
        
        Public Event tblRankingsRowDeleting As tblRankingsRowChangeEventHandler
        
        Public Overloads Sub AddtblRankingsRow(ByVal row As tblRankingsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblRankingsRow(ByVal lItemID As Integer, ByVal parenttblItemTypesRowByItemTypesToRankings As tblItemTypesRow, ByVal parenttblUsersRowByUsersToRankings As tblUsersRow, ByVal lRank As Integer, ByVal vsComment As String, ByVal dtRankDate As Date) As tblRankingsRow
            Dim rowtblRankingsRow As tblRankingsRow = CType(Me.NewRow,tblRankingsRow)
            rowtblRankingsRow.ItemArray = New Object() {lItemID, parenttblItemTypesRowByItemTypesToRankings(0), parenttblUsersRowByUsersToRankings(0), lRank, vsComment, dtRankDate}
            Me.Rows.Add(rowtblRankingsRow)
            Return rowtblRankingsRow
        End Function
        
        Public Function FindBylItemIDlItemTypeIDlUserID(ByVal lItemID As Integer, ByVal lItemTypeID As Integer, ByVal lUserID As Integer) As tblRankingsRow
            Return CType(Me.Rows.Find(New Object() {lItemID, lItemTypeID, lUserID}),tblRankingsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblRankingsDataTable = CType(MyBase.Clone,tblRankingsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblRankingsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlItemID = Me.Columns("lItemID")
            Me.columnlItemTypeID = Me.Columns("lItemTypeID")
            Me.columnlUserID = Me.Columns("lUserID")
            Me.columnlRank = Me.Columns("lRank")
            Me.columnvsComment = Me.Columns("vsComment")
            Me.columndtRankDate = Me.Columns("dtRankDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnlItemID = New DataColumn("lItemID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemID)
            Me.columnlItemTypeID = New DataColumn("lItemTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemTypeID)
            Me.columnlUserID = New DataColumn("lUserID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlUserID)
            Me.columnlRank = New DataColumn("lRank", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlRank)
            Me.columnvsComment = New DataColumn("vsComment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsComment)
            Me.columndtRankDate = New DataColumn("dtRankDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtRankDate)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey10", New DataColumn() {Me.columnlItemID, Me.columnlItemTypeID, Me.columnlUserID}, true))
            Me.columnlItemID.AllowDBNull = false
            Me.columnlItemTypeID.AllowDBNull = false
            Me.columnlUserID.AllowDBNull = false
        End Sub
        
        Public Function NewtblRankingsRow() As tblRankingsRow
            Return CType(Me.NewRow,tblRankingsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblRankingsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblRankingsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblRankingsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblRankingsRowChanged(Me, New tblRankingsRowChangeEvent(CType(e.Row,tblRankingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblRankingsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblRankingsRowChanging(Me, New tblRankingsRowChangeEvent(CType(e.Row,tblRankingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblRankingsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblRankingsRowDeleted(Me, New tblRankingsRowChangeEvent(CType(e.Row,tblRankingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblRankingsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblRankingsRowDeleting(Me, New tblRankingsRowChangeEvent(CType(e.Row,tblRankingsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblRankingsRow(ByVal row As tblRankingsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblRankingsRow
        Inherits DataRow
        
        Private tabletblRankings As tblRankingsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblRankings = CType(Me.Table,tblRankingsDataTable)
        End Sub
        
        Public Property lItemID As Integer
            Get
                Return CType(Me(Me.tabletblRankings.lItemIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblRankings.lItemIDColumn) = value
            End Set
        End Property
        
        Public Property lItemTypeID As Integer
            Get
                Return CType(Me(Me.tabletblRankings.lItemTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblRankings.lItemTypeIDColumn) = value
            End Set
        End Property
        
        Public Property lUserID As Integer
            Get
                Return CType(Me(Me.tabletblRankings.lUserIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblRankings.lUserIDColumn) = value
            End Set
        End Property
        
        Public Property lRank As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblRankings.lRankColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRankings.lRankColumn) = value
            End Set
        End Property
        
        Public Property vsComment As String
            Get
                Try 
                    Return CType(Me(Me.tabletblRankings.vsCommentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRankings.vsCommentColumn) = value
            End Set
        End Property
        
        Public Property dtRankDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblRankings.dtRankDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblRankings.dtRankDateColumn) = value
            End Set
        End Property
        
        Public Property tblUsersRow As tblUsersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("UsersToRankings")),tblUsersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("UsersToRankings"))
            End Set
        End Property
        
        Public Property tblItemTypesRow As tblItemTypesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ItemTypesToRankings")),tblItemTypesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ItemTypesToRankings"))
            End Set
        End Property
        
        Public Property AssetItemsRowParent As AssetItemsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AssetItemsToRankings")),AssetItemsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AssetItemsToRankings"))
            End Set
        End Property
        
        Public Function IslRankNull() As Boolean
            Return Me.IsNull(Me.tabletblRankings.lRankColumn)
        End Function
        
        Public Sub SetlRankNull()
            Me(Me.tabletblRankings.lRankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsCommentNull() As Boolean
            Return Me.IsNull(Me.tabletblRankings.vsCommentColumn)
        End Function
        
        Public Sub SetvsCommentNull()
            Me(Me.tabletblRankings.vsCommentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtRankDateNull() As Boolean
            Return Me.IsNull(Me.tabletblRankings.dtRankDateColumn)
        End Function
        
        Public Sub SetdtRankDateNull()
            Me(Me.tabletblRankings.dtRankDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblRankingsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblRankingsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblRankingsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblRankingsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblReviewsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlReviewID As DataColumn
        
        Private columnvsReviewURL As DataColumn
        
        Private columnlAuthorID As DataColumn
        
        Private columnvsAuthorName As DataColumn
        
        Private columnlSubmitterID As DataColumn
        
        Private columnvsReviewName As DataColumn
        
        Private columnvsDescription As DataColumn
        
        Private columndtSubmitDate As DataColumn
        
        Private columndtApproveDate As DataColumn
        
        Private columnlStatusID As DataColumn
        
        Private columnbLocalFile As DataColumn
        
        Private columnAssetID As DataColumn
        
        Friend Sub New()
            MyBase.New("tblReviews")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lReviewIDColumn As DataColumn
            Get
                Return Me.columnlReviewID
            End Get
        End Property
        
        Friend ReadOnly Property vsReviewURLColumn As DataColumn
            Get
                Return Me.columnvsReviewURL
            End Get
        End Property
        
        Friend ReadOnly Property lAuthorIDColumn As DataColumn
            Get
                Return Me.columnlAuthorID
            End Get
        End Property
        
        Friend ReadOnly Property vsAuthorNameColumn As DataColumn
            Get
                Return Me.columnvsAuthorName
            End Get
        End Property
        
        Friend ReadOnly Property lSubmitterIDColumn As DataColumn
            Get
                Return Me.columnlSubmitterID
            End Get
        End Property
        
        Friend ReadOnly Property vsReviewNameColumn As DataColumn
            Get
                Return Me.columnvsReviewName
            End Get
        End Property
        
        Friend ReadOnly Property vsDescriptionColumn As DataColumn
            Get
                Return Me.columnvsDescription
            End Get
        End Property
        
        Friend ReadOnly Property dtSubmitDateColumn As DataColumn
            Get
                Return Me.columndtSubmitDate
            End Get
        End Property
        
        Friend ReadOnly Property dtApproveDateColumn As DataColumn
            Get
                Return Me.columndtApproveDate
            End Get
        End Property
        
        Friend ReadOnly Property lStatusIDColumn As DataColumn
            Get
                Return Me.columnlStatusID
            End Get
        End Property
        
        Friend ReadOnly Property bLocalFileColumn As DataColumn
            Get
                Return Me.columnbLocalFile
            End Get
        End Property
        
        Friend ReadOnly Property AssetIDColumn As DataColumn
            Get
                Return Me.columnAssetID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblReviewsRow
            Get
                Return CType(Me.Rows(index),tblReviewsRow)
            End Get
        End Property
        
        Public Event tblReviewsRowChanged As tblReviewsRowChangeEventHandler
        
        Public Event tblReviewsRowChanging As tblReviewsRowChangeEventHandler
        
        Public Event tblReviewsRowDeleted As tblReviewsRowChangeEventHandler
        
        Public Event tblReviewsRowDeleting As tblReviewsRowChangeEventHandler
        
        Public Overloads Sub AddtblReviewsRow(ByVal row As tblReviewsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblReviewsRow(ByVal vsReviewURL As String, ByVal parenttblUsersRowByUsersToReviewsAuthor As tblUsersRow, ByVal vsAuthorName As String, ByVal parenttblUsersRowByUsersToReviewsSubmitter As tblUsersRow, ByVal vsReviewName As String, ByVal vsDescription As String, ByVal dtSubmitDate As Date, ByVal dtApproveDate As Date, ByVal parenttblStatusCodesRowByStatusCodesToReviews As tblStatusCodesRow, ByVal bLocalFile As Boolean, ByVal parentAssetItemsRowByAssetItemsToReviews As AssetItemsRow) As tblReviewsRow
            Dim rowtblReviewsRow As tblReviewsRow = CType(Me.NewRow,tblReviewsRow)
            rowtblReviewsRow.ItemArray = New Object() {Nothing, vsReviewURL, parenttblUsersRowByUsersToReviewsAuthor(0), vsAuthorName, parenttblUsersRowByUsersToReviewsSubmitter(0), vsReviewName, vsDescription, dtSubmitDate, dtApproveDate, parenttblStatusCodesRowByStatusCodesToReviews(0), bLocalFile, parentAssetItemsRowByAssetItemsToReviews(0)}
            Me.Rows.Add(rowtblReviewsRow)
            Return rowtblReviewsRow
        End Function
        
        Public Function FindByAssetID(ByVal AssetID As Integer) As tblReviewsRow
            Return CType(Me.Rows.Find(New Object() {AssetID}),tblReviewsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblReviewsDataTable = CType(MyBase.Clone,tblReviewsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblReviewsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlReviewID = Me.Columns("lReviewID")
            Me.columnvsReviewURL = Me.Columns("vsReviewURL")
            Me.columnlAuthorID = Me.Columns("lAuthorID")
            Me.columnvsAuthorName = Me.Columns("vsAuthorName")
            Me.columnlSubmitterID = Me.Columns("lSubmitterID")
            Me.columnvsReviewName = Me.Columns("vsReviewName")
            Me.columnvsDescription = Me.Columns("vsDescription")
            Me.columndtSubmitDate = Me.Columns("dtSubmitDate")
            Me.columndtApproveDate = Me.Columns("dtApproveDate")
            Me.columnlStatusID = Me.Columns("lStatusID")
            Me.columnbLocalFile = Me.Columns("bLocalFile")
            Me.columnAssetID = Me.Columns("AssetID")
        End Sub
        
        Private Sub InitClass()
            Me.columnlReviewID = New DataColumn("lReviewID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlReviewID)
            Me.columnvsReviewURL = New DataColumn("vsReviewURL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsReviewURL)
            Me.columnlAuthorID = New DataColumn("lAuthorID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlAuthorID)
            Me.columnvsAuthorName = New DataColumn("vsAuthorName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsAuthorName)
            Me.columnlSubmitterID = New DataColumn("lSubmitterID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlSubmitterID)
            Me.columnvsReviewName = New DataColumn("vsReviewName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsReviewName)
            Me.columnvsDescription = New DataColumn("vsDescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsDescription)
            Me.columndtSubmitDate = New DataColumn("dtSubmitDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtSubmitDate)
            Me.columndtApproveDate = New DataColumn("dtApproveDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtApproveDate)
            Me.columnlStatusID = New DataColumn("lStatusID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlStatusID)
            Me.columnbLocalFile = New DataColumn("bLocalFile", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbLocalFile)
            Me.columnAssetID = New DataColumn("AssetID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAssetID)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey11", New DataColumn() {Me.columnlReviewID}, false))
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey33", New DataColumn() {Me.columnlReviewID, Me.columnAssetID}, false))
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey40", New DataColumn() {Me.columnAssetID}, true))
            Me.columnlReviewID.AutoIncrement = true
            Me.columnlReviewID.AllowDBNull = false
            Me.columnlReviewID.Unique = true
            Me.columnAssetID.AllowDBNull = false
            Me.columnAssetID.Unique = true
        End Sub
        
        Public Function NewtblReviewsRow() As tblReviewsRow
            Return CType(Me.NewRow,tblReviewsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblReviewsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblReviewsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblReviewsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblReviewsRowChanged(Me, New tblReviewsRowChangeEvent(CType(e.Row,tblReviewsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblReviewsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblReviewsRowChanging(Me, New tblReviewsRowChangeEvent(CType(e.Row,tblReviewsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblReviewsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblReviewsRowDeleted(Me, New tblReviewsRowChangeEvent(CType(e.Row,tblReviewsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblReviewsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblReviewsRowDeleting(Me, New tblReviewsRowChangeEvent(CType(e.Row,tblReviewsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblReviewsRow(ByVal row As tblReviewsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblReviewsRow
        Inherits DataRow
        
        Private tabletblReviews As tblReviewsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblReviews = CType(Me.Table,tblReviewsDataTable)
        End Sub
        
        Public Property lReviewID As Integer
            Get
                Return CType(Me(Me.tabletblReviews.lReviewIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblReviews.lReviewIDColumn) = value
            End Set
        End Property
        
        Public Property vsReviewURL As String
            Get
                Try 
                    Return CType(Me(Me.tabletblReviews.vsReviewURLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblReviews.vsReviewURLColumn) = value
            End Set
        End Property
        
        Public Property lAuthorID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblReviews.lAuthorIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblReviews.lAuthorIDColumn) = value
            End Set
        End Property
        
        Public Property vsAuthorName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblReviews.vsAuthorNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblReviews.vsAuthorNameColumn) = value
            End Set
        End Property
        
        Public Property lSubmitterID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblReviews.lSubmitterIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblReviews.lSubmitterIDColumn) = value
            End Set
        End Property
        
        Public Property vsReviewName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblReviews.vsReviewNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblReviews.vsReviewNameColumn) = value
            End Set
        End Property
        
        Public Property vsDescription As String
            Get
                Try 
                    Return CType(Me(Me.tabletblReviews.vsDescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblReviews.vsDescriptionColumn) = value
            End Set
        End Property
        
        Public Property dtSubmitDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblReviews.dtSubmitDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblReviews.dtSubmitDateColumn) = value
            End Set
        End Property
        
        Public Property dtApproveDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblReviews.dtApproveDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblReviews.dtApproveDateColumn) = value
            End Set
        End Property
        
        Public Property lStatusID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblReviews.lStatusIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblReviews.lStatusIDColumn) = value
            End Set
        End Property
        
        Public Property bLocalFile As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblReviews.bLocalFileColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblReviews.bLocalFileColumn) = value
            End Set
        End Property
        
        Public Property AssetID As Integer
            Get
                Return CType(Me(Me.tabletblReviews.AssetIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblReviews.AssetIDColumn) = value
            End Set
        End Property
        
        Public Property tblUsersRowByUsersToReviewsAuthor As tblUsersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("UsersToReviewsAuthor")),tblUsersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("UsersToReviewsAuthor"))
            End Set
        End Property
        
        Public Property tblStatusCodesRow As tblStatusCodesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("StatusCodesToReviews")),tblStatusCodesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("StatusCodesToReviews"))
            End Set
        End Property
        
        Public Property tblUsersRowByUsersToReviewsSubmitter As tblUsersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("UsersToReviewsSubmitter")),tblUsersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("UsersToReviewsSubmitter"))
            End Set
        End Property
        
        Public Property AssetItemsRow As AssetItemsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AssetItemsToReviews")),AssetItemsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AssetItemsToReviews"))
            End Set
        End Property
        
        Public Function IsvsReviewURLNull() As Boolean
            Return Me.IsNull(Me.tabletblReviews.vsReviewURLColumn)
        End Function
        
        Public Sub SetvsReviewURLNull()
            Me(Me.tabletblReviews.vsReviewURLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslAuthorIDNull() As Boolean
            Return Me.IsNull(Me.tabletblReviews.lAuthorIDColumn)
        End Function
        
        Public Sub SetlAuthorIDNull()
            Me(Me.tabletblReviews.lAuthorIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsAuthorNameNull() As Boolean
            Return Me.IsNull(Me.tabletblReviews.vsAuthorNameColumn)
        End Function
        
        Public Sub SetvsAuthorNameNull()
            Me(Me.tabletblReviews.vsAuthorNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslSubmitterIDNull() As Boolean
            Return Me.IsNull(Me.tabletblReviews.lSubmitterIDColumn)
        End Function
        
        Public Sub SetlSubmitterIDNull()
            Me(Me.tabletblReviews.lSubmitterIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsReviewNameNull() As Boolean
            Return Me.IsNull(Me.tabletblReviews.vsReviewNameColumn)
        End Function
        
        Public Sub SetvsReviewNameNull()
            Me(Me.tabletblReviews.vsReviewNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblReviews.vsDescriptionColumn)
        End Function
        
        Public Sub SetvsDescriptionNull()
            Me(Me.tabletblReviews.vsDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtSubmitDateNull() As Boolean
            Return Me.IsNull(Me.tabletblReviews.dtSubmitDateColumn)
        End Function
        
        Public Sub SetdtSubmitDateNull()
            Me(Me.tabletblReviews.dtSubmitDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtApproveDateNull() As Boolean
            Return Me.IsNull(Me.tabletblReviews.dtApproveDateColumn)
        End Function
        
        Public Sub SetdtApproveDateNull()
            Me(Me.tabletblReviews.dtApproveDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslStatusIDNull() As Boolean
            Return Me.IsNull(Me.tabletblReviews.lStatusIDColumn)
        End Function
        
        Public Sub SetlStatusIDNull()
            Me(Me.tabletblReviews.lStatusIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbLocalFileNull() As Boolean
            Return Me.IsNull(Me.tabletblReviews.bLocalFileColumn)
        End Function
        
        Public Sub SetbLocalFileNull()
            Me(Me.tabletblReviews.bLocalFileColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblReviewsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblReviewsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblReviewsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblReviewsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblScriptsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlScriptID As DataColumn
        
        Private columnlUserID As DataColumn
        
        Private columnvsPath As DataColumn
        
        Private columnvsFileName As DataColumn
        
        Private columndtSubmitDate As DataColumn
        
        Private columndtApproveDate As DataColumn
        
        Private columnvsFriendlyName As DataColumn
        
        Private columnvsDescription As DataColumn
        
        Private columnlStatusID As DataColumn
        
        Private columnlFormatID As DataColumn
        
        Private columnlScriptSize As DataColumn
        
        Private columnlSoftwareVersionID As DataColumn
        
        Private columnvsRequiredMediaURL As DataColumn
        
        Private columndtVersionDate As DataColumn
        
        Private columnlVersionCount As DataColumn
        
        Private columnlDownloads As DataColumn
        
        Private columnAssetID As DataColumn
        
        Friend Sub New()
            MyBase.New("tblScripts")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lScriptIDColumn As DataColumn
            Get
                Return Me.columnlScriptID
            End Get
        End Property
        
        Friend ReadOnly Property lUserIDColumn As DataColumn
            Get
                Return Me.columnlUserID
            End Get
        End Property
        
        Friend ReadOnly Property vsPathColumn As DataColumn
            Get
                Return Me.columnvsPath
            End Get
        End Property
        
        Friend ReadOnly Property vsFileNameColumn As DataColumn
            Get
                Return Me.columnvsFileName
            End Get
        End Property
        
        Friend ReadOnly Property dtSubmitDateColumn As DataColumn
            Get
                Return Me.columndtSubmitDate
            End Get
        End Property
        
        Friend ReadOnly Property dtApproveDateColumn As DataColumn
            Get
                Return Me.columndtApproveDate
            End Get
        End Property
        
        Friend ReadOnly Property vsFriendlyNameColumn As DataColumn
            Get
                Return Me.columnvsFriendlyName
            End Get
        End Property
        
        Friend ReadOnly Property vsDescriptionColumn As DataColumn
            Get
                Return Me.columnvsDescription
            End Get
        End Property
        
        Friend ReadOnly Property lStatusIDColumn As DataColumn
            Get
                Return Me.columnlStatusID
            End Get
        End Property
        
        Friend ReadOnly Property lFormatIDColumn As DataColumn
            Get
                Return Me.columnlFormatID
            End Get
        End Property
        
        Friend ReadOnly Property lScriptSizeColumn As DataColumn
            Get
                Return Me.columnlScriptSize
            End Get
        End Property
        
        Friend ReadOnly Property lSoftwareVersionIDColumn As DataColumn
            Get
                Return Me.columnlSoftwareVersionID
            End Get
        End Property
        
        Friend ReadOnly Property vsRequiredMediaURLColumn As DataColumn
            Get
                Return Me.columnvsRequiredMediaURL
            End Get
        End Property
        
        Friend ReadOnly Property dtVersionDateColumn As DataColumn
            Get
                Return Me.columndtVersionDate
            End Get
        End Property
        
        Friend ReadOnly Property lVersionCountColumn As DataColumn
            Get
                Return Me.columnlVersionCount
            End Get
        End Property
        
        Friend ReadOnly Property lDownloadsColumn As DataColumn
            Get
                Return Me.columnlDownloads
            End Get
        End Property
        
        Friend ReadOnly Property AssetIDColumn As DataColumn
            Get
                Return Me.columnAssetID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblScriptsRow
            Get
                Return CType(Me.Rows(index),tblScriptsRow)
            End Get
        End Property
        
        Public Event tblScriptsRowChanged As tblScriptsRowChangeEventHandler
        
        Public Event tblScriptsRowChanging As tblScriptsRowChangeEventHandler
        
        Public Event tblScriptsRowDeleted As tblScriptsRowChangeEventHandler
        
        Public Event tblScriptsRowDeleting As tblScriptsRowChangeEventHandler
        
        Public Overloads Sub AddtblScriptsRow(ByVal row As tblScriptsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblScriptsRow( _
                    ByVal parenttblUsersRowByUsersToScripts As tblUsersRow,  _
                    ByVal vsPath As String,  _
                    ByVal vsFileName As String,  _
                    ByVal dtSubmitDate As Date,  _
                    ByVal dtApproveDate As Date,  _
                    ByVal vsFriendlyName As String,  _
                    ByVal vsDescription As String,  _
                    ByVal parenttblStatusCodesRowByStatusCodesToScripts As tblStatusCodesRow,  _
                    ByVal parenttblFormatsRowByFormatsToScripts As tblFormatsRow,  _
                    ByVal lScriptSize As Integer,  _
                    ByVal parenttblSoftwareVersionsRowBySoftwareVersionsToScripts As tblSoftwareVersionsRow,  _
                    ByVal vsRequiredMediaURL As String,  _
                    ByVal dtVersionDate As Date,  _
                    ByVal lVersionCount As Integer,  _
                    ByVal lDownloads As Integer,  _
                    ByVal parentAssetItemsRowByAssetItemsToScripts As AssetItemsRow) As tblScriptsRow
            Dim rowtblScriptsRow As tblScriptsRow = CType(Me.NewRow,tblScriptsRow)
            rowtblScriptsRow.ItemArray = New Object() {Nothing, parenttblUsersRowByUsersToScripts(0), vsPath, vsFileName, dtSubmitDate, dtApproveDate, vsFriendlyName, vsDescription, parenttblStatusCodesRowByStatusCodesToScripts(0), parenttblFormatsRowByFormatsToScripts(0), lScriptSize, parenttblSoftwareVersionsRowBySoftwareVersionsToScripts(0), vsRequiredMediaURL, dtVersionDate, lVersionCount, lDownloads, parentAssetItemsRowByAssetItemsToScripts(0)}
            Me.Rows.Add(rowtblScriptsRow)
            Return rowtblScriptsRow
        End Function
        
        Public Function FindByAssetID(ByVal AssetID As Integer) As tblScriptsRow
            Return CType(Me.Rows.Find(New Object() {AssetID}),tblScriptsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblScriptsDataTable = CType(MyBase.Clone,tblScriptsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblScriptsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlScriptID = Me.Columns("lScriptID")
            Me.columnlUserID = Me.Columns("lUserID")
            Me.columnvsPath = Me.Columns("vsPath")
            Me.columnvsFileName = Me.Columns("vsFileName")
            Me.columndtSubmitDate = Me.Columns("dtSubmitDate")
            Me.columndtApproveDate = Me.Columns("dtApproveDate")
            Me.columnvsFriendlyName = Me.Columns("vsFriendlyName")
            Me.columnvsDescription = Me.Columns("vsDescription")
            Me.columnlStatusID = Me.Columns("lStatusID")
            Me.columnlFormatID = Me.Columns("lFormatID")
            Me.columnlScriptSize = Me.Columns("lScriptSize")
            Me.columnlSoftwareVersionID = Me.Columns("lSoftwareVersionID")
            Me.columnvsRequiredMediaURL = Me.Columns("vsRequiredMediaURL")
            Me.columndtVersionDate = Me.Columns("dtVersionDate")
            Me.columnlVersionCount = Me.Columns("lVersionCount")
            Me.columnlDownloads = Me.Columns("lDownloads")
            Me.columnAssetID = Me.Columns("AssetID")
        End Sub
        
        Private Sub InitClass()
            Me.columnlScriptID = New DataColumn("lScriptID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlScriptID)
            Me.columnlUserID = New DataColumn("lUserID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlUserID)
            Me.columnvsPath = New DataColumn("vsPath", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsPath)
            Me.columnvsFileName = New DataColumn("vsFileName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsFileName)
            Me.columndtSubmitDate = New DataColumn("dtSubmitDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtSubmitDate)
            Me.columndtApproveDate = New DataColumn("dtApproveDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtApproveDate)
            Me.columnvsFriendlyName = New DataColumn("vsFriendlyName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsFriendlyName)
            Me.columnvsDescription = New DataColumn("vsDescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsDescription)
            Me.columnlStatusID = New DataColumn("lStatusID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlStatusID)
            Me.columnlFormatID = New DataColumn("lFormatID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlFormatID)
            Me.columnlScriptSize = New DataColumn("lScriptSize", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlScriptSize)
            Me.columnlSoftwareVersionID = New DataColumn("lSoftwareVersionID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlSoftwareVersionID)
            Me.columnvsRequiredMediaURL = New DataColumn("vsRequiredMediaURL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsRequiredMediaURL)
            Me.columndtVersionDate = New DataColumn("dtVersionDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtVersionDate)
            Me.columnlVersionCount = New DataColumn("lVersionCount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlVersionCount)
            Me.columnlDownloads = New DataColumn("lDownloads", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlDownloads)
            Me.columnAssetID = New DataColumn("AssetID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAssetID)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey12", New DataColumn() {Me.columnlScriptID}, false))
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey35", New DataColumn() {Me.columnlScriptID, Me.columnAssetID}, false))
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey38", New DataColumn() {Me.columnAssetID}, true))
            Me.columnlScriptID.AutoIncrement = true
            Me.columnlScriptID.AllowDBNull = false
            Me.columnlScriptID.Unique = true
            Me.columnAssetID.AllowDBNull = false
            Me.columnAssetID.Unique = true
        End Sub
        
        Public Function NewtblScriptsRow() As tblScriptsRow
            Return CType(Me.NewRow,tblScriptsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblScriptsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblScriptsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblScriptsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblScriptsRowChanged(Me, New tblScriptsRowChangeEvent(CType(e.Row,tblScriptsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblScriptsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblScriptsRowChanging(Me, New tblScriptsRowChangeEvent(CType(e.Row,tblScriptsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblScriptsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblScriptsRowDeleted(Me, New tblScriptsRowChangeEvent(CType(e.Row,tblScriptsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblScriptsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblScriptsRowDeleting(Me, New tblScriptsRowChangeEvent(CType(e.Row,tblScriptsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblScriptsRow(ByVal row As tblScriptsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblScriptsRow
        Inherits DataRow
        
        Private tabletblScripts As tblScriptsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblScripts = CType(Me.Table,tblScriptsDataTable)
        End Sub
        
        Public Property lScriptID As Integer
            Get
                Return CType(Me(Me.tabletblScripts.lScriptIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblScripts.lScriptIDColumn) = value
            End Set
        End Property
        
        Public Property lUserID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.lUserIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.lUserIDColumn) = value
            End Set
        End Property
        
        Public Property vsPath As String
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.vsPathColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.vsPathColumn) = value
            End Set
        End Property
        
        Public Property vsFileName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.vsFileNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.vsFileNameColumn) = value
            End Set
        End Property
        
        Public Property dtSubmitDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.dtSubmitDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.dtSubmitDateColumn) = value
            End Set
        End Property
        
        Public Property dtApproveDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.dtApproveDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.dtApproveDateColumn) = value
            End Set
        End Property
        
        Public Property vsFriendlyName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.vsFriendlyNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.vsFriendlyNameColumn) = value
            End Set
        End Property
        
        Public Property vsDescription As String
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.vsDescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.vsDescriptionColumn) = value
            End Set
        End Property
        
        Public Property lStatusID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.lStatusIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.lStatusIDColumn) = value
            End Set
        End Property
        
        Public Property lFormatID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.lFormatIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.lFormatIDColumn) = value
            End Set
        End Property
        
        Public Property lScriptSize As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.lScriptSizeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.lScriptSizeColumn) = value
            End Set
        End Property
        
        Public Property lSoftwareVersionID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.lSoftwareVersionIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.lSoftwareVersionIDColumn) = value
            End Set
        End Property
        
        Public Property vsRequiredMediaURL As String
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.vsRequiredMediaURLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.vsRequiredMediaURLColumn) = value
            End Set
        End Property
        
        Public Property dtVersionDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.dtVersionDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.dtVersionDateColumn) = value
            End Set
        End Property
        
        Public Property lVersionCount As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.lVersionCountColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.lVersionCountColumn) = value
            End Set
        End Property
        
        Public Property lDownloads As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblScripts.lDownloadsColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblScripts.lDownloadsColumn) = value
            End Set
        End Property
        
        Public Property AssetID As Integer
            Get
                Return CType(Me(Me.tabletblScripts.AssetIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblScripts.AssetIDColumn) = value
            End Set
        End Property
        
        Public Property tblUsersRow As tblUsersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("UsersToScripts")),tblUsersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("UsersToScripts"))
            End Set
        End Property
        
        Public Property tblStatusCodesRow As tblStatusCodesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("StatusCodesToScripts")),tblStatusCodesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("StatusCodesToScripts"))
            End Set
        End Property
        
        Public Property tblFormatsRow As tblFormatsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FormatsToScripts")),tblFormatsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FormatsToScripts"))
            End Set
        End Property
        
        Public Property AssetItemsRow As AssetItemsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AssetItemsToScripts")),AssetItemsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AssetItemsToScripts"))
            End Set
        End Property
        
        Public Property tblSoftwareVersionsRow As tblSoftwareVersionsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SoftwareVersionsToScripts")),tblSoftwareVersionsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SoftwareVersionsToScripts"))
            End Set
        End Property
        
        Public Function IslUserIDNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.lUserIDColumn)
        End Function
        
        Public Sub SetlUserIDNull()
            Me(Me.tabletblScripts.lUserIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsPathNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.vsPathColumn)
        End Function
        
        Public Sub SetvsPathNull()
            Me(Me.tabletblScripts.vsPathColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsFileNameNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.vsFileNameColumn)
        End Function
        
        Public Sub SetvsFileNameNull()
            Me(Me.tabletblScripts.vsFileNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtSubmitDateNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.dtSubmitDateColumn)
        End Function
        
        Public Sub SetdtSubmitDateNull()
            Me(Me.tabletblScripts.dtSubmitDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtApproveDateNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.dtApproveDateColumn)
        End Function
        
        Public Sub SetdtApproveDateNull()
            Me(Me.tabletblScripts.dtApproveDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsFriendlyNameNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.vsFriendlyNameColumn)
        End Function
        
        Public Sub SetvsFriendlyNameNull()
            Me(Me.tabletblScripts.vsFriendlyNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.vsDescriptionColumn)
        End Function
        
        Public Sub SetvsDescriptionNull()
            Me(Me.tabletblScripts.vsDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslStatusIDNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.lStatusIDColumn)
        End Function
        
        Public Sub SetlStatusIDNull()
            Me(Me.tabletblScripts.lStatusIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslFormatIDNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.lFormatIDColumn)
        End Function
        
        Public Sub SetlFormatIDNull()
            Me(Me.tabletblScripts.lFormatIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslScriptSizeNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.lScriptSizeColumn)
        End Function
        
        Public Sub SetlScriptSizeNull()
            Me(Me.tabletblScripts.lScriptSizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslSoftwareVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.lSoftwareVersionIDColumn)
        End Function
        
        Public Sub SetlSoftwareVersionIDNull()
            Me(Me.tabletblScripts.lSoftwareVersionIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsRequiredMediaURLNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.vsRequiredMediaURLColumn)
        End Function
        
        Public Sub SetvsRequiredMediaURLNull()
            Me(Me.tabletblScripts.vsRequiredMediaURLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtVersionDateNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.dtVersionDateColumn)
        End Function
        
        Public Sub SetdtVersionDateNull()
            Me(Me.tabletblScripts.dtVersionDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslVersionCountNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.lVersionCountColumn)
        End Function
        
        Public Sub SetlVersionCountNull()
            Me(Me.tabletblScripts.lVersionCountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslDownloadsNull() As Boolean
            Return Me.IsNull(Me.tabletblScripts.lDownloadsColumn)
        End Function
        
        Public Sub SetlDownloadsNull()
            Me(Me.tabletblScripts.lDownloadsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblScriptsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblScriptsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblScriptsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblScriptsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblProjectsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlProjectID As DataColumn
        
        Private columnlUserID As DataColumn
        
        Private columnvsPath As DataColumn
        
        Private columnvsFileName As DataColumn
        
        Private columndtSubmitDate As DataColumn
        
        Private columndtApproveDate As DataColumn
        
        Private columnvsFriendlyName As DataColumn
        
        Private columnvsDescription As DataColumn
        
        Private columnlStatusID As DataColumn
        
        Private columnlFormatID As DataColumn
        
        Private columnlFileSize As DataColumn
        
        Private columnlSoftwareVersionID As DataColumn
        
        Private columnvsRenderedURL As DataColumn
        
        Private columnvsRequiredMediaURL As DataColumn
        
        Private columndtVersionDate As DataColumn
        
        Private columnlVersionCount As DataColumn
        
        Private columnlDownloads As DataColumn
        
        Private columnAssetID As DataColumn
        
        Friend Sub New()
            MyBase.New("tblProjects")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lProjectIDColumn As DataColumn
            Get
                Return Me.columnlProjectID
            End Get
        End Property
        
        Friend ReadOnly Property lUserIDColumn As DataColumn
            Get
                Return Me.columnlUserID
            End Get
        End Property
        
        Friend ReadOnly Property vsPathColumn As DataColumn
            Get
                Return Me.columnvsPath
            End Get
        End Property
        
        Friend ReadOnly Property vsFileNameColumn As DataColumn
            Get
                Return Me.columnvsFileName
            End Get
        End Property
        
        Friend ReadOnly Property dtSubmitDateColumn As DataColumn
            Get
                Return Me.columndtSubmitDate
            End Get
        End Property
        
        Friend ReadOnly Property dtApproveDateColumn As DataColumn
            Get
                Return Me.columndtApproveDate
            End Get
        End Property
        
        Friend ReadOnly Property vsFriendlyNameColumn As DataColumn
            Get
                Return Me.columnvsFriendlyName
            End Get
        End Property
        
        Friend ReadOnly Property vsDescriptionColumn As DataColumn
            Get
                Return Me.columnvsDescription
            End Get
        End Property
        
        Friend ReadOnly Property lStatusIDColumn As DataColumn
            Get
                Return Me.columnlStatusID
            End Get
        End Property
        
        Friend ReadOnly Property lFormatIDColumn As DataColumn
            Get
                Return Me.columnlFormatID
            End Get
        End Property
        
        Friend ReadOnly Property lFileSizeColumn As DataColumn
            Get
                Return Me.columnlFileSize
            End Get
        End Property
        
        Friend ReadOnly Property lSoftwareVersionIDColumn As DataColumn
            Get
                Return Me.columnlSoftwareVersionID
            End Get
        End Property
        
        Friend ReadOnly Property vsRenderedURLColumn As DataColumn
            Get
                Return Me.columnvsRenderedURL
            End Get
        End Property
        
        Friend ReadOnly Property vsRequiredMediaURLColumn As DataColumn
            Get
                Return Me.columnvsRequiredMediaURL
            End Get
        End Property
        
        Friend ReadOnly Property dtVersionDateColumn As DataColumn
            Get
                Return Me.columndtVersionDate
            End Get
        End Property
        
        Friend ReadOnly Property lVersionCountColumn As DataColumn
            Get
                Return Me.columnlVersionCount
            End Get
        End Property
        
        Friend ReadOnly Property lDownloadsColumn As DataColumn
            Get
                Return Me.columnlDownloads
            End Get
        End Property
        
        Friend ReadOnly Property AssetIDColumn As DataColumn
            Get
                Return Me.columnAssetID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblProjectsRow
            Get
                Return CType(Me.Rows(index),tblProjectsRow)
            End Get
        End Property
        
        Public Event tblProjectsRowChanged As tblProjectsRowChangeEventHandler
        
        Public Event tblProjectsRowChanging As tblProjectsRowChangeEventHandler
        
        Public Event tblProjectsRowDeleted As tblProjectsRowChangeEventHandler
        
        Public Event tblProjectsRowDeleting As tblProjectsRowChangeEventHandler
        
        Public Overloads Sub AddtblProjectsRow(ByVal row As tblProjectsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblProjectsRow( _
                    ByVal parenttblUsersRowByUsersToProjects As tblUsersRow,  _
                    ByVal vsPath As String,  _
                    ByVal vsFileName As String,  _
                    ByVal dtSubmitDate As Date,  _
                    ByVal dtApproveDate As Date,  _
                    ByVal vsFriendlyName As String,  _
                    ByVal vsDescription As String,  _
                    ByVal parenttblStatusCodesRowByStatusCodesToProjects As tblStatusCodesRow,  _
                    ByVal parenttblFormatsRowByFormatsToProjects As tblFormatsRow,  _
                    ByVal lFileSize As Integer,  _
                    ByVal parenttblSoftwareVersionsRowBySoftwareVersionsToProjects As tblSoftwareVersionsRow,  _
                    ByVal vsRenderedURL As String,  _
                    ByVal vsRequiredMediaURL As String,  _
                    ByVal dtVersionDate As Date,  _
                    ByVal lVersionCount As Integer,  _
                    ByVal lDownloads As Integer,  _
                    ByVal parentAssetItemsRowByAssetItemsToProjects As AssetItemsRow) As tblProjectsRow
            Dim rowtblProjectsRow As tblProjectsRow = CType(Me.NewRow,tblProjectsRow)
            rowtblProjectsRow.ItemArray = New Object() {Nothing, parenttblUsersRowByUsersToProjects(0), vsPath, vsFileName, dtSubmitDate, dtApproveDate, vsFriendlyName, vsDescription, parenttblStatusCodesRowByStatusCodesToProjects(0), parenttblFormatsRowByFormatsToProjects(0), lFileSize, parenttblSoftwareVersionsRowBySoftwareVersionsToProjects(0), vsRenderedURL, vsRequiredMediaURL, dtVersionDate, lVersionCount, lDownloads, parentAssetItemsRowByAssetItemsToProjects(0)}
            Me.Rows.Add(rowtblProjectsRow)
            Return rowtblProjectsRow
        End Function
        
        Public Function FindByAssetID(ByVal AssetID As Integer) As tblProjectsRow
            Return CType(Me.Rows.Find(New Object() {AssetID}),tblProjectsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblProjectsDataTable = CType(MyBase.Clone,tblProjectsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblProjectsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlProjectID = Me.Columns("lProjectID")
            Me.columnlUserID = Me.Columns("lUserID")
            Me.columnvsPath = Me.Columns("vsPath")
            Me.columnvsFileName = Me.Columns("vsFileName")
            Me.columndtSubmitDate = Me.Columns("dtSubmitDate")
            Me.columndtApproveDate = Me.Columns("dtApproveDate")
            Me.columnvsFriendlyName = Me.Columns("vsFriendlyName")
            Me.columnvsDescription = Me.Columns("vsDescription")
            Me.columnlStatusID = Me.Columns("lStatusID")
            Me.columnlFormatID = Me.Columns("lFormatID")
            Me.columnlFileSize = Me.Columns("lFileSize")
            Me.columnlSoftwareVersionID = Me.Columns("lSoftwareVersionID")
            Me.columnvsRenderedURL = Me.Columns("vsRenderedURL")
            Me.columnvsRequiredMediaURL = Me.Columns("vsRequiredMediaURL")
            Me.columndtVersionDate = Me.Columns("dtVersionDate")
            Me.columnlVersionCount = Me.Columns("lVersionCount")
            Me.columnlDownloads = Me.Columns("lDownloads")
            Me.columnAssetID = Me.Columns("AssetID")
        End Sub
        
        Private Sub InitClass()
            Me.columnlProjectID = New DataColumn("lProjectID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlProjectID)
            Me.columnlUserID = New DataColumn("lUserID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlUserID)
            Me.columnvsPath = New DataColumn("vsPath", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsPath)
            Me.columnvsFileName = New DataColumn("vsFileName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsFileName)
            Me.columndtSubmitDate = New DataColumn("dtSubmitDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtSubmitDate)
            Me.columndtApproveDate = New DataColumn("dtApproveDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtApproveDate)
            Me.columnvsFriendlyName = New DataColumn("vsFriendlyName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsFriendlyName)
            Me.columnvsDescription = New DataColumn("vsDescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsDescription)
            Me.columnlStatusID = New DataColumn("lStatusID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlStatusID)
            Me.columnlFormatID = New DataColumn("lFormatID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlFormatID)
            Me.columnlFileSize = New DataColumn("lFileSize", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlFileSize)
            Me.columnlSoftwareVersionID = New DataColumn("lSoftwareVersionID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlSoftwareVersionID)
            Me.columnvsRenderedURL = New DataColumn("vsRenderedURL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsRenderedURL)
            Me.columnvsRequiredMediaURL = New DataColumn("vsRequiredMediaURL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsRequiredMediaURL)
            Me.columndtVersionDate = New DataColumn("dtVersionDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtVersionDate)
            Me.columnlVersionCount = New DataColumn("lVersionCount", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlVersionCount)
            Me.columnlDownloads = New DataColumn("lDownloads", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlDownloads)
            Me.columnAssetID = New DataColumn("AssetID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAssetID)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey13", New DataColumn() {Me.columnlProjectID}, false))
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey34", New DataColumn() {Me.columnlProjectID, Me.columnAssetID}, false))
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey37", New DataColumn() {Me.columnAssetID}, true))
            Me.columnlProjectID.AutoIncrement = true
            Me.columnlProjectID.AllowDBNull = false
            Me.columnlProjectID.Unique = true
            Me.columnAssetID.AllowDBNull = false
            Me.columnAssetID.Unique = true
        End Sub
        
        Public Function NewtblProjectsRow() As tblProjectsRow
            Return CType(Me.NewRow,tblProjectsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblProjectsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblProjectsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblProjectsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblProjectsRowChanged(Me, New tblProjectsRowChangeEvent(CType(e.Row,tblProjectsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblProjectsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblProjectsRowChanging(Me, New tblProjectsRowChangeEvent(CType(e.Row,tblProjectsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblProjectsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblProjectsRowDeleted(Me, New tblProjectsRowChangeEvent(CType(e.Row,tblProjectsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblProjectsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblProjectsRowDeleting(Me, New tblProjectsRowChangeEvent(CType(e.Row,tblProjectsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblProjectsRow(ByVal row As tblProjectsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblProjectsRow
        Inherits DataRow
        
        Private tabletblProjects As tblProjectsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblProjects = CType(Me.Table,tblProjectsDataTable)
        End Sub
        
        Public Property lProjectID As Integer
            Get
                Return CType(Me(Me.tabletblProjects.lProjectIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblProjects.lProjectIDColumn) = value
            End Set
        End Property
        
        Public Property lUserID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.lUserIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.lUserIDColumn) = value
            End Set
        End Property
        
        Public Property vsPath As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.vsPathColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.vsPathColumn) = value
            End Set
        End Property
        
        Public Property vsFileName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.vsFileNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.vsFileNameColumn) = value
            End Set
        End Property
        
        Public Property dtSubmitDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.dtSubmitDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.dtSubmitDateColumn) = value
            End Set
        End Property
        
        Public Property dtApproveDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.dtApproveDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.dtApproveDateColumn) = value
            End Set
        End Property
        
        Public Property vsFriendlyName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.vsFriendlyNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.vsFriendlyNameColumn) = value
            End Set
        End Property
        
        Public Property vsDescription As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.vsDescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.vsDescriptionColumn) = value
            End Set
        End Property
        
        Public Property lStatusID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.lStatusIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.lStatusIDColumn) = value
            End Set
        End Property
        
        Public Property lFormatID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.lFormatIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.lFormatIDColumn) = value
            End Set
        End Property
        
        Public Property lFileSize As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.lFileSizeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.lFileSizeColumn) = value
            End Set
        End Property
        
        Public Property lSoftwareVersionID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.lSoftwareVersionIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.lSoftwareVersionIDColumn) = value
            End Set
        End Property
        
        Public Property vsRenderedURL As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.vsRenderedURLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.vsRenderedURLColumn) = value
            End Set
        End Property
        
        Public Property vsRequiredMediaURL As String
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.vsRequiredMediaURLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.vsRequiredMediaURLColumn) = value
            End Set
        End Property
        
        Public Property dtVersionDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.dtVersionDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.dtVersionDateColumn) = value
            End Set
        End Property
        
        Public Property lVersionCount As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.lVersionCountColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.lVersionCountColumn) = value
            End Set
        End Property
        
        Public Property lDownloads As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblProjects.lDownloadsColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblProjects.lDownloadsColumn) = value
            End Set
        End Property
        
        Public Property AssetID As Integer
            Get
                Return CType(Me(Me.tabletblProjects.AssetIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblProjects.AssetIDColumn) = value
            End Set
        End Property
        
        Public Property tblUsersRow As tblUsersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("UsersToProjects")),tblUsersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("UsersToProjects"))
            End Set
        End Property
        
        Public Property tblStatusCodesRow As tblStatusCodesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("StatusCodesToProjects")),tblStatusCodesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("StatusCodesToProjects"))
            End Set
        End Property
        
        Public Property tblSoftwareVersionsRow As tblSoftwareVersionsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SoftwareVersionsToProjects")),tblSoftwareVersionsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SoftwareVersionsToProjects"))
            End Set
        End Property
        
        Public Property tblFormatsRow As tblFormatsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FormatsToProjects")),tblFormatsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FormatsToProjects"))
            End Set
        End Property
        
        Public Property AssetItemsRow As AssetItemsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AssetItemsToProjects")),AssetItemsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AssetItemsToProjects"))
            End Set
        End Property
        
        Public Function IslUserIDNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.lUserIDColumn)
        End Function
        
        Public Sub SetlUserIDNull()
            Me(Me.tabletblProjects.lUserIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsPathNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.vsPathColumn)
        End Function
        
        Public Sub SetvsPathNull()
            Me(Me.tabletblProjects.vsPathColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsFileNameNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.vsFileNameColumn)
        End Function
        
        Public Sub SetvsFileNameNull()
            Me(Me.tabletblProjects.vsFileNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtSubmitDateNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.dtSubmitDateColumn)
        End Function
        
        Public Sub SetdtSubmitDateNull()
            Me(Me.tabletblProjects.dtSubmitDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtApproveDateNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.dtApproveDateColumn)
        End Function
        
        Public Sub SetdtApproveDateNull()
            Me(Me.tabletblProjects.dtApproveDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsFriendlyNameNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.vsFriendlyNameColumn)
        End Function
        
        Public Sub SetvsFriendlyNameNull()
            Me(Me.tabletblProjects.vsFriendlyNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.vsDescriptionColumn)
        End Function
        
        Public Sub SetvsDescriptionNull()
            Me(Me.tabletblProjects.vsDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslStatusIDNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.lStatusIDColumn)
        End Function
        
        Public Sub SetlStatusIDNull()
            Me(Me.tabletblProjects.lStatusIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslFormatIDNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.lFormatIDColumn)
        End Function
        
        Public Sub SetlFormatIDNull()
            Me(Me.tabletblProjects.lFormatIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslFileSizeNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.lFileSizeColumn)
        End Function
        
        Public Sub SetlFileSizeNull()
            Me(Me.tabletblProjects.lFileSizeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslSoftwareVersionIDNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.lSoftwareVersionIDColumn)
        End Function
        
        Public Sub SetlSoftwareVersionIDNull()
            Me(Me.tabletblProjects.lSoftwareVersionIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsRenderedURLNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.vsRenderedURLColumn)
        End Function
        
        Public Sub SetvsRenderedURLNull()
            Me(Me.tabletblProjects.vsRenderedURLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsRequiredMediaURLNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.vsRequiredMediaURLColumn)
        End Function
        
        Public Sub SetvsRequiredMediaURLNull()
            Me(Me.tabletblProjects.vsRequiredMediaURLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtVersionDateNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.dtVersionDateColumn)
        End Function
        
        Public Sub SetdtVersionDateNull()
            Me(Me.tabletblProjects.dtVersionDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslVersionCountNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.lVersionCountColumn)
        End Function
        
        Public Sub SetlVersionCountNull()
            Me(Me.tabletblProjects.lVersionCountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslDownloadsNull() As Boolean
            Return Me.IsNull(Me.tabletblProjects.lDownloadsColumn)
        End Function
        
        Public Sub SetlDownloadsNull()
            Me(Me.tabletblProjects.lDownloadsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblProjectPluginsRows() As tblProjectPluginsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ProjectsToProjectPlugins")),tblProjectPluginsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblProjectsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblProjectsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblProjectsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblProjectsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblFormatsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlFormatID As DataColumn
        
        Private columnvsFormatDescription As DataColumn
        
        Friend Sub New()
            MyBase.New("tblFormats")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lFormatIDColumn As DataColumn
            Get
                Return Me.columnlFormatID
            End Get
        End Property
        
        Friend ReadOnly Property vsFormatDescriptionColumn As DataColumn
            Get
                Return Me.columnvsFormatDescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblFormatsRow
            Get
                Return CType(Me.Rows(index),tblFormatsRow)
            End Get
        End Property
        
        Public Event tblFormatsRowChanged As tblFormatsRowChangeEventHandler
        
        Public Event tblFormatsRowChanging As tblFormatsRowChangeEventHandler
        
        Public Event tblFormatsRowDeleted As tblFormatsRowChangeEventHandler
        
        Public Event tblFormatsRowDeleting As tblFormatsRowChangeEventHandler
        
        Public Overloads Sub AddtblFormatsRow(ByVal row As tblFormatsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblFormatsRow(ByVal vsFormatDescription As String) As tblFormatsRow
            Dim rowtblFormatsRow As tblFormatsRow = CType(Me.NewRow,tblFormatsRow)
            rowtblFormatsRow.ItemArray = New Object() {Nothing, vsFormatDescription}
            Me.Rows.Add(rowtblFormatsRow)
            Return rowtblFormatsRow
        End Function
        
        Public Function FindBylFormatID(ByVal lFormatID As Integer) As tblFormatsRow
            Return CType(Me.Rows.Find(New Object() {lFormatID}),tblFormatsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblFormatsDataTable = CType(MyBase.Clone,tblFormatsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblFormatsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlFormatID = Me.Columns("lFormatID")
            Me.columnvsFormatDescription = Me.Columns("vsFormatDescription")
        End Sub
        
        Private Sub InitClass()
            Me.columnlFormatID = New DataColumn("lFormatID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlFormatID)
            Me.columnvsFormatDescription = New DataColumn("vsFormatDescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsFormatDescription)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey14", New DataColumn() {Me.columnlFormatID}, true))
            Me.columnlFormatID.AutoIncrement = true
            Me.columnlFormatID.AllowDBNull = false
            Me.columnlFormatID.Unique = true
        End Sub
        
        Public Function NewtblFormatsRow() As tblFormatsRow
            Return CType(Me.NewRow,tblFormatsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblFormatsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblFormatsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblFormatsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblFormatsRowChanged(Me, New tblFormatsRowChangeEvent(CType(e.Row,tblFormatsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblFormatsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblFormatsRowChanging(Me, New tblFormatsRowChangeEvent(CType(e.Row,tblFormatsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblFormatsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblFormatsRowDeleted(Me, New tblFormatsRowChangeEvent(CType(e.Row,tblFormatsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblFormatsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblFormatsRowDeleting(Me, New tblFormatsRowChangeEvent(CType(e.Row,tblFormatsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblFormatsRow(ByVal row As tblFormatsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblFormatsRow
        Inherits DataRow
        
        Private tabletblFormats As tblFormatsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblFormats = CType(Me.Table,tblFormatsDataTable)
        End Sub
        
        Public Property lFormatID As Integer
            Get
                Return CType(Me(Me.tabletblFormats.lFormatIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblFormats.lFormatIDColumn) = value
            End Set
        End Property
        
        Public Property vsFormatDescription As String
            Get
                Try 
                    Return CType(Me(Me.tabletblFormats.vsFormatDescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblFormats.vsFormatDescriptionColumn) = value
            End Set
        End Property
        
        Public Function IsvsFormatDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblFormats.vsFormatDescriptionColumn)
        End Function
        
        Public Sub SetvsFormatDescriptionNull()
            Me(Me.tabletblFormats.vsFormatDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblProjectsRows() As tblProjectsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FormatsToProjects")),tblProjectsRow())
        End Function
        
        Public Function GettblScriptsRows() As tblScriptsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("FormatsToScripts")),tblScriptsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblFormatsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblFormatsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblFormatsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblFormatsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblItemTypesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlItemTypeID As DataColumn
        
        Private columnvsDescription As DataColumn
        
        Friend Sub New()
            MyBase.New("tblItemTypes")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lItemTypeIDColumn As DataColumn
            Get
                Return Me.columnlItemTypeID
            End Get
        End Property
        
        Friend ReadOnly Property vsDescriptionColumn As DataColumn
            Get
                Return Me.columnvsDescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblItemTypesRow
            Get
                Return CType(Me.Rows(index),tblItemTypesRow)
            End Get
        End Property
        
        Public Event tblItemTypesRowChanged As tblItemTypesRowChangeEventHandler
        
        Public Event tblItemTypesRowChanging As tblItemTypesRowChangeEventHandler
        
        Public Event tblItemTypesRowDeleted As tblItemTypesRowChangeEventHandler
        
        Public Event tblItemTypesRowDeleting As tblItemTypesRowChangeEventHandler
        
        Public Overloads Sub AddtblItemTypesRow(ByVal row As tblItemTypesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblItemTypesRow(ByVal vsDescription As String) As tblItemTypesRow
            Dim rowtblItemTypesRow As tblItemTypesRow = CType(Me.NewRow,tblItemTypesRow)
            rowtblItemTypesRow.ItemArray = New Object() {Nothing, vsDescription}
            Me.Rows.Add(rowtblItemTypesRow)
            Return rowtblItemTypesRow
        End Function
        
        Public Function FindBylItemTypeID(ByVal lItemTypeID As Integer) As tblItemTypesRow
            Return CType(Me.Rows.Find(New Object() {lItemTypeID}),tblItemTypesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblItemTypesDataTable = CType(MyBase.Clone,tblItemTypesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblItemTypesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlItemTypeID = Me.Columns("lItemTypeID")
            Me.columnvsDescription = Me.Columns("vsDescription")
        End Sub
        
        Private Sub InitClass()
            Me.columnlItemTypeID = New DataColumn("lItemTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemTypeID)
            Me.columnvsDescription = New DataColumn("vsDescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsDescription)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey15", New DataColumn() {Me.columnlItemTypeID}, true))
            Me.columnlItemTypeID.AutoIncrement = true
            Me.columnlItemTypeID.AllowDBNull = false
            Me.columnlItemTypeID.Unique = true
        End Sub
        
        Public Function NewtblItemTypesRow() As tblItemTypesRow
            Return CType(Me.NewRow,tblItemTypesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblItemTypesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblItemTypesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblItemTypesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblItemTypesRowChanged(Me, New tblItemTypesRowChangeEvent(CType(e.Row,tblItemTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblItemTypesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblItemTypesRowChanging(Me, New tblItemTypesRowChangeEvent(CType(e.Row,tblItemTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblItemTypesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblItemTypesRowDeleted(Me, New tblItemTypesRowChangeEvent(CType(e.Row,tblItemTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblItemTypesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblItemTypesRowDeleting(Me, New tblItemTypesRowChangeEvent(CType(e.Row,tblItemTypesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblItemTypesRow(ByVal row As tblItemTypesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblItemTypesRow
        Inherits DataRow
        
        Private tabletblItemTypes As tblItemTypesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblItemTypes = CType(Me.Table,tblItemTypesDataTable)
        End Sub
        
        Public Property lItemTypeID As Integer
            Get
                Return CType(Me(Me.tabletblItemTypes.lItemTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblItemTypes.lItemTypeIDColumn) = value
            End Set
        End Property
        
        Public Property vsDescription As String
            Get
                Try 
                    Return CType(Me(Me.tabletblItemTypes.vsDescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItemTypes.vsDescriptionColumn) = value
            End Set
        End Property
        
        Public Function IsvsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblItemTypes.vsDescriptionColumn)
        End Function
        
        Public Sub SetvsDescriptionNull()
            Me(Me.tabletblItemTypes.vsDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblRankingsRows() As tblRankingsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ItemTypesToRankings")),tblRankingsRow())
        End Function
        
        Public Function GettblCategoryItemTypesRows() As tblCategoryItemTypesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ItemTypesToCategoryItemTypes")),tblCategoryItemTypesRow())
        End Function
        
        Public Function GettblPublisherItemTypesRows() As tblPublisherItemTypesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ItemTypesToPublisherItemTypes")),tblPublisherItemTypesRow())
        End Function
        
        Public Function GettblItemSitesRows() As tblItemSitesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ItemTypesToItemSites")),tblItemSitesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblItemTypesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblItemTypesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblItemTypesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblItemTypesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblProjectPluginsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlProjectID As DataColumn
        
        Private columnlPluginID As DataColumn
        
        Friend Sub New()
            MyBase.New("tblProjectPlugins")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lProjectIDColumn As DataColumn
            Get
                Return Me.columnlProjectID
            End Get
        End Property
        
        Friend ReadOnly Property lPluginIDColumn As DataColumn
            Get
                Return Me.columnlPluginID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblProjectPluginsRow
            Get
                Return CType(Me.Rows(index),tblProjectPluginsRow)
            End Get
        End Property
        
        Public Event tblProjectPluginsRowChanged As tblProjectPluginsRowChangeEventHandler
        
        Public Event tblProjectPluginsRowChanging As tblProjectPluginsRowChangeEventHandler
        
        Public Event tblProjectPluginsRowDeleted As tblProjectPluginsRowChangeEventHandler
        
        Public Event tblProjectPluginsRowDeleting As tblProjectPluginsRowChangeEventHandler
        
        Public Overloads Sub AddtblProjectPluginsRow(ByVal row As tblProjectPluginsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblProjectPluginsRow(ByVal parenttblProjectsRowByProjectsToProjectPlugins As tblProjectsRow, ByVal parenttblPluginsRowByPluginsToProjectPlugins As tblPluginsRow) As tblProjectPluginsRow
            Dim rowtblProjectPluginsRow As tblProjectPluginsRow = CType(Me.NewRow,tblProjectPluginsRow)
            rowtblProjectPluginsRow.ItemArray = New Object() {parenttblProjectsRowByProjectsToProjectPlugins(0), parenttblPluginsRowByPluginsToProjectPlugins(0)}
            Me.Rows.Add(rowtblProjectPluginsRow)
            Return rowtblProjectPluginsRow
        End Function
        
        Public Function FindBylProjectIDlPluginID(ByVal lProjectID As Integer, ByVal lPluginID As Integer) As tblProjectPluginsRow
            Return CType(Me.Rows.Find(New Object() {lProjectID, lPluginID}),tblProjectPluginsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblProjectPluginsDataTable = CType(MyBase.Clone,tblProjectPluginsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblProjectPluginsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlProjectID = Me.Columns("lProjectID")
            Me.columnlPluginID = Me.Columns("lPluginID")
        End Sub
        
        Private Sub InitClass()
            Me.columnlProjectID = New DataColumn("lProjectID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlProjectID)
            Me.columnlPluginID = New DataColumn("lPluginID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlPluginID)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey16", New DataColumn() {Me.columnlProjectID, Me.columnlPluginID}, true))
            Me.columnlProjectID.AllowDBNull = false
            Me.columnlPluginID.AllowDBNull = false
        End Sub
        
        Public Function NewtblProjectPluginsRow() As tblProjectPluginsRow
            Return CType(Me.NewRow,tblProjectPluginsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblProjectPluginsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblProjectPluginsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblProjectPluginsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblProjectPluginsRowChanged(Me, New tblProjectPluginsRowChangeEvent(CType(e.Row,tblProjectPluginsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblProjectPluginsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblProjectPluginsRowChanging(Me, New tblProjectPluginsRowChangeEvent(CType(e.Row,tblProjectPluginsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblProjectPluginsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblProjectPluginsRowDeleted(Me, New tblProjectPluginsRowChangeEvent(CType(e.Row,tblProjectPluginsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblProjectPluginsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblProjectPluginsRowDeleting(Me, New tblProjectPluginsRowChangeEvent(CType(e.Row,tblProjectPluginsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblProjectPluginsRow(ByVal row As tblProjectPluginsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblProjectPluginsRow
        Inherits DataRow
        
        Private tabletblProjectPlugins As tblProjectPluginsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblProjectPlugins = CType(Me.Table,tblProjectPluginsDataTable)
        End Sub
        
        Public Property lProjectID As Integer
            Get
                Return CType(Me(Me.tabletblProjectPlugins.lProjectIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblProjectPlugins.lProjectIDColumn) = value
            End Set
        End Property
        
        Public Property lPluginID As Integer
            Get
                Return CType(Me(Me.tabletblProjectPlugins.lPluginIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblProjectPlugins.lPluginIDColumn) = value
            End Set
        End Property
        
        Public Property tblProjectsRow As tblProjectsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ProjectsToProjectPlugins")),tblProjectsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ProjectsToProjectPlugins"))
            End Set
        End Property
        
        Public Property tblPluginsRow As tblPluginsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PluginsToProjectPlugins")),tblPluginsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PluginsToProjectPlugins"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblProjectPluginsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblProjectPluginsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblProjectPluginsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblProjectPluginsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPluginsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlPluginID As DataColumn
        
        Private columnlPluginPackageID As DataColumn
        
        Private columnvsPluginName As DataColumn
        
        Friend Sub New()
            MyBase.New("tblPlugins")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lPluginIDColumn As DataColumn
            Get
                Return Me.columnlPluginID
            End Get
        End Property
        
        Friend ReadOnly Property lPluginPackageIDColumn As DataColumn
            Get
                Return Me.columnlPluginPackageID
            End Get
        End Property
        
        Friend ReadOnly Property vsPluginNameColumn As DataColumn
            Get
                Return Me.columnvsPluginName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblPluginsRow
            Get
                Return CType(Me.Rows(index),tblPluginsRow)
            End Get
        End Property
        
        Public Event tblPluginsRowChanged As tblPluginsRowChangeEventHandler
        
        Public Event tblPluginsRowChanging As tblPluginsRowChangeEventHandler
        
        Public Event tblPluginsRowDeleted As tblPluginsRowChangeEventHandler
        
        Public Event tblPluginsRowDeleting As tblPluginsRowChangeEventHandler
        
        Public Overloads Sub AddtblPluginsRow(ByVal row As tblPluginsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblPluginsRow(ByVal parenttblPluginPackagesRowByPluginPackagesToPlugins As tblPluginPackagesRow, ByVal vsPluginName As String) As tblPluginsRow
            Dim rowtblPluginsRow As tblPluginsRow = CType(Me.NewRow,tblPluginsRow)
            rowtblPluginsRow.ItemArray = New Object() {Nothing, parenttblPluginPackagesRowByPluginPackagesToPlugins(0), vsPluginName}
            Me.Rows.Add(rowtblPluginsRow)
            Return rowtblPluginsRow
        End Function
        
        Public Function FindBylPluginID(ByVal lPluginID As Integer) As tblPluginsRow
            Return CType(Me.Rows.Find(New Object() {lPluginID}),tblPluginsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblPluginsDataTable = CType(MyBase.Clone,tblPluginsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblPluginsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlPluginID = Me.Columns("lPluginID")
            Me.columnlPluginPackageID = Me.Columns("lPluginPackageID")
            Me.columnvsPluginName = Me.Columns("vsPluginName")
        End Sub
        
        Private Sub InitClass()
            Me.columnlPluginID = New DataColumn("lPluginID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlPluginID)
            Me.columnlPluginPackageID = New DataColumn("lPluginPackageID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlPluginPackageID)
            Me.columnvsPluginName = New DataColumn("vsPluginName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsPluginName)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey17", New DataColumn() {Me.columnlPluginID}, true))
            Me.columnlPluginID.AutoIncrement = true
            Me.columnlPluginID.AllowDBNull = false
            Me.columnlPluginID.Unique = true
        End Sub
        
        Public Function NewtblPluginsRow() As tblPluginsRow
            Return CType(Me.NewRow,tblPluginsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblPluginsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblPluginsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblPluginsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblPluginsRowChanged(Me, New tblPluginsRowChangeEvent(CType(e.Row,tblPluginsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblPluginsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblPluginsRowChanging(Me, New tblPluginsRowChangeEvent(CType(e.Row,tblPluginsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblPluginsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblPluginsRowDeleted(Me, New tblPluginsRowChangeEvent(CType(e.Row,tblPluginsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblPluginsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblPluginsRowDeleting(Me, New tblPluginsRowChangeEvent(CType(e.Row,tblPluginsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblPluginsRow(ByVal row As tblPluginsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPluginsRow
        Inherits DataRow
        
        Private tabletblPlugins As tblPluginsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblPlugins = CType(Me.Table,tblPluginsDataTable)
        End Sub
        
        Public Property lPluginID As Integer
            Get
                Return CType(Me(Me.tabletblPlugins.lPluginIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblPlugins.lPluginIDColumn) = value
            End Set
        End Property
        
        Public Property lPluginPackageID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblPlugins.lPluginPackageIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPlugins.lPluginPackageIDColumn) = value
            End Set
        End Property
        
        Public Property vsPluginName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPlugins.vsPluginNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPlugins.vsPluginNameColumn) = value
            End Set
        End Property
        
        Public Property tblPluginPackagesRow As tblPluginPackagesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PluginPackagesToPlugins")),tblPluginPackagesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PluginPackagesToPlugins"))
            End Set
        End Property
        
        Public Function IslPluginPackageIDNull() As Boolean
            Return Me.IsNull(Me.tabletblPlugins.lPluginPackageIDColumn)
        End Function
        
        Public Sub SetlPluginPackageIDNull()
            Me(Me.tabletblPlugins.lPluginPackageIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsPluginNameNull() As Boolean
            Return Me.IsNull(Me.tabletblPlugins.vsPluginNameColumn)
        End Function
        
        Public Sub SetvsPluginNameNull()
            Me(Me.tabletblPlugins.vsPluginNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblProjectPluginsRows() As tblProjectPluginsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PluginsToProjectPlugins")),tblProjectPluginsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPluginsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblPluginsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblPluginsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblPluginsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPluginPackagesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlPluginPackageID As DataColumn
        
        Private columnvsPluginPackageName As DataColumn
        
        Private columnvsPluginPackageURL As DataColumn
        
        Private columnlPluginTypeID As DataColumn
        
        Private columnbFree As DataColumn
        
        Friend Sub New()
            MyBase.New("tblPluginPackages")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lPluginPackageIDColumn As DataColumn
            Get
                Return Me.columnlPluginPackageID
            End Get
        End Property
        
        Friend ReadOnly Property vsPluginPackageNameColumn As DataColumn
            Get
                Return Me.columnvsPluginPackageName
            End Get
        End Property
        
        Friend ReadOnly Property vsPluginPackageURLColumn As DataColumn
            Get
                Return Me.columnvsPluginPackageURL
            End Get
        End Property
        
        Friend ReadOnly Property lPluginTypeIDColumn As DataColumn
            Get
                Return Me.columnlPluginTypeID
            End Get
        End Property
        
        Friend ReadOnly Property bFreeColumn As DataColumn
            Get
                Return Me.columnbFree
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblPluginPackagesRow
            Get
                Return CType(Me.Rows(index),tblPluginPackagesRow)
            End Get
        End Property
        
        Public Event tblPluginPackagesRowChanged As tblPluginPackagesRowChangeEventHandler
        
        Public Event tblPluginPackagesRowChanging As tblPluginPackagesRowChangeEventHandler
        
        Public Event tblPluginPackagesRowDeleted As tblPluginPackagesRowChangeEventHandler
        
        Public Event tblPluginPackagesRowDeleting As tblPluginPackagesRowChangeEventHandler
        
        Public Overloads Sub AddtblPluginPackagesRow(ByVal row As tblPluginPackagesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblPluginPackagesRow(ByVal vsPluginPackageName As String, ByVal vsPluginPackageURL As String, ByVal parenttblPluginTypesRowByPluginTypesToPluginPackages As tblPluginTypesRow, ByVal bFree As Boolean) As tblPluginPackagesRow
            Dim rowtblPluginPackagesRow As tblPluginPackagesRow = CType(Me.NewRow,tblPluginPackagesRow)
            rowtblPluginPackagesRow.ItemArray = New Object() {Nothing, vsPluginPackageName, vsPluginPackageURL, parenttblPluginTypesRowByPluginTypesToPluginPackages(0), bFree}
            Me.Rows.Add(rowtblPluginPackagesRow)
            Return rowtblPluginPackagesRow
        End Function
        
        Public Function FindBylPluginPackageID(ByVal lPluginPackageID As Integer) As tblPluginPackagesRow
            Return CType(Me.Rows.Find(New Object() {lPluginPackageID}),tblPluginPackagesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblPluginPackagesDataTable = CType(MyBase.Clone,tblPluginPackagesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblPluginPackagesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlPluginPackageID = Me.Columns("lPluginPackageID")
            Me.columnvsPluginPackageName = Me.Columns("vsPluginPackageName")
            Me.columnvsPluginPackageURL = Me.Columns("vsPluginPackageURL")
            Me.columnlPluginTypeID = Me.Columns("lPluginTypeID")
            Me.columnbFree = Me.Columns("bFree")
        End Sub
        
        Private Sub InitClass()
            Me.columnlPluginPackageID = New DataColumn("lPluginPackageID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlPluginPackageID)
            Me.columnvsPluginPackageName = New DataColumn("vsPluginPackageName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsPluginPackageName)
            Me.columnvsPluginPackageURL = New DataColumn("vsPluginPackageURL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsPluginPackageURL)
            Me.columnlPluginTypeID = New DataColumn("lPluginTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlPluginTypeID)
            Me.columnbFree = New DataColumn("bFree", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbFree)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey18", New DataColumn() {Me.columnlPluginPackageID}, true))
            Me.columnlPluginPackageID.AutoIncrement = true
            Me.columnlPluginPackageID.AllowDBNull = false
            Me.columnlPluginPackageID.Unique = true
        End Sub
        
        Public Function NewtblPluginPackagesRow() As tblPluginPackagesRow
            Return CType(Me.NewRow,tblPluginPackagesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblPluginPackagesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblPluginPackagesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblPluginPackagesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblPluginPackagesRowChanged(Me, New tblPluginPackagesRowChangeEvent(CType(e.Row,tblPluginPackagesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblPluginPackagesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblPluginPackagesRowChanging(Me, New tblPluginPackagesRowChangeEvent(CType(e.Row,tblPluginPackagesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblPluginPackagesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblPluginPackagesRowDeleted(Me, New tblPluginPackagesRowChangeEvent(CType(e.Row,tblPluginPackagesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblPluginPackagesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblPluginPackagesRowDeleting(Me, New tblPluginPackagesRowChangeEvent(CType(e.Row,tblPluginPackagesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblPluginPackagesRow(ByVal row As tblPluginPackagesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPluginPackagesRow
        Inherits DataRow
        
        Private tabletblPluginPackages As tblPluginPackagesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblPluginPackages = CType(Me.Table,tblPluginPackagesDataTable)
        End Sub
        
        Public Property lPluginPackageID As Integer
            Get
                Return CType(Me(Me.tabletblPluginPackages.lPluginPackageIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblPluginPackages.lPluginPackageIDColumn) = value
            End Set
        End Property
        
        Public Property vsPluginPackageName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPluginPackages.vsPluginPackageNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPluginPackages.vsPluginPackageNameColumn) = value
            End Set
        End Property
        
        Public Property vsPluginPackageURL As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPluginPackages.vsPluginPackageURLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPluginPackages.vsPluginPackageURLColumn) = value
            End Set
        End Property
        
        Public Property lPluginTypeID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblPluginPackages.lPluginTypeIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPluginPackages.lPluginTypeIDColumn) = value
            End Set
        End Property
        
        Public Property bFree As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblPluginPackages.bFreeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPluginPackages.bFreeColumn) = value
            End Set
        End Property
        
        Public Property tblPluginTypesRow As tblPluginTypesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PluginTypesToPluginPackages")),tblPluginTypesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PluginTypesToPluginPackages"))
            End Set
        End Property
        
        Public Function IsvsPluginPackageNameNull() As Boolean
            Return Me.IsNull(Me.tabletblPluginPackages.vsPluginPackageNameColumn)
        End Function
        
        Public Sub SetvsPluginPackageNameNull()
            Me(Me.tabletblPluginPackages.vsPluginPackageNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsPluginPackageURLNull() As Boolean
            Return Me.IsNull(Me.tabletblPluginPackages.vsPluginPackageURLColumn)
        End Function
        
        Public Sub SetvsPluginPackageURLNull()
            Me(Me.tabletblPluginPackages.vsPluginPackageURLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslPluginTypeIDNull() As Boolean
            Return Me.IsNull(Me.tabletblPluginPackages.lPluginTypeIDColumn)
        End Function
        
        Public Sub SetlPluginTypeIDNull()
            Me(Me.tabletblPluginPackages.lPluginTypeIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbFreeNull() As Boolean
            Return Me.IsNull(Me.tabletblPluginPackages.bFreeColumn)
        End Function
        
        Public Sub SetbFreeNull()
            Me(Me.tabletblPluginPackages.bFreeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblPluginsRows() As tblPluginsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PluginPackagesToPlugins")),tblPluginsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPluginPackagesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblPluginPackagesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblPluginPackagesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblPluginPackagesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPluginTypesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlPluginTypeID As DataColumn
        
        Private columnvsPluginTypeName As DataColumn
        
        Friend Sub New()
            MyBase.New("tblPluginTypes")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lPluginTypeIDColumn As DataColumn
            Get
                Return Me.columnlPluginTypeID
            End Get
        End Property
        
        Friend ReadOnly Property vsPluginTypeNameColumn As DataColumn
            Get
                Return Me.columnvsPluginTypeName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblPluginTypesRow
            Get
                Return CType(Me.Rows(index),tblPluginTypesRow)
            End Get
        End Property
        
        Public Event tblPluginTypesRowChanged As tblPluginTypesRowChangeEventHandler
        
        Public Event tblPluginTypesRowChanging As tblPluginTypesRowChangeEventHandler
        
        Public Event tblPluginTypesRowDeleted As tblPluginTypesRowChangeEventHandler
        
        Public Event tblPluginTypesRowDeleting As tblPluginTypesRowChangeEventHandler
        
        Public Overloads Sub AddtblPluginTypesRow(ByVal row As tblPluginTypesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblPluginTypesRow(ByVal vsPluginTypeName As String) As tblPluginTypesRow
            Dim rowtblPluginTypesRow As tblPluginTypesRow = CType(Me.NewRow,tblPluginTypesRow)
            rowtblPluginTypesRow.ItemArray = New Object() {Nothing, vsPluginTypeName}
            Me.Rows.Add(rowtblPluginTypesRow)
            Return rowtblPluginTypesRow
        End Function
        
        Public Function FindBylPluginTypeID(ByVal lPluginTypeID As Integer) As tblPluginTypesRow
            Return CType(Me.Rows.Find(New Object() {lPluginTypeID}),tblPluginTypesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblPluginTypesDataTable = CType(MyBase.Clone,tblPluginTypesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblPluginTypesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlPluginTypeID = Me.Columns("lPluginTypeID")
            Me.columnvsPluginTypeName = Me.Columns("vsPluginTypeName")
        End Sub
        
        Private Sub InitClass()
            Me.columnlPluginTypeID = New DataColumn("lPluginTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlPluginTypeID)
            Me.columnvsPluginTypeName = New DataColumn("vsPluginTypeName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsPluginTypeName)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey19", New DataColumn() {Me.columnlPluginTypeID}, true))
            Me.columnlPluginTypeID.AutoIncrement = true
            Me.columnlPluginTypeID.AllowDBNull = false
            Me.columnlPluginTypeID.Unique = true
        End Sub
        
        Public Function NewtblPluginTypesRow() As tblPluginTypesRow
            Return CType(Me.NewRow,tblPluginTypesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblPluginTypesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblPluginTypesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblPluginTypesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblPluginTypesRowChanged(Me, New tblPluginTypesRowChangeEvent(CType(e.Row,tblPluginTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblPluginTypesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblPluginTypesRowChanging(Me, New tblPluginTypesRowChangeEvent(CType(e.Row,tblPluginTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblPluginTypesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblPluginTypesRowDeleted(Me, New tblPluginTypesRowChangeEvent(CType(e.Row,tblPluginTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblPluginTypesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblPluginTypesRowDeleting(Me, New tblPluginTypesRowChangeEvent(CType(e.Row,tblPluginTypesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblPluginTypesRow(ByVal row As tblPluginTypesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPluginTypesRow
        Inherits DataRow
        
        Private tabletblPluginTypes As tblPluginTypesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblPluginTypes = CType(Me.Table,tblPluginTypesDataTable)
        End Sub
        
        Public Property lPluginTypeID As Integer
            Get
                Return CType(Me(Me.tabletblPluginTypes.lPluginTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblPluginTypes.lPluginTypeIDColumn) = value
            End Set
        End Property
        
        Public Property vsPluginTypeName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblPluginTypes.vsPluginTypeNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblPluginTypes.vsPluginTypeNameColumn) = value
            End Set
        End Property
        
        Public Function IsvsPluginTypeNameNull() As Boolean
            Return Me.IsNull(Me.tabletblPluginTypes.vsPluginTypeNameColumn)
        End Function
        
        Public Sub SetvsPluginTypeNameNull()
            Me(Me.tabletblPluginTypes.vsPluginTypeNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblPluginPackagesRows() As tblPluginPackagesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("PluginTypesToPluginPackages")),tblPluginPackagesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPluginTypesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblPluginTypesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblPluginTypesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblPluginTypesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPublisherItemTypesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlPublisherID As DataColumn
        
        Private columnlItemTypeID As DataColumn
        
        Friend Sub New()
            MyBase.New("tblPublisherItemTypes")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lPublisherIDColumn As DataColumn
            Get
                Return Me.columnlPublisherID
            End Get
        End Property
        
        Friend ReadOnly Property lItemTypeIDColumn As DataColumn
            Get
                Return Me.columnlItemTypeID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblPublisherItemTypesRow
            Get
                Return CType(Me.Rows(index),tblPublisherItemTypesRow)
            End Get
        End Property
        
        Public Event tblPublisherItemTypesRowChanged As tblPublisherItemTypesRowChangeEventHandler
        
        Public Event tblPublisherItemTypesRowChanging As tblPublisherItemTypesRowChangeEventHandler
        
        Public Event tblPublisherItemTypesRowDeleted As tblPublisherItemTypesRowChangeEventHandler
        
        Public Event tblPublisherItemTypesRowDeleting As tblPublisherItemTypesRowChangeEventHandler
        
        Public Overloads Sub AddtblPublisherItemTypesRow(ByVal row As tblPublisherItemTypesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblPublisherItemTypesRow(ByVal parenttblPublishersRowByPublishersToPublisherItemTypes As tblPublishersRow, ByVal parenttblItemTypesRowByItemTypesToPublisherItemTypes As tblItemTypesRow) As tblPublisherItemTypesRow
            Dim rowtblPublisherItemTypesRow As tblPublisherItemTypesRow = CType(Me.NewRow,tblPublisherItemTypesRow)
            rowtblPublisherItemTypesRow.ItemArray = New Object() {parenttblPublishersRowByPublishersToPublisherItemTypes(0), parenttblItemTypesRowByItemTypesToPublisherItemTypes(0)}
            Me.Rows.Add(rowtblPublisherItemTypesRow)
            Return rowtblPublisherItemTypesRow
        End Function
        
        Public Function FindBylPublisherIDlItemTypeID(ByVal lPublisherID As Integer, ByVal lItemTypeID As Integer) As tblPublisherItemTypesRow
            Return CType(Me.Rows.Find(New Object() {lPublisherID, lItemTypeID}),tblPublisherItemTypesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblPublisherItemTypesDataTable = CType(MyBase.Clone,tblPublisherItemTypesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblPublisherItemTypesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlPublisherID = Me.Columns("lPublisherID")
            Me.columnlItemTypeID = Me.Columns("lItemTypeID")
        End Sub
        
        Private Sub InitClass()
            Me.columnlPublisherID = New DataColumn("lPublisherID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlPublisherID)
            Me.columnlItemTypeID = New DataColumn("lItemTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemTypeID)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey20", New DataColumn() {Me.columnlPublisherID, Me.columnlItemTypeID}, true))
            Me.columnlPublisherID.AllowDBNull = false
            Me.columnlItemTypeID.AllowDBNull = false
        End Sub
        
        Public Function NewtblPublisherItemTypesRow() As tblPublisherItemTypesRow
            Return CType(Me.NewRow,tblPublisherItemTypesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblPublisherItemTypesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblPublisherItemTypesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblPublisherItemTypesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblPublisherItemTypesRowChanged(Me, New tblPublisherItemTypesRowChangeEvent(CType(e.Row,tblPublisherItemTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblPublisherItemTypesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblPublisherItemTypesRowChanging(Me, New tblPublisherItemTypesRowChangeEvent(CType(e.Row,tblPublisherItemTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblPublisherItemTypesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblPublisherItemTypesRowDeleted(Me, New tblPublisherItemTypesRowChangeEvent(CType(e.Row,tblPublisherItemTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblPublisherItemTypesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblPublisherItemTypesRowDeleting(Me, New tblPublisherItemTypesRowChangeEvent(CType(e.Row,tblPublisherItemTypesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblPublisherItemTypesRow(ByVal row As tblPublisherItemTypesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPublisherItemTypesRow
        Inherits DataRow
        
        Private tabletblPublisherItemTypes As tblPublisherItemTypesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblPublisherItemTypes = CType(Me.Table,tblPublisherItemTypesDataTable)
        End Sub
        
        Public Property lPublisherID As Integer
            Get
                Return CType(Me(Me.tabletblPublisherItemTypes.lPublisherIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblPublisherItemTypes.lPublisherIDColumn) = value
            End Set
        End Property
        
        Public Property lItemTypeID As Integer
            Get
                Return CType(Me(Me.tabletblPublisherItemTypes.lItemTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblPublisherItemTypes.lItemTypeIDColumn) = value
            End Set
        End Property
        
        Public Property tblPublishersRow As tblPublishersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PublishersToPublisherItemTypes")),tblPublishersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PublishersToPublisherItemTypes"))
            End Set
        End Property
        
        Public Property tblItemTypesRow As tblItemTypesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ItemTypesToPublisherItemTypes")),tblItemTypesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ItemTypesToPublisherItemTypes"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblPublisherItemTypesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblPublisherItemTypesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblPublisherItemTypesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblPublisherItemTypesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblCategoriesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlCategoryID As DataColumn
        
        Private columnvsCategoryName As DataColumn
        
        Friend Sub New()
            MyBase.New("tblCategories")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lCategoryIDColumn As DataColumn
            Get
                Return Me.columnlCategoryID
            End Get
        End Property
        
        Friend ReadOnly Property vsCategoryNameColumn As DataColumn
            Get
                Return Me.columnvsCategoryName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblCategoriesRow
            Get
                Return CType(Me.Rows(index),tblCategoriesRow)
            End Get
        End Property
        
        Public Event tblCategoriesRowChanged As tblCategoriesRowChangeEventHandler
        
        Public Event tblCategoriesRowChanging As tblCategoriesRowChangeEventHandler
        
        Public Event tblCategoriesRowDeleted As tblCategoriesRowChangeEventHandler
        
        Public Event tblCategoriesRowDeleting As tblCategoriesRowChangeEventHandler
        
        Public Overloads Sub AddtblCategoriesRow(ByVal row As tblCategoriesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblCategoriesRow(ByVal vsCategoryName As String) As tblCategoriesRow
            Dim rowtblCategoriesRow As tblCategoriesRow = CType(Me.NewRow,tblCategoriesRow)
            rowtblCategoriesRow.ItemArray = New Object() {Nothing, vsCategoryName}
            Me.Rows.Add(rowtblCategoriesRow)
            Return rowtblCategoriesRow
        End Function
        
        Public Function FindBylCategoryID(ByVal lCategoryID As Integer) As tblCategoriesRow
            Return CType(Me.Rows.Find(New Object() {lCategoryID}),tblCategoriesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblCategoriesDataTable = CType(MyBase.Clone,tblCategoriesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblCategoriesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlCategoryID = Me.Columns("lCategoryID")
            Me.columnvsCategoryName = Me.Columns("vsCategoryName")
        End Sub
        
        Private Sub InitClass()
            Me.columnlCategoryID = New DataColumn("lCategoryID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlCategoryID)
            Me.columnvsCategoryName = New DataColumn("vsCategoryName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsCategoryName)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey21", New DataColumn() {Me.columnlCategoryID}, true))
            Me.columnlCategoryID.AutoIncrement = true
            Me.columnlCategoryID.AllowDBNull = false
            Me.columnlCategoryID.Unique = true
        End Sub
        
        Public Function NewtblCategoriesRow() As tblCategoriesRow
            Return CType(Me.NewRow,tblCategoriesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblCategoriesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblCategoriesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblCategoriesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblCategoriesRowChanged(Me, New tblCategoriesRowChangeEvent(CType(e.Row,tblCategoriesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblCategoriesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblCategoriesRowChanging(Me, New tblCategoriesRowChangeEvent(CType(e.Row,tblCategoriesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblCategoriesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblCategoriesRowDeleted(Me, New tblCategoriesRowChangeEvent(CType(e.Row,tblCategoriesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblCategoriesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblCategoriesRowDeleting(Me, New tblCategoriesRowChangeEvent(CType(e.Row,tblCategoriesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblCategoriesRow(ByVal row As tblCategoriesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblCategoriesRow
        Inherits DataRow
        
        Private tabletblCategories As tblCategoriesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblCategories = CType(Me.Table,tblCategoriesDataTable)
        End Sub
        
        Public Property lCategoryID As Integer
            Get
                Return CType(Me(Me.tabletblCategories.lCategoryIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblCategories.lCategoryIDColumn) = value
            End Set
        End Property
        
        Public Property vsCategoryName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblCategories.vsCategoryNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblCategories.vsCategoryNameColumn) = value
            End Set
        End Property
        
        Public Function IsvsCategoryNameNull() As Boolean
            Return Me.IsNull(Me.tabletblCategories.vsCategoryNameColumn)
        End Function
        
        Public Sub SetvsCategoryNameNull()
            Me(Me.tabletblCategories.vsCategoryNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblCategoryItemTypesRows() As tblCategoryItemTypesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("CategoriesToCategoryItemTypes")),tblCategoryItemTypesRow())
        End Function
        
        Public Function GettblItemCategoriesRows() As tblItemCategoriesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("CategoriesToItemCategories")),tblItemCategoriesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblCategoriesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblCategoriesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblCategoriesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblCategoriesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblItemSitesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlSiteID As DataColumn
        
        Private columnlItemID As DataColumn
        
        Private columnlItemTypeID As DataColumn
        
        Friend Sub New()
            MyBase.New("tblItemSites")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lSiteIDColumn As DataColumn
            Get
                Return Me.columnlSiteID
            End Get
        End Property
        
        Friend ReadOnly Property lItemIDColumn As DataColumn
            Get
                Return Me.columnlItemID
            End Get
        End Property
        
        Friend ReadOnly Property lItemTypeIDColumn As DataColumn
            Get
                Return Me.columnlItemTypeID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblItemSitesRow
            Get
                Return CType(Me.Rows(index),tblItemSitesRow)
            End Get
        End Property
        
        Public Event tblItemSitesRowChanged As tblItemSitesRowChangeEventHandler
        
        Public Event tblItemSitesRowChanging As tblItemSitesRowChangeEventHandler
        
        Public Event tblItemSitesRowDeleted As tblItemSitesRowChangeEventHandler
        
        Public Event tblItemSitesRowDeleting As tblItemSitesRowChangeEventHandler
        
        Public Overloads Sub AddtblItemSitesRow(ByVal row As tblItemSitesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblItemSitesRow(ByVal parenttblSiteRowBySiteToItemSites As tblSiteRow, ByVal lItemID As Integer, ByVal parenttblItemTypesRowByItemTypesToItemSites As tblItemTypesRow) As tblItemSitesRow
            Dim rowtblItemSitesRow As tblItemSitesRow = CType(Me.NewRow,tblItemSitesRow)
            rowtblItemSitesRow.ItemArray = New Object() {parenttblSiteRowBySiteToItemSites(0), lItemID, parenttblItemTypesRowByItemTypesToItemSites(0)}
            Me.Rows.Add(rowtblItemSitesRow)
            Return rowtblItemSitesRow
        End Function
        
        Public Function FindBylSiteIDlItemIDlItemTypeID(ByVal lSiteID As Integer, ByVal lItemID As Integer, ByVal lItemTypeID As Integer) As tblItemSitesRow
            Return CType(Me.Rows.Find(New Object() {lSiteID, lItemID, lItemTypeID}),tblItemSitesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblItemSitesDataTable = CType(MyBase.Clone,tblItemSitesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblItemSitesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlSiteID = Me.Columns("lSiteID")
            Me.columnlItemID = Me.Columns("lItemID")
            Me.columnlItemTypeID = Me.Columns("lItemTypeID")
        End Sub
        
        Private Sub InitClass()
            Me.columnlSiteID = New DataColumn("lSiteID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlSiteID)
            Me.columnlItemID = New DataColumn("lItemID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemID)
            Me.columnlItemTypeID = New DataColumn("lItemTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemTypeID)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey22", New DataColumn() {Me.columnlSiteID, Me.columnlItemID, Me.columnlItemTypeID}, true))
            Me.columnlSiteID.AllowDBNull = false
            Me.columnlItemID.AllowDBNull = false
            Me.columnlItemTypeID.AllowDBNull = false
        End Sub
        
        Public Function NewtblItemSitesRow() As tblItemSitesRow
            Return CType(Me.NewRow,tblItemSitesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblItemSitesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblItemSitesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblItemSitesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblItemSitesRowChanged(Me, New tblItemSitesRowChangeEvent(CType(e.Row,tblItemSitesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblItemSitesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblItemSitesRowChanging(Me, New tblItemSitesRowChangeEvent(CType(e.Row,tblItemSitesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblItemSitesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblItemSitesRowDeleted(Me, New tblItemSitesRowChangeEvent(CType(e.Row,tblItemSitesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblItemSitesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblItemSitesRowDeleting(Me, New tblItemSitesRowChangeEvent(CType(e.Row,tblItemSitesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblItemSitesRow(ByVal row As tblItemSitesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblItemSitesRow
        Inherits DataRow
        
        Private tabletblItemSites As tblItemSitesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblItemSites = CType(Me.Table,tblItemSitesDataTable)
        End Sub
        
        Public Property lSiteID As Integer
            Get
                Return CType(Me(Me.tabletblItemSites.lSiteIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblItemSites.lSiteIDColumn) = value
            End Set
        End Property
        
        Public Property lItemID As Integer
            Get
                Return CType(Me(Me.tabletblItemSites.lItemIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblItemSites.lItemIDColumn) = value
            End Set
        End Property
        
        Public Property lItemTypeID As Integer
            Get
                Return CType(Me(Me.tabletblItemSites.lItemTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblItemSites.lItemTypeIDColumn) = value
            End Set
        End Property
        
        Public Property tblSiteRow As tblSiteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SiteToItemSites")),tblSiteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SiteToItemSites"))
            End Set
        End Property
        
        Public Property tblItemTypesRow As tblItemTypesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ItemTypesToItemSites")),tblItemTypesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ItemTypesToItemSites"))
            End Set
        End Property
        
        Public Property AssetItemsRowParent As AssetItemsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AssetItemsToItemSite")),AssetItemsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AssetItemsToItemSite"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblItemSitesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblItemSitesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblItemSitesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblItemSitesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblCategoryItemTypesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlCategoryID As DataColumn
        
        Private columnlItemTypeID As DataColumn
        
        Friend Sub New()
            MyBase.New("tblCategoryItemTypes")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lCategoryIDColumn As DataColumn
            Get
                Return Me.columnlCategoryID
            End Get
        End Property
        
        Friend ReadOnly Property lItemTypeIDColumn As DataColumn
            Get
                Return Me.columnlItemTypeID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblCategoryItemTypesRow
            Get
                Return CType(Me.Rows(index),tblCategoryItemTypesRow)
            End Get
        End Property
        
        Public Event tblCategoryItemTypesRowChanged As tblCategoryItemTypesRowChangeEventHandler
        
        Public Event tblCategoryItemTypesRowChanging As tblCategoryItemTypesRowChangeEventHandler
        
        Public Event tblCategoryItemTypesRowDeleted As tblCategoryItemTypesRowChangeEventHandler
        
        Public Event tblCategoryItemTypesRowDeleting As tblCategoryItemTypesRowChangeEventHandler
        
        Public Overloads Sub AddtblCategoryItemTypesRow(ByVal row As tblCategoryItemTypesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblCategoryItemTypesRow(ByVal parenttblCategoriesRowByCategoriesToCategoryItemTypes As tblCategoriesRow, ByVal parenttblItemTypesRowByItemTypesToCategoryItemTypes As tblItemTypesRow) As tblCategoryItemTypesRow
            Dim rowtblCategoryItemTypesRow As tblCategoryItemTypesRow = CType(Me.NewRow,tblCategoryItemTypesRow)
            rowtblCategoryItemTypesRow.ItemArray = New Object() {parenttblCategoriesRowByCategoriesToCategoryItemTypes(0), parenttblItemTypesRowByItemTypesToCategoryItemTypes(0)}
            Me.Rows.Add(rowtblCategoryItemTypesRow)
            Return rowtblCategoryItemTypesRow
        End Function
        
        Public Function FindBylCategoryIDlItemTypeID(ByVal lCategoryID As Integer, ByVal lItemTypeID As Integer) As tblCategoryItemTypesRow
            Return CType(Me.Rows.Find(New Object() {lCategoryID, lItemTypeID}),tblCategoryItemTypesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblCategoryItemTypesDataTable = CType(MyBase.Clone,tblCategoryItemTypesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblCategoryItemTypesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlCategoryID = Me.Columns("lCategoryID")
            Me.columnlItemTypeID = Me.Columns("lItemTypeID")
        End Sub
        
        Private Sub InitClass()
            Me.columnlCategoryID = New DataColumn("lCategoryID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlCategoryID)
            Me.columnlItemTypeID = New DataColumn("lItemTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemTypeID)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey23", New DataColumn() {Me.columnlCategoryID, Me.columnlItemTypeID}, true))
            Me.columnlCategoryID.AllowDBNull = false
            Me.columnlItemTypeID.AllowDBNull = false
        End Sub
        
        Public Function NewtblCategoryItemTypesRow() As tblCategoryItemTypesRow
            Return CType(Me.NewRow,tblCategoryItemTypesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblCategoryItemTypesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblCategoryItemTypesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblCategoryItemTypesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblCategoryItemTypesRowChanged(Me, New tblCategoryItemTypesRowChangeEvent(CType(e.Row,tblCategoryItemTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblCategoryItemTypesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblCategoryItemTypesRowChanging(Me, New tblCategoryItemTypesRowChangeEvent(CType(e.Row,tblCategoryItemTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblCategoryItemTypesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblCategoryItemTypesRowDeleted(Me, New tblCategoryItemTypesRowChangeEvent(CType(e.Row,tblCategoryItemTypesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblCategoryItemTypesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblCategoryItemTypesRowDeleting(Me, New tblCategoryItemTypesRowChangeEvent(CType(e.Row,tblCategoryItemTypesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblCategoryItemTypesRow(ByVal row As tblCategoryItemTypesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblCategoryItemTypesRow
        Inherits DataRow
        
        Private tabletblCategoryItemTypes As tblCategoryItemTypesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblCategoryItemTypes = CType(Me.Table,tblCategoryItemTypesDataTable)
        End Sub
        
        Public Property lCategoryID As Integer
            Get
                Return CType(Me(Me.tabletblCategoryItemTypes.lCategoryIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblCategoryItemTypes.lCategoryIDColumn) = value
            End Set
        End Property
        
        Public Property lItemTypeID As Integer
            Get
                Return CType(Me(Me.tabletblCategoryItemTypes.lItemTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblCategoryItemTypes.lItemTypeIDColumn) = value
            End Set
        End Property
        
        Public Property tblCategoriesRow As tblCategoriesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CategoriesToCategoryItemTypes")),tblCategoriesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CategoriesToCategoryItemTypes"))
            End Set
        End Property
        
        Public Property tblItemTypesRow As tblItemTypesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ItemTypesToCategoryItemTypes")),tblItemTypesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ItemTypesToCategoryItemTypes"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblCategoryItemTypesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblCategoryItemTypesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblCategoryItemTypesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblCategoryItemTypesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblContestsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlContestID As DataColumn
        
        Private columnvsContestName As DataColumn
        
        Private columndtStartDate As DataColumn
        
        Private columndtEndDate As DataColumn
        
        Private columndtVoteByDate As DataColumn
        
        Private columnvsDescription As DataColumn
        
        Private columnlWinners As DataColumn
        
        Private columnlVotesAllowed As DataColumn
        
        Private columnlWeightFactor As DataColumn
        
        Private columnlMaxEntries As DataColumn
        
        Private columnbFreePluginsOnly As DataColumn
        
        Private columnbNoExternalMedia As DataColumn
        
        Private columnlSiteID As DataColumn
        
        Friend Sub New()
            MyBase.New("tblContests")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lContestIDColumn As DataColumn
            Get
                Return Me.columnlContestID
            End Get
        End Property
        
        Friend ReadOnly Property vsContestNameColumn As DataColumn
            Get
                Return Me.columnvsContestName
            End Get
        End Property
        
        Friend ReadOnly Property dtStartDateColumn As DataColumn
            Get
                Return Me.columndtStartDate
            End Get
        End Property
        
        Friend ReadOnly Property dtEndDateColumn As DataColumn
            Get
                Return Me.columndtEndDate
            End Get
        End Property
        
        Friend ReadOnly Property dtVoteByDateColumn As DataColumn
            Get
                Return Me.columndtVoteByDate
            End Get
        End Property
        
        Friend ReadOnly Property vsDescriptionColumn As DataColumn
            Get
                Return Me.columnvsDescription
            End Get
        End Property
        
        Friend ReadOnly Property lWinnersColumn As DataColumn
            Get
                Return Me.columnlWinners
            End Get
        End Property
        
        Friend ReadOnly Property lVotesAllowedColumn As DataColumn
            Get
                Return Me.columnlVotesAllowed
            End Get
        End Property
        
        Friend ReadOnly Property lWeightFactorColumn As DataColumn
            Get
                Return Me.columnlWeightFactor
            End Get
        End Property
        
        Friend ReadOnly Property lMaxEntriesColumn As DataColumn
            Get
                Return Me.columnlMaxEntries
            End Get
        End Property
        
        Friend ReadOnly Property bFreePluginsOnlyColumn As DataColumn
            Get
                Return Me.columnbFreePluginsOnly
            End Get
        End Property
        
        Friend ReadOnly Property bNoExternalMediaColumn As DataColumn
            Get
                Return Me.columnbNoExternalMedia
            End Get
        End Property
        
        Friend ReadOnly Property lSiteIDColumn As DataColumn
            Get
                Return Me.columnlSiteID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblContestsRow
            Get
                Return CType(Me.Rows(index),tblContestsRow)
            End Get
        End Property
        
        Public Event tblContestsRowChanged As tblContestsRowChangeEventHandler
        
        Public Event tblContestsRowChanging As tblContestsRowChangeEventHandler
        
        Public Event tblContestsRowDeleted As tblContestsRowChangeEventHandler
        
        Public Event tblContestsRowDeleting As tblContestsRowChangeEventHandler
        
        Public Overloads Sub AddtblContestsRow(ByVal row As tblContestsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblContestsRow(ByVal vsContestName As String, ByVal dtStartDate As Date, ByVal dtEndDate As Date, ByVal dtVoteByDate As Date, ByVal vsDescription As String, ByVal lWinners As Short, ByVal lVotesAllowed As Short, ByVal lWeightFactor As Short, ByVal lMaxEntries As Short, ByVal bFreePluginsOnly As Boolean, ByVal bNoExternalMedia As Boolean, ByVal parenttblSiteRowBySiteToContests As tblSiteRow) As tblContestsRow
            Dim rowtblContestsRow As tblContestsRow = CType(Me.NewRow,tblContestsRow)
            rowtblContestsRow.ItemArray = New Object() {Nothing, vsContestName, dtStartDate, dtEndDate, dtVoteByDate, vsDescription, lWinners, lVotesAllowed, lWeightFactor, lMaxEntries, bFreePluginsOnly, bNoExternalMedia, parenttblSiteRowBySiteToContests(0)}
            Me.Rows.Add(rowtblContestsRow)
            Return rowtblContestsRow
        End Function
        
        Public Function FindBylContestID(ByVal lContestID As Integer) As tblContestsRow
            Return CType(Me.Rows.Find(New Object() {lContestID}),tblContestsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblContestsDataTable = CType(MyBase.Clone,tblContestsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblContestsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlContestID = Me.Columns("lContestID")
            Me.columnvsContestName = Me.Columns("vsContestName")
            Me.columndtStartDate = Me.Columns("dtStartDate")
            Me.columndtEndDate = Me.Columns("dtEndDate")
            Me.columndtVoteByDate = Me.Columns("dtVoteByDate")
            Me.columnvsDescription = Me.Columns("vsDescription")
            Me.columnlWinners = Me.Columns("lWinners")
            Me.columnlVotesAllowed = Me.Columns("lVotesAllowed")
            Me.columnlWeightFactor = Me.Columns("lWeightFactor")
            Me.columnlMaxEntries = Me.Columns("lMaxEntries")
            Me.columnbFreePluginsOnly = Me.Columns("bFreePluginsOnly")
            Me.columnbNoExternalMedia = Me.Columns("bNoExternalMedia")
            Me.columnlSiteID = Me.Columns("lSiteID")
        End Sub
        
        Private Sub InitClass()
            Me.columnlContestID = New DataColumn("lContestID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlContestID)
            Me.columnvsContestName = New DataColumn("vsContestName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsContestName)
            Me.columndtStartDate = New DataColumn("dtStartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtStartDate)
            Me.columndtEndDate = New DataColumn("dtEndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtEndDate)
            Me.columndtVoteByDate = New DataColumn("dtVoteByDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtVoteByDate)
            Me.columnvsDescription = New DataColumn("vsDescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsDescription)
            Me.columnlWinners = New DataColumn("lWinners", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlWinners)
            Me.columnlVotesAllowed = New DataColumn("lVotesAllowed", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlVotesAllowed)
            Me.columnlWeightFactor = New DataColumn("lWeightFactor", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlWeightFactor)
            Me.columnlMaxEntries = New DataColumn("lMaxEntries", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlMaxEntries)
            Me.columnbFreePluginsOnly = New DataColumn("bFreePluginsOnly", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbFreePluginsOnly)
            Me.columnbNoExternalMedia = New DataColumn("bNoExternalMedia", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbNoExternalMedia)
            Me.columnlSiteID = New DataColumn("lSiteID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlSiteID)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey24", New DataColumn() {Me.columnlContestID}, true))
            Me.columnlContestID.AutoIncrement = true
            Me.columnlContestID.AllowDBNull = false
            Me.columnlContestID.Unique = true
        End Sub
        
        Public Function NewtblContestsRow() As tblContestsRow
            Return CType(Me.NewRow,tblContestsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblContestsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblContestsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblContestsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblContestsRowChanged(Me, New tblContestsRowChangeEvent(CType(e.Row,tblContestsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblContestsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblContestsRowChanging(Me, New tblContestsRowChangeEvent(CType(e.Row,tblContestsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblContestsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblContestsRowDeleted(Me, New tblContestsRowChangeEvent(CType(e.Row,tblContestsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblContestsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblContestsRowDeleting(Me, New tblContestsRowChangeEvent(CType(e.Row,tblContestsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblContestsRow(ByVal row As tblContestsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblContestsRow
        Inherits DataRow
        
        Private tabletblContests As tblContestsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblContests = CType(Me.Table,tblContestsDataTable)
        End Sub
        
        Public Property lContestID As Integer
            Get
                Return CType(Me(Me.tabletblContests.lContestIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblContests.lContestIDColumn) = value
            End Set
        End Property
        
        Public Property vsContestName As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContests.vsContestNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContests.vsContestNameColumn) = value
            End Set
        End Property
        
        Public Property dtStartDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContests.dtStartDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContests.dtStartDateColumn) = value
            End Set
        End Property
        
        Public Property dtEndDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContests.dtEndDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContests.dtEndDateColumn) = value
            End Set
        End Property
        
        Public Property dtVoteByDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContests.dtVoteByDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContests.dtVoteByDateColumn) = value
            End Set
        End Property
        
        Public Property vsDescription As String
            Get
                Try 
                    Return CType(Me(Me.tabletblContests.vsDescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContests.vsDescriptionColumn) = value
            End Set
        End Property
        
        Public Property lWinners As Short
            Get
                Try 
                    Return CType(Me(Me.tabletblContests.lWinnersColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContests.lWinnersColumn) = value
            End Set
        End Property
        
        Public Property lVotesAllowed As Short
            Get
                Try 
                    Return CType(Me(Me.tabletblContests.lVotesAllowedColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContests.lVotesAllowedColumn) = value
            End Set
        End Property
        
        Public Property lWeightFactor As Short
            Get
                Try 
                    Return CType(Me(Me.tabletblContests.lWeightFactorColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContests.lWeightFactorColumn) = value
            End Set
        End Property
        
        Public Property lMaxEntries As Short
            Get
                Try 
                    Return CType(Me(Me.tabletblContests.lMaxEntriesColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContests.lMaxEntriesColumn) = value
            End Set
        End Property
        
        Public Property bFreePluginsOnly As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblContests.bFreePluginsOnlyColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContests.bFreePluginsOnlyColumn) = value
            End Set
        End Property
        
        Public Property bNoExternalMedia As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblContests.bNoExternalMediaColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContests.bNoExternalMediaColumn) = value
            End Set
        End Property
        
        Public Property lSiteID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblContests.lSiteIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContests.lSiteIDColumn) = value
            End Set
        End Property
        
        Public Property tblSiteRow As tblSiteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SiteToContests")),tblSiteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SiteToContests"))
            End Set
        End Property
        
        Public Function IsvsContestNameNull() As Boolean
            Return Me.IsNull(Me.tabletblContests.vsContestNameColumn)
        End Function
        
        Public Sub SetvsContestNameNull()
            Me(Me.tabletblContests.vsContestNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtStartDateNull() As Boolean
            Return Me.IsNull(Me.tabletblContests.dtStartDateColumn)
        End Function
        
        Public Sub SetdtStartDateNull()
            Me(Me.tabletblContests.dtStartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtEndDateNull() As Boolean
            Return Me.IsNull(Me.tabletblContests.dtEndDateColumn)
        End Function
        
        Public Sub SetdtEndDateNull()
            Me(Me.tabletblContests.dtEndDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtVoteByDateNull() As Boolean
            Return Me.IsNull(Me.tabletblContests.dtVoteByDateColumn)
        End Function
        
        Public Sub SetdtVoteByDateNull()
            Me(Me.tabletblContests.dtVoteByDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblContests.vsDescriptionColumn)
        End Function
        
        Public Sub SetvsDescriptionNull()
            Me(Me.tabletblContests.vsDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslWinnersNull() As Boolean
            Return Me.IsNull(Me.tabletblContests.lWinnersColumn)
        End Function
        
        Public Sub SetlWinnersNull()
            Me(Me.tabletblContests.lWinnersColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslVotesAllowedNull() As Boolean
            Return Me.IsNull(Me.tabletblContests.lVotesAllowedColumn)
        End Function
        
        Public Sub SetlVotesAllowedNull()
            Me(Me.tabletblContests.lVotesAllowedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslWeightFactorNull() As Boolean
            Return Me.IsNull(Me.tabletblContests.lWeightFactorColumn)
        End Function
        
        Public Sub SetlWeightFactorNull()
            Me(Me.tabletblContests.lWeightFactorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslMaxEntriesNull() As Boolean
            Return Me.IsNull(Me.tabletblContests.lMaxEntriesColumn)
        End Function
        
        Public Sub SetlMaxEntriesNull()
            Me(Me.tabletblContests.lMaxEntriesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbFreePluginsOnlyNull() As Boolean
            Return Me.IsNull(Me.tabletblContests.bFreePluginsOnlyColumn)
        End Function
        
        Public Sub SetbFreePluginsOnlyNull()
            Me(Me.tabletblContests.bFreePluginsOnlyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbNoExternalMediaNull() As Boolean
            Return Me.IsNull(Me.tabletblContests.bNoExternalMediaColumn)
        End Function
        
        Public Sub SetbNoExternalMediaNull()
            Me(Me.tabletblContests.bNoExternalMediaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslSiteIDNull() As Boolean
            Return Me.IsNull(Me.tabletblContests.lSiteIDColumn)
        End Function
        
        Public Sub SetlSiteIDNull()
            Me(Me.tabletblContests.lSiteIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblContestItemsRows() As tblContestItemsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ContestsToContestItems")),tblContestItemsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblContestsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblContestsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblContestsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblContestsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblContestVotesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlContestID As DataColumn
        
        Private columnlItemID As DataColumn
        
        Private columnlItemTypeID As DataColumn
        
        Private columnlVoterID As DataColumn
        
        Private columnlRank As DataColumn
        
        Private columndtDateVoted As DataColumn
        
        Friend Sub New()
            MyBase.New("tblContestVotes")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lContestIDColumn As DataColumn
            Get
                Return Me.columnlContestID
            End Get
        End Property
        
        Friend ReadOnly Property lItemIDColumn As DataColumn
            Get
                Return Me.columnlItemID
            End Get
        End Property
        
        Friend ReadOnly Property lItemTypeIDColumn As DataColumn
            Get
                Return Me.columnlItemTypeID
            End Get
        End Property
        
        Friend ReadOnly Property lVoterIDColumn As DataColumn
            Get
                Return Me.columnlVoterID
            End Get
        End Property
        
        Friend ReadOnly Property lRankColumn As DataColumn
            Get
                Return Me.columnlRank
            End Get
        End Property
        
        Friend ReadOnly Property dtDateVotedColumn As DataColumn
            Get
                Return Me.columndtDateVoted
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblContestVotesRow
            Get
                Return CType(Me.Rows(index),tblContestVotesRow)
            End Get
        End Property
        
        Public Event tblContestVotesRowChanged As tblContestVotesRowChangeEventHandler
        
        Public Event tblContestVotesRowChanging As tblContestVotesRowChangeEventHandler
        
        Public Event tblContestVotesRowDeleted As tblContestVotesRowChangeEventHandler
        
        Public Event tblContestVotesRowDeleting As tblContestVotesRowChangeEventHandler
        
        Public Overloads Sub AddtblContestVotesRow(ByVal row As tblContestVotesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblContestVotesRow(ByVal lContestID As Integer, ByVal lItemID As Integer, ByVal lItemTypeID As Integer, ByVal parenttblUsersRowByUsersToContestVotes As tblUsersRow, ByVal lRank As Integer, ByVal dtDateVoted As Date) As tblContestVotesRow
            Dim rowtblContestVotesRow As tblContestVotesRow = CType(Me.NewRow,tblContestVotesRow)
            rowtblContestVotesRow.ItemArray = New Object() {lContestID, lItemID, lItemTypeID, parenttblUsersRowByUsersToContestVotes(0), lRank, dtDateVoted}
            Me.Rows.Add(rowtblContestVotesRow)
            Return rowtblContestVotesRow
        End Function
        
        Public Function FindBylContestIDlItemIDlItemTypeIDlVoterID(ByVal lContestID As Integer, ByVal lItemID As Integer, ByVal lItemTypeID As Integer, ByVal lVoterID As Integer) As tblContestVotesRow
            Return CType(Me.Rows.Find(New Object() {lContestID, lItemID, lItemTypeID, lVoterID}),tblContestVotesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblContestVotesDataTable = CType(MyBase.Clone,tblContestVotesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblContestVotesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlContestID = Me.Columns("lContestID")
            Me.columnlItemID = Me.Columns("lItemID")
            Me.columnlItemTypeID = Me.Columns("lItemTypeID")
            Me.columnlVoterID = Me.Columns("lVoterID")
            Me.columnlRank = Me.Columns("lRank")
            Me.columndtDateVoted = Me.Columns("dtDateVoted")
        End Sub
        
        Private Sub InitClass()
            Me.columnlContestID = New DataColumn("lContestID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlContestID)
            Me.columnlItemID = New DataColumn("lItemID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemID)
            Me.columnlItemTypeID = New DataColumn("lItemTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemTypeID)
            Me.columnlVoterID = New DataColumn("lVoterID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlVoterID)
            Me.columnlRank = New DataColumn("lRank", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlRank)
            Me.columndtDateVoted = New DataColumn("dtDateVoted", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtDateVoted)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey25", New DataColumn() {Me.columnlContestID, Me.columnlItemID, Me.columnlItemTypeID, Me.columnlVoterID}, true))
            Me.columnlContestID.AllowDBNull = false
            Me.columnlItemID.AllowDBNull = false
            Me.columnlItemTypeID.AllowDBNull = false
            Me.columnlVoterID.AllowDBNull = false
        End Sub
        
        Public Function NewtblContestVotesRow() As tblContestVotesRow
            Return CType(Me.NewRow,tblContestVotesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblContestVotesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblContestVotesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblContestVotesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblContestVotesRowChanged(Me, New tblContestVotesRowChangeEvent(CType(e.Row,tblContestVotesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblContestVotesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblContestVotesRowChanging(Me, New tblContestVotesRowChangeEvent(CType(e.Row,tblContestVotesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblContestVotesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblContestVotesRowDeleted(Me, New tblContestVotesRowChangeEvent(CType(e.Row,tblContestVotesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblContestVotesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblContestVotesRowDeleting(Me, New tblContestVotesRowChangeEvent(CType(e.Row,tblContestVotesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblContestVotesRow(ByVal row As tblContestVotesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblContestVotesRow
        Inherits DataRow
        
        Private tabletblContestVotes As tblContestVotesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblContestVotes = CType(Me.Table,tblContestVotesDataTable)
        End Sub
        
        Public Property lContestID As Integer
            Get
                Return CType(Me(Me.tabletblContestVotes.lContestIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblContestVotes.lContestIDColumn) = value
            End Set
        End Property
        
        Public Property lItemID As Integer
            Get
                Return CType(Me(Me.tabletblContestVotes.lItemIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblContestVotes.lItemIDColumn) = value
            End Set
        End Property
        
        Public Property lItemTypeID As Integer
            Get
                Return CType(Me(Me.tabletblContestVotes.lItemTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblContestVotes.lItemTypeIDColumn) = value
            End Set
        End Property
        
        Public Property lVoterID As Integer
            Get
                Return CType(Me(Me.tabletblContestVotes.lVoterIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblContestVotes.lVoterIDColumn) = value
            End Set
        End Property
        
        Public Property lRank As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblContestVotes.lRankColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContestVotes.lRankColumn) = value
            End Set
        End Property
        
        Public Property dtDateVoted As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContestVotes.dtDateVotedColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContestVotes.dtDateVotedColumn) = value
            End Set
        End Property
        
        Public Property tblUsersRow As tblUsersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("UsersToContestVotes")),tblUsersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("UsersToContestVotes"))
            End Set
        End Property
        
        Public Property AssetItemsRowParent As AssetItemsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AssetItemsToContestVotes")),AssetItemsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AssetItemsToContestVotes"))
            End Set
        End Property
        
        Public Property tblContestItemsRowParent As tblContestItemsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ContestItemsToContestVotes")),tblContestItemsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ContestItemsToContestVotes"))
            End Set
        End Property
        
        Public Function IslRankNull() As Boolean
            Return Me.IsNull(Me.tabletblContestVotes.lRankColumn)
        End Function
        
        Public Sub SetlRankNull()
            Me(Me.tabletblContestVotes.lRankColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtDateVotedNull() As Boolean
            Return Me.IsNull(Me.tabletblContestVotes.dtDateVotedColumn)
        End Function
        
        Public Sub SetdtDateVotedNull()
            Me(Me.tabletblContestVotes.dtDateVotedColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblContestVotesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblContestVotesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblContestVotesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblContestVotesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblContestItemsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlContestID As DataColumn
        
        Private columnlItemID As DataColumn
        
        Private columnlItemTypeID As DataColumn
        
        Private columndtAddedDate As DataColumn
        
        Friend Sub New()
            MyBase.New("tblContestItems")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lContestIDColumn As DataColumn
            Get
                Return Me.columnlContestID
            End Get
        End Property
        
        Friend ReadOnly Property lItemIDColumn As DataColumn
            Get
                Return Me.columnlItemID
            End Get
        End Property
        
        Friend ReadOnly Property lItemTypeIDColumn As DataColumn
            Get
                Return Me.columnlItemTypeID
            End Get
        End Property
        
        Friend ReadOnly Property dtAddedDateColumn As DataColumn
            Get
                Return Me.columndtAddedDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblContestItemsRow
            Get
                Return CType(Me.Rows(index),tblContestItemsRow)
            End Get
        End Property
        
        Public Event tblContestItemsRowChanged As tblContestItemsRowChangeEventHandler
        
        Public Event tblContestItemsRowChanging As tblContestItemsRowChangeEventHandler
        
        Public Event tblContestItemsRowDeleted As tblContestItemsRowChangeEventHandler
        
        Public Event tblContestItemsRowDeleting As tblContestItemsRowChangeEventHandler
        
        Public Overloads Sub AddtblContestItemsRow(ByVal row As tblContestItemsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblContestItemsRow(ByVal parenttblContestsRowByContestsToContestItems As tblContestsRow, ByVal lItemID As Integer, ByVal lItemTypeID As Integer, ByVal dtAddedDate As Date) As tblContestItemsRow
            Dim rowtblContestItemsRow As tblContestItemsRow = CType(Me.NewRow,tblContestItemsRow)
            rowtblContestItemsRow.ItemArray = New Object() {parenttblContestsRowByContestsToContestItems(0), lItemID, lItemTypeID, dtAddedDate}
            Me.Rows.Add(rowtblContestItemsRow)
            Return rowtblContestItemsRow
        End Function
        
        Public Function FindBylContestIDlItemIDlItemTypeID(ByVal lContestID As Integer, ByVal lItemID As Integer, ByVal lItemTypeID As Integer) As tblContestItemsRow
            Return CType(Me.Rows.Find(New Object() {lContestID, lItemID, lItemTypeID}),tblContestItemsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblContestItemsDataTable = CType(MyBase.Clone,tblContestItemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblContestItemsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlContestID = Me.Columns("lContestID")
            Me.columnlItemID = Me.Columns("lItemID")
            Me.columnlItemTypeID = Me.Columns("lItemTypeID")
            Me.columndtAddedDate = Me.Columns("dtAddedDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnlContestID = New DataColumn("lContestID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlContestID)
            Me.columnlItemID = New DataColumn("lItemID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemID)
            Me.columnlItemTypeID = New DataColumn("lItemTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemTypeID)
            Me.columndtAddedDate = New DataColumn("dtAddedDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtAddedDate)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey26", New DataColumn() {Me.columnlContestID, Me.columnlItemID, Me.columnlItemTypeID}, true))
            Me.columnlContestID.AllowDBNull = false
            Me.columnlItemID.AllowDBNull = false
            Me.columnlItemTypeID.AllowDBNull = false
        End Sub
        
        Public Function NewtblContestItemsRow() As tblContestItemsRow
            Return CType(Me.NewRow,tblContestItemsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblContestItemsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblContestItemsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblContestItemsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblContestItemsRowChanged(Me, New tblContestItemsRowChangeEvent(CType(e.Row,tblContestItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblContestItemsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblContestItemsRowChanging(Me, New tblContestItemsRowChangeEvent(CType(e.Row,tblContestItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblContestItemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblContestItemsRowDeleted(Me, New tblContestItemsRowChangeEvent(CType(e.Row,tblContestItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblContestItemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblContestItemsRowDeleting(Me, New tblContestItemsRowChangeEvent(CType(e.Row,tblContestItemsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblContestItemsRow(ByVal row As tblContestItemsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblContestItemsRow
        Inherits DataRow
        
        Private tabletblContestItems As tblContestItemsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblContestItems = CType(Me.Table,tblContestItemsDataTable)
        End Sub
        
        Public Property lContestID As Integer
            Get
                Return CType(Me(Me.tabletblContestItems.lContestIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblContestItems.lContestIDColumn) = value
            End Set
        End Property
        
        Public Property lItemID As Integer
            Get
                Return CType(Me(Me.tabletblContestItems.lItemIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblContestItems.lItemIDColumn) = value
            End Set
        End Property
        
        Public Property lItemTypeID As Integer
            Get
                Return CType(Me(Me.tabletblContestItems.lItemTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblContestItems.lItemTypeIDColumn) = value
            End Set
        End Property
        
        Public Property dtAddedDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblContestItems.dtAddedDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblContestItems.dtAddedDateColumn) = value
            End Set
        End Property
        
        Public Property tblContestsRow As tblContestsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ContestsToContestItems")),tblContestsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ContestsToContestItems"))
            End Set
        End Property
        
        Public Property AssetItemsRowParent As AssetItemsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AssetItemsToContestItems")),AssetItemsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AssetItemsToContestItems"))
            End Set
        End Property
        
        Public Function IsdtAddedDateNull() As Boolean
            Return Me.IsNull(Me.tabletblContestItems.dtAddedDateColumn)
        End Function
        
        Public Sub SetdtAddedDateNull()
            Me(Me.tabletblContestItems.dtAddedDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GettblContestVotesRows() As tblContestVotesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ContestItemsToContestVotes")),tblContestVotesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblContestItemsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblContestItemsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblContestItemsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblContestItemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblItemCategoriesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlCategoryID As DataColumn
        
        Private columnlItemID As DataColumn
        
        Private columnlItemTypeID As DataColumn
        
        Friend Sub New()
            MyBase.New("tblItemCategories")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lCategoryIDColumn As DataColumn
            Get
                Return Me.columnlCategoryID
            End Get
        End Property
        
        Friend ReadOnly Property lItemIDColumn As DataColumn
            Get
                Return Me.columnlItemID
            End Get
        End Property
        
        Friend ReadOnly Property lItemTypeIDColumn As DataColumn
            Get
                Return Me.columnlItemTypeID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblItemCategoriesRow
            Get
                Return CType(Me.Rows(index),tblItemCategoriesRow)
            End Get
        End Property
        
        Public Event tblItemCategoriesRowChanged As tblItemCategoriesRowChangeEventHandler
        
        Public Event tblItemCategoriesRowChanging As tblItemCategoriesRowChangeEventHandler
        
        Public Event tblItemCategoriesRowDeleted As tblItemCategoriesRowChangeEventHandler
        
        Public Event tblItemCategoriesRowDeleting As tblItemCategoriesRowChangeEventHandler
        
        Public Overloads Sub AddtblItemCategoriesRow(ByVal row As tblItemCategoriesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblItemCategoriesRow(ByVal parenttblCategoriesRowByCategoriesToItemCategories As tblCategoriesRow, ByVal lItemID As Integer, ByVal lItemTypeID As Integer) As tblItemCategoriesRow
            Dim rowtblItemCategoriesRow As tblItemCategoriesRow = CType(Me.NewRow,tblItemCategoriesRow)
            rowtblItemCategoriesRow.ItemArray = New Object() {parenttblCategoriesRowByCategoriesToItemCategories(0), lItemID, lItemTypeID}
            Me.Rows.Add(rowtblItemCategoriesRow)
            Return rowtblItemCategoriesRow
        End Function
        
        Public Function FindBylCategoryIDlItemIDlItemTypeID(ByVal lCategoryID As Integer, ByVal lItemID As Integer, ByVal lItemTypeID As Integer) As tblItemCategoriesRow
            Return CType(Me.Rows.Find(New Object() {lCategoryID, lItemID, lItemTypeID}),tblItemCategoriesRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblItemCategoriesDataTable = CType(MyBase.Clone,tblItemCategoriesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblItemCategoriesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlCategoryID = Me.Columns("lCategoryID")
            Me.columnlItemID = Me.Columns("lItemID")
            Me.columnlItemTypeID = Me.Columns("lItemTypeID")
        End Sub
        
        Private Sub InitClass()
            Me.columnlCategoryID = New DataColumn("lCategoryID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlCategoryID)
            Me.columnlItemID = New DataColumn("lItemID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemID)
            Me.columnlItemTypeID = New DataColumn("lItemTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemTypeID)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey27", New DataColumn() {Me.columnlCategoryID, Me.columnlItemID, Me.columnlItemTypeID}, true))
            Me.columnlCategoryID.AllowDBNull = false
            Me.columnlItemID.AllowDBNull = false
            Me.columnlItemTypeID.AllowDBNull = false
        End Sub
        
        Public Function NewtblItemCategoriesRow() As tblItemCategoriesRow
            Return CType(Me.NewRow,tblItemCategoriesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblItemCategoriesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblItemCategoriesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblItemCategoriesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblItemCategoriesRowChanged(Me, New tblItemCategoriesRowChangeEvent(CType(e.Row,tblItemCategoriesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblItemCategoriesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblItemCategoriesRowChanging(Me, New tblItemCategoriesRowChangeEvent(CType(e.Row,tblItemCategoriesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblItemCategoriesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblItemCategoriesRowDeleted(Me, New tblItemCategoriesRowChangeEvent(CType(e.Row,tblItemCategoriesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblItemCategoriesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblItemCategoriesRowDeleting(Me, New tblItemCategoriesRowChangeEvent(CType(e.Row,tblItemCategoriesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblItemCategoriesRow(ByVal row As tblItemCategoriesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblItemCategoriesRow
        Inherits DataRow
        
        Private tabletblItemCategories As tblItemCategoriesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblItemCategories = CType(Me.Table,tblItemCategoriesDataTable)
        End Sub
        
        Public Property lCategoryID As Integer
            Get
                Return CType(Me(Me.tabletblItemCategories.lCategoryIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblItemCategories.lCategoryIDColumn) = value
            End Set
        End Property
        
        Public Property lItemID As Integer
            Get
                Return CType(Me(Me.tabletblItemCategories.lItemIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblItemCategories.lItemIDColumn) = value
            End Set
        End Property
        
        Public Property lItemTypeID As Integer
            Get
                Return CType(Me(Me.tabletblItemCategories.lItemTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblItemCategories.lItemTypeIDColumn) = value
            End Set
        End Property
        
        Public Property tblCategoriesRow As tblCategoriesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CategoriesToItemCategories")),tblCategoriesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CategoriesToItemCategories"))
            End Set
        End Property
        
        Public Property AssetItemsRowParent As AssetItemsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AssetItemsToItemCategories")),AssetItemsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AssetItemsToItemCategories"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblItemCategoriesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblItemCategoriesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblItemCategoriesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblItemCategoriesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblLogDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnlLogID As DataColumn
        
        Private columnlUserID As DataColumn
        
        Private columndtActivityDate As DataColumn
        
        Private columnlActivityID As DataColumn
        
        Private columnlProjectID As DataColumn
        
        Private columnlScriptID As DataColumn
        
        Private columnlContestID As DataColumn
        
        Private columnlTutorialID As DataColumn
        
        Private columnlAffectedUserID As DataColumn
        
        Private columnvsEmail As DataColumn
        
        Private columnvsPassword As DataColumn
        
        Private columnvsIPAddress As DataColumn
        
        Private columnlSiteID As DataColumn
        
        Private columnlItemTypeID As DataColumn
        
        Friend Sub New()
            MyBase.New("tblLog")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property lLogIDColumn As DataColumn
            Get
                Return Me.columnlLogID
            End Get
        End Property
        
        Friend ReadOnly Property lUserIDColumn As DataColumn
            Get
                Return Me.columnlUserID
            End Get
        End Property
        
        Friend ReadOnly Property dtActivityDateColumn As DataColumn
            Get
                Return Me.columndtActivityDate
            End Get
        End Property
        
        Friend ReadOnly Property lActivityIDColumn As DataColumn
            Get
                Return Me.columnlActivityID
            End Get
        End Property
        
        Friend ReadOnly Property lProjectIDColumn As DataColumn
            Get
                Return Me.columnlProjectID
            End Get
        End Property
        
        Friend ReadOnly Property lScriptIDColumn As DataColumn
            Get
                Return Me.columnlScriptID
            End Get
        End Property
        
        Friend ReadOnly Property lContestIDColumn As DataColumn
            Get
                Return Me.columnlContestID
            End Get
        End Property
        
        Friend ReadOnly Property lTutorialIDColumn As DataColumn
            Get
                Return Me.columnlTutorialID
            End Get
        End Property
        
        Friend ReadOnly Property lAffectedUserIDColumn As DataColumn
            Get
                Return Me.columnlAffectedUserID
            End Get
        End Property
        
        Friend ReadOnly Property vsEmailColumn As DataColumn
            Get
                Return Me.columnvsEmail
            End Get
        End Property
        
        Friend ReadOnly Property vsPasswordColumn As DataColumn
            Get
                Return Me.columnvsPassword
            End Get
        End Property
        
        Friend ReadOnly Property vsIPAddressColumn As DataColumn
            Get
                Return Me.columnvsIPAddress
            End Get
        End Property
        
        Friend ReadOnly Property lSiteIDColumn As DataColumn
            Get
                Return Me.columnlSiteID
            End Get
        End Property
        
        Friend ReadOnly Property lItemTypeIDColumn As DataColumn
            Get
                Return Me.columnlItemTypeID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblLogRow
            Get
                Return CType(Me.Rows(index),tblLogRow)
            End Get
        End Property
        
        Public Event tblLogRowChanged As tblLogRowChangeEventHandler
        
        Public Event tblLogRowChanging As tblLogRowChangeEventHandler
        
        Public Event tblLogRowDeleted As tblLogRowChangeEventHandler
        
        Public Event tblLogRowDeleting As tblLogRowChangeEventHandler
        
        Public Overloads Sub AddtblLogRow(ByVal row As tblLogRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtblLogRow(ByVal lUserID As Integer, ByVal dtActivityDate As Date, ByVal lActivityID As Integer, ByVal lProjectID As Integer, ByVal lScriptID As Integer, ByVal lContestID As Integer, ByVal lTutorialID As Integer, ByVal lAffectedUserID As Integer, ByVal vsEmail As String, ByVal vsPassword As String, ByVal vsIPAddress As String, ByVal lSiteID As Integer, ByVal lItemTypeID As Integer) As tblLogRow
            Dim rowtblLogRow As tblLogRow = CType(Me.NewRow,tblLogRow)
            rowtblLogRow.ItemArray = New Object() {Nothing, lUserID, dtActivityDate, lActivityID, lProjectID, lScriptID, lContestID, lTutorialID, lAffectedUserID, vsEmail, vsPassword, vsIPAddress, lSiteID, lItemTypeID}
            Me.Rows.Add(rowtblLogRow)
            Return rowtblLogRow
        End Function
        
        Public Function FindBylLogID(ByVal lLogID As Integer) As tblLogRow
            Return CType(Me.Rows.Find(New Object() {lLogID}),tblLogRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As tblLogDataTable = CType(MyBase.Clone,tblLogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New tblLogDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnlLogID = Me.Columns("lLogID")
            Me.columnlUserID = Me.Columns("lUserID")
            Me.columndtActivityDate = Me.Columns("dtActivityDate")
            Me.columnlActivityID = Me.Columns("lActivityID")
            Me.columnlProjectID = Me.Columns("lProjectID")
            Me.columnlScriptID = Me.Columns("lScriptID")
            Me.columnlContestID = Me.Columns("lContestID")
            Me.columnlTutorialID = Me.Columns("lTutorialID")
            Me.columnlAffectedUserID = Me.Columns("lAffectedUserID")
            Me.columnvsEmail = Me.Columns("vsEmail")
            Me.columnvsPassword = Me.Columns("vsPassword")
            Me.columnvsIPAddress = Me.Columns("vsIPAddress")
            Me.columnlSiteID = Me.Columns("lSiteID")
            Me.columnlItemTypeID = Me.Columns("lItemTypeID")
        End Sub
        
        Private Sub InitClass()
            Me.columnlLogID = New DataColumn("lLogID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlLogID)
            Me.columnlUserID = New DataColumn("lUserID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlUserID)
            Me.columndtActivityDate = New DataColumn("dtActivityDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndtActivityDate)
            Me.columnlActivityID = New DataColumn("lActivityID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlActivityID)
            Me.columnlProjectID = New DataColumn("lProjectID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlProjectID)
            Me.columnlScriptID = New DataColumn("lScriptID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlScriptID)
            Me.columnlContestID = New DataColumn("lContestID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlContestID)
            Me.columnlTutorialID = New DataColumn("lTutorialID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlTutorialID)
            Me.columnlAffectedUserID = New DataColumn("lAffectedUserID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlAffectedUserID)
            Me.columnvsEmail = New DataColumn("vsEmail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsEmail)
            Me.columnvsPassword = New DataColumn("vsPassword", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsPassword)
            Me.columnvsIPAddress = New DataColumn("vsIPAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvsIPAddress)
            Me.columnlSiteID = New DataColumn("lSiteID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlSiteID)
            Me.columnlItemTypeID = New DataColumn("lItemTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemTypeID)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey28", New DataColumn() {Me.columnlLogID}, true))
            Me.columnlLogID.AutoIncrement = true
            Me.columnlLogID.AllowDBNull = false
            Me.columnlLogID.Unique = true
        End Sub
        
        Public Function NewtblLogRow() As tblLogRow
            Return CType(Me.NewRow,tblLogRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New tblLogRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tblLogRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblLogRowChangedEvent) Is Nothing) Then
                RaiseEvent tblLogRowChanged(Me, New tblLogRowChangeEvent(CType(e.Row,tblLogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblLogRowChangingEvent) Is Nothing) Then
                RaiseEvent tblLogRowChanging(Me, New tblLogRowChangeEvent(CType(e.Row,tblLogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblLogRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblLogRowDeleted(Me, New tblLogRowChangeEvent(CType(e.Row,tblLogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblLogRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblLogRowDeleting(Me, New tblLogRowChangeEvent(CType(e.Row,tblLogRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetblLogRow(ByVal row As tblLogRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblLogRow
        Inherits DataRow
        
        Private tabletblLog As tblLogDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblLog = CType(Me.Table,tblLogDataTable)
        End Sub
        
        Public Property lLogID As Integer
            Get
                Return CType(Me(Me.tabletblLog.lLogIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblLog.lLogIDColumn) = value
            End Set
        End Property
        
        Public Property lUserID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblLog.lUserIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLog.lUserIDColumn) = value
            End Set
        End Property
        
        Public Property dtActivityDate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblLog.dtActivityDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLog.dtActivityDateColumn) = value
            End Set
        End Property
        
        Public Property lActivityID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblLog.lActivityIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLog.lActivityIDColumn) = value
            End Set
        End Property
        
        Public Property lProjectID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblLog.lProjectIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLog.lProjectIDColumn) = value
            End Set
        End Property
        
        Public Property lScriptID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblLog.lScriptIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLog.lScriptIDColumn) = value
            End Set
        End Property
        
        Public Property lContestID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblLog.lContestIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLog.lContestIDColumn) = value
            End Set
        End Property
        
        Public Property lTutorialID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblLog.lTutorialIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLog.lTutorialIDColumn) = value
            End Set
        End Property
        
        Public Property lAffectedUserID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblLog.lAffectedUserIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLog.lAffectedUserIDColumn) = value
            End Set
        End Property
        
        Public Property vsEmail As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLog.vsEmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLog.vsEmailColumn) = value
            End Set
        End Property
        
        Public Property vsPassword As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLog.vsPasswordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLog.vsPasswordColumn) = value
            End Set
        End Property
        
        Public Property vsIPAddress As String
            Get
                Try 
                    Return CType(Me(Me.tabletblLog.vsIPAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLog.vsIPAddressColumn) = value
            End Set
        End Property
        
        Public Property lSiteID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblLog.lSiteIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLog.lSiteIDColumn) = value
            End Set
        End Property
        
        Public Property lItemTypeID As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblLog.lItemTypeIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblLog.lItemTypeIDColumn) = value
            End Set
        End Property
        
        Public Function IslUserIDNull() As Boolean
            Return Me.IsNull(Me.tabletblLog.lUserIDColumn)
        End Function
        
        Public Sub SetlUserIDNull()
            Me(Me.tabletblLog.lUserIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdtActivityDateNull() As Boolean
            Return Me.IsNull(Me.tabletblLog.dtActivityDateColumn)
        End Function
        
        Public Sub SetdtActivityDateNull()
            Me(Me.tabletblLog.dtActivityDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslActivityIDNull() As Boolean
            Return Me.IsNull(Me.tabletblLog.lActivityIDColumn)
        End Function
        
        Public Sub SetlActivityIDNull()
            Me(Me.tabletblLog.lActivityIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslProjectIDNull() As Boolean
            Return Me.IsNull(Me.tabletblLog.lProjectIDColumn)
        End Function
        
        Public Sub SetlProjectIDNull()
            Me(Me.tabletblLog.lProjectIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslScriptIDNull() As Boolean
            Return Me.IsNull(Me.tabletblLog.lScriptIDColumn)
        End Function
        
        Public Sub SetlScriptIDNull()
            Me(Me.tabletblLog.lScriptIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslContestIDNull() As Boolean
            Return Me.IsNull(Me.tabletblLog.lContestIDColumn)
        End Function
        
        Public Sub SetlContestIDNull()
            Me(Me.tabletblLog.lContestIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslTutorialIDNull() As Boolean
            Return Me.IsNull(Me.tabletblLog.lTutorialIDColumn)
        End Function
        
        Public Sub SetlTutorialIDNull()
            Me(Me.tabletblLog.lTutorialIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslAffectedUserIDNull() As Boolean
            Return Me.IsNull(Me.tabletblLog.lAffectedUserIDColumn)
        End Function
        
        Public Sub SetlAffectedUserIDNull()
            Me(Me.tabletblLog.lAffectedUserIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsEmailNull() As Boolean
            Return Me.IsNull(Me.tabletblLog.vsEmailColumn)
        End Function
        
        Public Sub SetvsEmailNull()
            Me(Me.tabletblLog.vsEmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsPasswordNull() As Boolean
            Return Me.IsNull(Me.tabletblLog.vsPasswordColumn)
        End Function
        
        Public Sub SetvsPasswordNull()
            Me(Me.tabletblLog.vsPasswordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvsIPAddressNull() As Boolean
            Return Me.IsNull(Me.tabletblLog.vsIPAddressColumn)
        End Function
        
        Public Sub SetvsIPAddressNull()
            Me(Me.tabletblLog.vsIPAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslSiteIDNull() As Boolean
            Return Me.IsNull(Me.tabletblLog.lSiteIDColumn)
        End Function
        
        Public Sub SetlSiteIDNull()
            Me(Me.tabletblLog.lSiteIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslItemTypeIDNull() As Boolean
            Return Me.IsNull(Me.tabletblLog.lItemTypeIDColumn)
        End Function
        
        Public Sub SetlItemTypeIDNull()
            Me(Me.tabletblLog.lItemTypeIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class tblLogRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As tblLogRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As tblLogRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As tblLogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AssetItemsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAssetID As DataColumn
        
        Private columnlItemID As DataColumn
        
        Private columnlItemTypeID As DataColumn
        
        Friend Sub New()
            MyBase.New("AssetItems")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AssetIDColumn As DataColumn
            Get
                Return Me.columnAssetID
            End Get
        End Property
        
        Friend ReadOnly Property lItemIDColumn As DataColumn
            Get
                Return Me.columnlItemID
            End Get
        End Property
        
        Friend ReadOnly Property lItemTypeIDColumn As DataColumn
            Get
                Return Me.columnlItemTypeID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssetItemsRow
            Get
                Return CType(Me.Rows(index),AssetItemsRow)
            End Get
        End Property
        
        Public Event AssetItemsRowChanged As AssetItemsRowChangeEventHandler
        
        Public Event AssetItemsRowChanging As AssetItemsRowChangeEventHandler
        
        Public Event AssetItemsRowDeleted As AssetItemsRowChangeEventHandler
        
        Public Event AssetItemsRowDeleting As AssetItemsRowChangeEventHandler
        
        Public Overloads Sub AddAssetItemsRow(ByVal row As AssetItemsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAssetItemsRow(ByVal lItemID As Integer, ByVal lItemTypeID As Integer) As AssetItemsRow
            Dim rowAssetItemsRow As AssetItemsRow = CType(Me.NewRow,AssetItemsRow)
            rowAssetItemsRow.ItemArray = New Object() {Nothing, lItemID, lItemTypeID}
            Me.Rows.Add(rowAssetItemsRow)
            Return rowAssetItemsRow
        End Function
        
        Public Function FindByAssetID(ByVal AssetID As Integer) As AssetItemsRow
            Return CType(Me.Rows.Find(New Object() {AssetID}),AssetItemsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AssetItemsDataTable = CType(MyBase.Clone,AssetItemsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AssetItemsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAssetID = Me.Columns("AssetID")
            Me.columnlItemID = Me.Columns("lItemID")
            Me.columnlItemTypeID = Me.Columns("lItemTypeID")
        End Sub
        
        Private Sub InitClass()
            Me.columnAssetID = New DataColumn("AssetID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAssetID)
            Me.columnlItemID = New DataColumn("lItemID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemID)
            Me.columnlItemTypeID = New DataColumn("lItemTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlItemTypeID)
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey30", New DataColumn() {Me.columnAssetID, Me.columnlItemID, Me.columnlItemTypeID}, false))
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey36", New DataColumn() {Me.columnlItemID, Me.columnlItemTypeID}, false))
            Me.Constraints.Add(New UniqueConstraint("LegacyDataSetKey41", New DataColumn() {Me.columnAssetID}, true))
            Me.columnAssetID.AutoIncrement = true
            Me.columnAssetID.AutoIncrementSeed = 1
            Me.columnAssetID.AllowDBNull = false
            Me.columnAssetID.Unique = true
            Me.columnlItemID.AllowDBNull = false
            Me.columnlItemTypeID.AllowDBNull = false
        End Sub
        
        Public Function NewAssetItemsRow() As AssetItemsRow
            Return CType(Me.NewRow,AssetItemsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AssetItemsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AssetItemsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssetItemsRowChangedEvent) Is Nothing) Then
                RaiseEvent AssetItemsRowChanged(Me, New AssetItemsRowChangeEvent(CType(e.Row,AssetItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssetItemsRowChangingEvent) Is Nothing) Then
                RaiseEvent AssetItemsRowChanging(Me, New AssetItemsRowChangeEvent(CType(e.Row,AssetItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssetItemsRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssetItemsRowDeleted(Me, New AssetItemsRowChangeEvent(CType(e.Row,AssetItemsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssetItemsRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssetItemsRowDeleting(Me, New AssetItemsRowChangeEvent(CType(e.Row,AssetItemsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAssetItemsRow(ByVal row As AssetItemsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AssetItemsRow
        Inherits DataRow
        
        Private tableAssetItems As AssetItemsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssetItems = CType(Me.Table,AssetItemsDataTable)
        End Sub
        
        Public Property AssetID As Integer
            Get
                Return CType(Me(Me.tableAssetItems.AssetIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAssetItems.AssetIDColumn) = value
            End Set
        End Property
        
        Public Property lItemID As Integer
            Get
                Return CType(Me(Me.tableAssetItems.lItemIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAssetItems.lItemIDColumn) = value
            End Set
        End Property
        
        Public Property lItemTypeID As Integer
            Get
                Return CType(Me(Me.tableAssetItems.lItemTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAssetItems.lItemTypeIDColumn) = value
            End Set
        End Property
        
        Public Function GettblProjectsRows() As tblProjectsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AssetItemsToProjects")),tblProjectsRow())
        End Function
        
        Public Function GettblScriptsRows() As tblScriptsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AssetItemsToScripts")),tblScriptsRow())
        End Function
        
        Public Function GettblTutorialsRows() As tblTutorialsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AssetItemsToTutorials")),tblTutorialsRow())
        End Function
        
        Public Function GettblReviewsRows() As tblReviewsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AssetItemsToReviews")),tblReviewsRow())
        End Function
        
        Public Function GettblRankingsRows() As tblRankingsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AssetItemsToRankings")),tblRankingsRow())
        End Function
        
        Public Function GettblContestItemsRows() As tblContestItemsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AssetItemsToContestItems")),tblContestItemsRow())
        End Function
        
        Public Function GettblContestVotesRows() As tblContestVotesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AssetItemsToContestVotes")),tblContestVotesRow())
        End Function
        
        Public Function GettblItemSitesRows() As tblItemSitesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AssetItemsToItemSite")),tblItemSitesRow())
        End Function
        
        Public Function GettblItemCategoriesRows() As tblItemCategoriesRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AssetItemsToItemCategories")),tblItemCategoriesRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AssetItemsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AssetItemsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AssetItemsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AssetItemsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
